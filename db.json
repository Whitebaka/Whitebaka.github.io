{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"3cfd236fe43f598e11385fcc5f5fe448be27fa55","modified":1646557619000},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1646557634000},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1644737230000},{"_id":"themes/butterfly/README.md","hash":"6ee27baf95a5741abbc224ef8938d679b6597665","modified":1644737230000},{"_id":"themes/butterfly/README_CN.md","hash":"49ace5208f98783344f17a00adab7641cda43280","modified":1644737230000},{"_id":"themes/butterfly/_config.yml","hash":"8239544985a87481bf4c6c4775e8a3b4745d0bcb","modified":1644737230000},{"_id":"themes/butterfly/package.json","hash":"80ebdf46caa7266fc43cd51c96c97731adbc5694","modified":1644737230000},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1644737230000},{"_id":"themes/butterfly/languages/default.yml","hash":"7fd2950554e99a6f15232267621f36f026a85380","modified":1644737230000},{"_id":"themes/butterfly/languages/en.yml","hash":"4b2c351f2b5fd4f8497e806085364928e1af0b5b","modified":1644737230000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"6c35255c196ea8e9817b85b6d7729d00cf18f231","modified":1644737230000},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ef035065ebb37fce3e56e51f8b56deb596db78b2","modified":1644737230000},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1644737230000},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1644737230000},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1644737230000},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1644737230000},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1644737230000},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1644737230000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1644737230000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1644737230000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1644737230000},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"ab3bdeb6e0acd3d58091698c1335afb069eea7e5","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"847a5cbc13db1a435a4f762a7c0007d9bcbb79a2","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"f093ab771257a6a939b194f68607a2038c8d7da3","modified":1644737230000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1644737230000},{"_id":"themes/butterfly/scripts/events/config.js","hash":"a72c2020c87c4998aa124a16e9f8560875b9f86d","modified":1644737230000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"a7f567b3d3110afe2f99c967b8e15351a7f5bd6d","modified":1644737230000},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1644737230000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1644737230000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1644737230000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1644737230000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1644737230000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1644737230000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"6a103a2472903289bdecd5240eb89cac0b9e13d9","modified":1644737230000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1644737230000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"21556f9cb412ddc500ad12ecfd419f3ea6c9f663","modified":1644737230000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1644737230000},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1644737230000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1644737230000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1644737230000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1644737230000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1644737230000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1644737230000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1644737230000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1644737230000},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1644737230000},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1644737230000},{"_id":"themes/butterfly/source/css/var.styl","hash":"4890a40366d6443f8b8942a4e9a6dce9fe3494f5","modified":1644737230000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1644737230000},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1644737230000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1644737230000},{"_id":"themes/butterfly/source/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1644737230000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1644737230000},{"_id":"themes/butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9e58c80af8bbd0c66ccb4f94d3781818cebf0d66","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"dc3913c1a6dd207051c3d3414a33851ae8bc0a45","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"b9ebb02af8ccf43e3f73be43db19254fa913c57b","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"fed069baa9b383f57db32bb631115071d29bdc60","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"d4072f9ab79f4ac49aa251ae470abc45a2fddbd6","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"b63fd8ec48d782f51ee11226753fed1998bbf34a","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"0380a1e048e6219ea4b4a8a4eadba960edf308f0","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1644737230000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f7fd855593396b30932a06627287a73a407aff88","modified":1644737230000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1644737230000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1644737230000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1644737230000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"2d3b0386c8b62a61734e10bab2cf86842cbb1673","modified":1644737230000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1644737230000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1644737230000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1644737230000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d97c1722ce0fcc319f1f90ec2d51f9d746748e2b","modified":1644737230000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":1644737230000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1644737230000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"84d4f27fde933bdf839629eb3bddcbc0f4592836","modified":1644737230000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1644737230000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1644737230000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1644737230000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"1bcbc80dff19cd53d0b367c3b9a3c751d3a1f10d","modified":1644737230000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"e5008f43897d8482b4831cd4c13a0af40e496762","modified":1644737230000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"f67177310f5594954b25a591d186d28d5d450b18","modified":1644737230000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1644737230000},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1644737230000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1644737230000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1644737230000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1644737230000},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1644737230000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"826dae759062d8f84eb2bf5ab8fdb80e0f79d58b","modified":1644737230000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1644737230000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"656f9007d94cf29a20532705d94fb7f22827e6fe","modified":1644737230000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0290605c4984882990059eefe3ad18d2ac6a19ef","modified":1644737230000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"e4c987c0202162b50dec91e1df74665d0fa933c9","modified":1644737230000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1644737230000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1644737230000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1644737230000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1644737230000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1644737230000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1644737230000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"08493b66b9f31f2bd3e9a3115017a0ce16142b20","modified":1644737230000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1644737230000},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1644737230000},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1644737230000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1644737230000},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"ec62117f38e095425f295b1170c222c7a1399425","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"0a7587a0211011b5942edba2aa80d51169561d30","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"143236e395c18d80ab8dc794821eb337c85f6b32","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe684aaad4c99b908dc4499c85afd9a2cd893aae","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"0764709381fa29778f6390d645ed137d2f91228f","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"9c96e6e67931977268b218b99084b98597c2e42b","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"e4850f2c9ba5f6b2248808f7257662679e0fab0a","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"9302837f1e35f153323bb4f166514c7e96e8ecdd","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"c271cacbac14ed665bbf47aa9c6e74e94c69dcef","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"c1c75abe5c899618ed6699c97ac999544840098a","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"59c22ebf3aaee90152e7cdb17ff5841c888fcd82","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"7648e4cb0b224f480b5f1356d64f62c9235f6723","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"ac811c1d6e0bf08aeb933ade1b9557e0c560d0c9","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"9028efac78e4122acd734edd5ef9110ef3f05cd1","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"5e32d903903c76db55a625640f9417d15a3a312f","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"c92df4f9d0611cf44c1a4491e226f242ec80f5bb","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"8ce336a4c8cae81b58ee26ff51040ca650ff1519","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1644737230000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1644737230000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1644737230000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1644737230000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1644737230000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1644737230000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1644737230000},{"_id":"public/archives/index.html","hash":"c649b032f667c26f9ef35bda18319f0edc33c7bc","modified":1662135024474},{"_id":"public/archives/2022/index.html","hash":"e4793ecc82fbabcaee5fe4c76c9baf9777552321","modified":1662135024474},{"_id":"public/archives/2022/04/index.html","hash":"61bd0988ae87e0438fedf058e9ff8947ddfec1e6","modified":1662135024474},{"_id":"public/index.html","hash":"4c5e8a3afac58586e4aab7d651f643cf97e07ba3","modified":1662135024474},{"_id":"public/2022/04/25/hello-world/index.html","hash":"9542858b811a7557545db71cae8a9f8c4e9b1d8b","modified":1662135024474},{"_id":"public/CNAME","hash":"3cfd236fe43f598e11385fcc5f5fe448be27fa55","modified":1651410020338},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1651410020338},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1651410020338},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1651410020338},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1651410020338},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1651410020338},{"_id":"public/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1651410020338},{"_id":"public/js/search/local-search.js","hash":"ec62117f38e095425f295b1170c222c7a1399425","modified":1651410020338},{"_id":"public/css/index.css","hash":"f7dd9469910b87ef1e182873134331a82f721160","modified":1651410020338},{"_id":"public/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1651410020338},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1651410020338},{"_id":"source/_posts/如何在obs里添加悬浮窗.md","hash":"1b4ed222fd42ccf27731173cc59b7397ea5223d8","modified":1654692578080},{"_id":"public/archives/2022/06/index.html","hash":"d5823c407eb0bdf2674b3f04c52ec895745d94df","modified":1662135024474},{"_id":"public/2022/06/08/如何在obs里添加悬浮窗/index.html","hash":"2f5b7f25e602effb04ca2cf9ef9cb0e22d74445e","modified":1662135024474},{"_id":"source/_posts/基于mikanani与qbittorrent打造追番自动下载系统.md","hash":"36bbb5f6dd2569297c118c589c6929f8f190da08","modified":1656231734275},{"_id":"public/2022/06/26/基于mikanani与qbittorrent打造追番自动下载系统/index.html","hash":"c45075474d239160f7159a13141a081ec9eb302d","modified":1662135024474},{"_id":"source/_posts/How-to-init-a-new-PC-About-APP.md","hash":"77dd25266d97ae26f88e982acb10bcc6e54de987","modified":1659107187515},{"_id":"public/archives/2022/07/index.html","hash":"b8771d31f266aa0265099fe0147b4a60020b04dd","modified":1662135024474},{"_id":"public/2022/07/28/How-to-init-a-new-PC-About-APP/index.html","hash":"9bd37e7c51be46997bfb84826ba64c9867b5021b","modified":1662135024474},{"_id":"source/_posts/胡言乱语零知识证明Page0.md","hash":"bcc023d4ac8488e104e50f6eb0b419f3efff26d6","modified":1659616272677},{"_id":"public/archives/2022/08/index.html","hash":"fea9807860dabfa4ff1c9c80308a4675a28e7596","modified":1662135024474},{"_id":"public/2022/08/04/胡言乱语零知识证明Page0/index.html","hash":"f1e54240a028f56e9a4bb18e91b79da954a0cfd0","modified":1662135024474},{"_id":"public/tags/https-whitebaka-1301161068-cos-ap-nanjing-myqcloud-com-image-100174471-p0-jpg-1080/index.html","hash":"fd3e8e5fc6810da925c65aa58a5a8ffbcf690042","modified":1659616182566},{"_id":"source/_posts/Leetcode-22-8week1.md","hash":"79f773d467bf76c010ce1b9a88d32f944f3cf765","modified":1660922688024},{"_id":"public/2022/08/19/Leetcode-22-8week1/index.html","hash":"64c8782d47c94680b576880f9275c6a918e1365a","modified":1662135024474},{"_id":"source/_posts/Leetcode-22-8week2.md","hash":"f97429de0b519b35cc2330844722fa76e8d628d6","modified":1661522098505},{"_id":"public/2022/08/26/Leetcode-22-8week2/index.html","hash":"1a44c4981db87d3b1f4be006c6be3f3425b1065a","modified":1662135024474},{"_id":"source/_posts/Leetcode-22-8week3.md","hash":"6a2f699292e7c713d8f21164b6ad72998779a6d2","modified":1662135019949},{"_id":"public/archives/2022/09/index.html","hash":"5aa8277d3005e2d0e47affe56248bec6cf9cf9b0","modified":1662135024474},{"_id":"public/2022/09/02/Leetcode-22-8week3/index.html","hash":"5d06dc0b68275b6b2a38017bb9cb56eb1862730b","modified":1662135024474}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-04-25T13:22:18.119Z","updated":"2022-03-06T09:07:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2navz6w0000ytwr2z2pbgg6","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/FPNVfYzUcAosaBs.jfif","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"如何在obs里添加悬浮窗","date":"2022-06-08T12:29:58.000Z","_content":"# 前言\n先略过晚点再补\n# 设置\n## ACT设置\n### Step1.确保安装悬浮窗插件（OverlayPlugin.dll)\n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220608203202.png)\n\n### Step2.确保悬浮窗WS服务打开\n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220608204150.png)\n\n### Step3.获取WS链接\n在提供的悬浮窗链接后添加?HOST_PORT=ws://{本地IP}:{端口号}/  \n如https://overlays.ffcafe.cn/mopimopi2/?HOST_PORT=ws://127.0.0.1:10501/  \n一般的，大多数常用悬浮窗可以直接使用Step2内生成器生成链接。  \n<br></br>\n至此act部分设置完成。\n\n## Obs设置\n### Step1.添加浏览器源，并在url输入刚才的链接。正确输入大小\n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220608204741.png)\n### Step2.调整悬浮窗参数。\n右键创建的浏览器源-》互动，在这个界面可以如同自己电脑上一般操作悬浮窗的各项设置。\n\n## 完成！\n进行测试看obs能否正确读取act解析数据即可完成。\n\n# Q&A\n暂时没有","source":"_posts/如何在obs里添加悬浮窗.md","raw":"---\ntitle: 如何在obs里添加悬浮窗\ndate: 2022-06-08 20:29:58\ntags:\n---\n# 前言\n先略过晚点再补\n# 设置\n## ACT设置\n### Step1.确保安装悬浮窗插件（OverlayPlugin.dll)\n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220608203202.png)\n\n### Step2.确保悬浮窗WS服务打开\n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220608204150.png)\n\n### Step3.获取WS链接\n在提供的悬浮窗链接后添加?HOST_PORT=ws://{本地IP}:{端口号}/  \n如https://overlays.ffcafe.cn/mopimopi2/?HOST_PORT=ws://127.0.0.1:10501/  \n一般的，大多数常用悬浮窗可以直接使用Step2内生成器生成链接。  \n<br></br>\n至此act部分设置完成。\n\n## Obs设置\n### Step1.添加浏览器源，并在url输入刚才的链接。正确输入大小\n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220608204741.png)\n### Step2.调整悬浮窗参数。\n右键创建的浏览器源-》互动，在这个界面可以如同自己电脑上一般操作悬浮窗的各项设置。\n\n## 完成！\n进行测试看obs能否正确读取act解析数据即可完成。\n\n# Q&A\n暂时没有","slug":"如何在obs里添加悬浮窗","published":1,"updated":"2022-06-08T12:49:38.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl45l8x0e0000c6wrdq7i2391","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>先略过晚点再补</p>\n<h1 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h1><h2 id=\"ACT设置\"><a href=\"#ACT设置\" class=\"headerlink\" title=\"ACT设置\"></a>ACT设置</h2><h3 id=\"Step1-确保安装悬浮窗插件（OverlayPlugin-dll\"><a href=\"#Step1-确保安装悬浮窗插件（OverlayPlugin-dll\" class=\"headerlink\" title=\"Step1.确保安装悬浮窗插件（OverlayPlugin.dll)\"></a>Step1.确保安装悬浮窗插件（OverlayPlugin.dll)</h3><p><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220608203202.png\"></p>\n<h3 id=\"Step2-确保悬浮窗WS服务打开\"><a href=\"#Step2-确保悬浮窗WS服务打开\" class=\"headerlink\" title=\"Step2.确保悬浮窗WS服务打开\"></a>Step2.确保悬浮窗WS服务打开</h3><p><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220608204150.png\"></p>\n<h3 id=\"Step3-获取WS链接\"><a href=\"#Step3-获取WS链接\" class=\"headerlink\" title=\"Step3.获取WS链接\"></a>Step3.获取WS链接</h3><p>在提供的悬浮窗链接后添加?HOST_PORT&#x3D;ws:&#x2F;&#x2F;{本地IP}:{端口号}&#x2F;<br>如<a href=\"https://overlays.ffcafe.cn/mopimopi2/?HOST_PORT=ws://127.0.0.1:10501/\">https://overlays.ffcafe.cn/mopimopi2/?HOST_PORT=ws://127.0.0.1:10501/</a><br>一般的，大多数常用悬浮窗可以直接使用Step2内生成器生成链接。<br><br></br><br>至此act部分设置完成。</p>\n<h2 id=\"Obs设置\"><a href=\"#Obs设置\" class=\"headerlink\" title=\"Obs设置\"></a>Obs设置</h2><h3 id=\"Step1-添加浏览器源，并在url输入刚才的链接。正确输入大小\"><a href=\"#Step1-添加浏览器源，并在url输入刚才的链接。正确输入大小\" class=\"headerlink\" title=\"Step1.添加浏览器源，并在url输入刚才的链接。正确输入大小\"></a>Step1.添加浏览器源，并在url输入刚才的链接。正确输入大小</h3><p><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220608204741.png\"></p>\n<h3 id=\"Step2-调整悬浮窗参数。\"><a href=\"#Step2-调整悬浮窗参数。\" class=\"headerlink\" title=\"Step2.调整悬浮窗参数。\"></a>Step2.调整悬浮窗参数。</h3><p>右键创建的浏览器源-》互动，在这个界面可以如同自己电脑上一般操作悬浮窗的各项设置。</p>\n<h2 id=\"完成！\"><a href=\"#完成！\" class=\"headerlink\" title=\"完成！\"></a>完成！</h2><p>进行测试看obs能否正确读取act解析数据即可完成。</p>\n<h1 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h1><p>暂时没有</p>\n","site":{"data":{}},"cover":"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/FPNVfYzUcAosaBs.jfif","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>先略过晚点再补</p>\n<h1 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h1><h2 id=\"ACT设置\"><a href=\"#ACT设置\" class=\"headerlink\" title=\"ACT设置\"></a>ACT设置</h2><h3 id=\"Step1-确保安装悬浮窗插件（OverlayPlugin-dll\"><a href=\"#Step1-确保安装悬浮窗插件（OverlayPlugin-dll\" class=\"headerlink\" title=\"Step1.确保安装悬浮窗插件（OverlayPlugin.dll)\"></a>Step1.确保安装悬浮窗插件（OverlayPlugin.dll)</h3><p><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220608203202.png\"></p>\n<h3 id=\"Step2-确保悬浮窗WS服务打开\"><a href=\"#Step2-确保悬浮窗WS服务打开\" class=\"headerlink\" title=\"Step2.确保悬浮窗WS服务打开\"></a>Step2.确保悬浮窗WS服务打开</h3><p><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220608204150.png\"></p>\n<h3 id=\"Step3-获取WS链接\"><a href=\"#Step3-获取WS链接\" class=\"headerlink\" title=\"Step3.获取WS链接\"></a>Step3.获取WS链接</h3><p>在提供的悬浮窗链接后添加?HOST_PORT&#x3D;ws:&#x2F;&#x2F;{本地IP}:{端口号}&#x2F;<br>如<a href=\"https://overlays.ffcafe.cn/mopimopi2/?HOST_PORT=ws://127.0.0.1:10501/\">https://overlays.ffcafe.cn/mopimopi2/?HOST_PORT=ws://127.0.0.1:10501/</a><br>一般的，大多数常用悬浮窗可以直接使用Step2内生成器生成链接。<br><br></br><br>至此act部分设置完成。</p>\n<h2 id=\"Obs设置\"><a href=\"#Obs设置\" class=\"headerlink\" title=\"Obs设置\"></a>Obs设置</h2><h3 id=\"Step1-添加浏览器源，并在url输入刚才的链接。正确输入大小\"><a href=\"#Step1-添加浏览器源，并在url输入刚才的链接。正确输入大小\" class=\"headerlink\" title=\"Step1.添加浏览器源，并在url输入刚才的链接。正确输入大小\"></a>Step1.添加浏览器源，并在url输入刚才的链接。正确输入大小</h3><p><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220608204741.png\"></p>\n<h3 id=\"Step2-调整悬浮窗参数。\"><a href=\"#Step2-调整悬浮窗参数。\" class=\"headerlink\" title=\"Step2.调整悬浮窗参数。\"></a>Step2.调整悬浮窗参数。</h3><p>右键创建的浏览器源-》互动，在这个界面可以如同自己电脑上一般操作悬浮窗的各项设置。</p>\n<h2 id=\"完成！\"><a href=\"#完成！\" class=\"headerlink\" title=\"完成！\"></a>完成！</h2><p>进行测试看obs能否正确读取act解析数据即可完成。</p>\n<h1 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h1><p>暂时没有</p>\n"},{"title":"基于mikanani与qbittorrent打造追番自动下载系统","date":"2022-06-26T07:21:17.000Z","cover":"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626162156.png","_content":"# 前言\n受限于国内新番流媒体体验又回到正版没得看或者没法看的情况，盗版流媒体又始终受限于广告和不稳定的站点/片源，最终又逐渐走回了过去的老路，回到下载时代。  \n下载的好处是显而易见的：你最后收获的是一个本地片源，不用担心遭遇不测。下载完成后播放体验仅取决于播放设备，不会遇到网络问题。相对的，也会遇到中字依赖字幕组或巴哈姆特、存在时效性不足之类的问题，字幕问题前者用爱发电非长久之计，会遇到更新时间不甚稳定的状况，后者则原生服务港台用户，体验会与本地有差异。时效性问题则来源于必须等待源完全上传，用户完整下载，会比直接流媒体的方式获取更晚一些（偷跑不算）。  \n但对大多数社畜或者普通用户来说，一两天的时效性并不严重，更希望获得一个想看的时候能随时打开观看的体验，故而引入本文介绍的下载体系：mikanani与qbittorrent。\n\n# 介绍\n## mikanani(蜜柑计划)\n蜜柑计划是提供各大字幕组/发布组资源的整合平台与下载站，通常而言各大字幕组/发布组上传资源后蜜柑也会同步有资源。并且蜜柑计划提供了RSS服务，本文后续也将使用RSS系统来帮助我们自动下载。\n![蜜柑官网](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626154115.png)\n## qbittorrent\nqbittorrent是一个开源的bt下载器，我们利用他提供的rss下载功能定期访问rss，获取更新的新番列表。\n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626155147.png)\n\n# 让我们开始吧\n## mikanani侧设置\n为了使用mikanani提供的rss服务，首先要在蜜柑进行账号的注册和登陆。  \n登陆后，我们选择一部番剧（这里以cue！为例）  \n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626155720.png)\n可以看到，点开后有蓝色框与橙色框两种订阅模式。  \n1.选择蓝色框订阅，会选择订阅本番剧所有字幕组/发布组，资源量较大，一般不使用。  \n2.橙色框订阅则是其中选择某一个字幕组订阅，资源量相对合理，可以选择特定喜欢的字幕组。通常而言，巴哈姆特的raw因为不需要额外翻译流程，时效最高；而各大字幕组普遍用爱发电，专业性较好，自由选择。  \n之后我们回到首页，或订阅选项下，可以看到RSS订阅选项。\n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626160337.png)\n选择右键，复制链接地址（或者点击跳转，复制新开网页的地址）。\n至此，我们蜜柑侧的配置就完成了，未来我们订阅的新番，就会自动将下载链接推送至这个RSS。\n\n## qbittorrent侧设置\nqbittorrent是bt下载器，同时可以通过自带的附加功能读取rss文件。  \n首先我们要打开qbt的rss功能  \n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626160650.png)\n将该列中的启用RSS订阅与RSS自动下载功能。\n更新间隔时间代表访问RSS的周期。  \n文章数目最大值不宜设置的太小。    \n自动下载内可以设置一些过滤器，帮助更好的筛选剧集。  \n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626160835.png)  \n那之后我们点击RSS标签页，添加url，输入我们在蜜柑最后一步获取的rss链接，就大功告成！  \n\n# 杂谈\n## 关于不同番剧类型的使用\n对于完结番剧，一般直接可以获得完整种子，想看什么就丢到qbt里下就行。\n对于尚未播出的新番，提前使用本文配置就可以全自动的下载每一集，也非常方便。\n但对于季中突然想看的番剧，该方案仍需手动下载前几话，后续更新可以自动推送，仍有一些不方便。\n## 管理与播放\n笔者目前没有特意的去做片源的管理，直接选择特定剧集播放对阅片量不大的情况下并不复杂。  \n如果有需要的话可以使用诸如infuse/Plex的内容管理器来管理，可以提供更好的体验。  \n## 一些别的工具\n事实上有成套的项目Auto_Bangumi(https://github.com/EstrellaXD/Auto_Bangumi),同样是基于qbt与mikanani，经过二次开发要易用很多，同时解决了季中下载的问题。但本身设计偏向给NAS用户使用，需要对docker或linux环境有一定的了解。","source":"_posts/基于mikanani与qbittorrent打造追番自动下载系统.md","raw":"---\ntitle: 基于mikanani与qbittorrent打造追番自动下载系统\ndate: 2022-06-26 15:21:17\ntags:\ncover: https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626162156.png\n---\n# 前言\n受限于国内新番流媒体体验又回到正版没得看或者没法看的情况，盗版流媒体又始终受限于广告和不稳定的站点/片源，最终又逐渐走回了过去的老路，回到下载时代。  \n下载的好处是显而易见的：你最后收获的是一个本地片源，不用担心遭遇不测。下载完成后播放体验仅取决于播放设备，不会遇到网络问题。相对的，也会遇到中字依赖字幕组或巴哈姆特、存在时效性不足之类的问题，字幕问题前者用爱发电非长久之计，会遇到更新时间不甚稳定的状况，后者则原生服务港台用户，体验会与本地有差异。时效性问题则来源于必须等待源完全上传，用户完整下载，会比直接流媒体的方式获取更晚一些（偷跑不算）。  \n但对大多数社畜或者普通用户来说，一两天的时效性并不严重，更希望获得一个想看的时候能随时打开观看的体验，故而引入本文介绍的下载体系：mikanani与qbittorrent。\n\n# 介绍\n## mikanani(蜜柑计划)\n蜜柑计划是提供各大字幕组/发布组资源的整合平台与下载站，通常而言各大字幕组/发布组上传资源后蜜柑也会同步有资源。并且蜜柑计划提供了RSS服务，本文后续也将使用RSS系统来帮助我们自动下载。\n![蜜柑官网](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626154115.png)\n## qbittorrent\nqbittorrent是一个开源的bt下载器，我们利用他提供的rss下载功能定期访问rss，获取更新的新番列表。\n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626155147.png)\n\n# 让我们开始吧\n## mikanani侧设置\n为了使用mikanani提供的rss服务，首先要在蜜柑进行账号的注册和登陆。  \n登陆后，我们选择一部番剧（这里以cue！为例）  \n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626155720.png)\n可以看到，点开后有蓝色框与橙色框两种订阅模式。  \n1.选择蓝色框订阅，会选择订阅本番剧所有字幕组/发布组，资源量较大，一般不使用。  \n2.橙色框订阅则是其中选择某一个字幕组订阅，资源量相对合理，可以选择特定喜欢的字幕组。通常而言，巴哈姆特的raw因为不需要额外翻译流程，时效最高；而各大字幕组普遍用爱发电，专业性较好，自由选择。  \n之后我们回到首页，或订阅选项下，可以看到RSS订阅选项。\n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626160337.png)\n选择右键，复制链接地址（或者点击跳转，复制新开网页的地址）。\n至此，我们蜜柑侧的配置就完成了，未来我们订阅的新番，就会自动将下载链接推送至这个RSS。\n\n## qbittorrent侧设置\nqbittorrent是bt下载器，同时可以通过自带的附加功能读取rss文件。  \n首先我们要打开qbt的rss功能  \n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626160650.png)\n将该列中的启用RSS订阅与RSS自动下载功能。\n更新间隔时间代表访问RSS的周期。  \n文章数目最大值不宜设置的太小。    \n自动下载内可以设置一些过滤器，帮助更好的筛选剧集。  \n![](https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626160835.png)  \n那之后我们点击RSS标签页，添加url，输入我们在蜜柑最后一步获取的rss链接，就大功告成！  \n\n# 杂谈\n## 关于不同番剧类型的使用\n对于完结番剧，一般直接可以获得完整种子，想看什么就丢到qbt里下就行。\n对于尚未播出的新番，提前使用本文配置就可以全自动的下载每一集，也非常方便。\n但对于季中突然想看的番剧，该方案仍需手动下载前几话，后续更新可以自动推送，仍有一些不方便。\n## 管理与播放\n笔者目前没有特意的去做片源的管理，直接选择特定剧集播放对阅片量不大的情况下并不复杂。  \n如果有需要的话可以使用诸如infuse/Plex的内容管理器来管理，可以提供更好的体验。  \n## 一些别的工具\n事实上有成套的项目Auto_Bangumi(https://github.com/EstrellaXD/Auto_Bangumi),同样是基于qbt与mikanani，经过二次开发要易用很多，同时解决了季中下载的问题。但本身设计偏向给NAS用户使用，需要对docker或linux环境有一定的了解。","slug":"基于mikanani与qbittorrent打造追番自动下载系统","published":1,"updated":"2022-06-26T08:22:14.275Z","_id":"cl4v1kppf00004jwrb4zc6kg8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>受限于国内新番流媒体体验又回到正版没得看或者没法看的情况，盗版流媒体又始终受限于广告和不稳定的站点&#x2F;片源，最终又逐渐走回了过去的老路，回到下载时代。<br>下载的好处是显而易见的：你最后收获的是一个本地片源，不用担心遭遇不测。下载完成后播放体验仅取决于播放设备，不会遇到网络问题。相对的，也会遇到中字依赖字幕组或巴哈姆特、存在时效性不足之类的问题，字幕问题前者用爱发电非长久之计，会遇到更新时间不甚稳定的状况，后者则原生服务港台用户，体验会与本地有差异。时效性问题则来源于必须等待源完全上传，用户完整下载，会比直接流媒体的方式获取更晚一些（偷跑不算）。<br>但对大多数社畜或者普通用户来说，一两天的时效性并不严重，更希望获得一个想看的时候能随时打开观看的体验，故而引入本文介绍的下载体系：mikanani与qbittorrent。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><h2 id=\"mikanani-蜜柑计划\"><a href=\"#mikanani-蜜柑计划\" class=\"headerlink\" title=\"mikanani(蜜柑计划)\"></a>mikanani(蜜柑计划)</h2><p>蜜柑计划是提供各大字幕组&#x2F;发布组资源的整合平台与下载站，通常而言各大字幕组&#x2F;发布组上传资源后蜜柑也会同步有资源。并且蜜柑计划提供了RSS服务，本文后续也将使用RSS系统来帮助我们自动下载。<br><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626154115.png\" alt=\"蜜柑官网\"></p>\n<h2 id=\"qbittorrent\"><a href=\"#qbittorrent\" class=\"headerlink\" title=\"qbittorrent\"></a>qbittorrent</h2><p>qbittorrent是一个开源的bt下载器，我们利用他提供的rss下载功能定期访问rss，获取更新的新番列表。<br><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626155147.png\"></p>\n<h1 id=\"让我们开始吧\"><a href=\"#让我们开始吧\" class=\"headerlink\" title=\"让我们开始吧\"></a>让我们开始吧</h1><h2 id=\"mikanani侧设置\"><a href=\"#mikanani侧设置\" class=\"headerlink\" title=\"mikanani侧设置\"></a>mikanani侧设置</h2><p>为了使用mikanani提供的rss服务，首先要在蜜柑进行账号的注册和登陆。<br>登陆后，我们选择一部番剧（这里以cue！为例）<br><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626155720.png\"><br>可以看到，点开后有蓝色框与橙色框两种订阅模式。<br>1.选择蓝色框订阅，会选择订阅本番剧所有字幕组&#x2F;发布组，资源量较大，一般不使用。<br>2.橙色框订阅则是其中选择某一个字幕组订阅，资源量相对合理，可以选择特定喜欢的字幕组。通常而言，巴哈姆特的raw因为不需要额外翻译流程，时效最高；而各大字幕组普遍用爱发电，专业性较好，自由选择。<br>之后我们回到首页，或订阅选项下，可以看到RSS订阅选项。<br><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626160337.png\"><br>选择右键，复制链接地址（或者点击跳转，复制新开网页的地址）。<br>至此，我们蜜柑侧的配置就完成了，未来我们订阅的新番，就会自动将下载链接推送至这个RSS。</p>\n<h2 id=\"qbittorrent侧设置\"><a href=\"#qbittorrent侧设置\" class=\"headerlink\" title=\"qbittorrent侧设置\"></a>qbittorrent侧设置</h2><p>qbittorrent是bt下载器，同时可以通过自带的附加功能读取rss文件。<br>首先我们要打开qbt的rss功能<br><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626160650.png\"><br>将该列中的启用RSS订阅与RSS自动下载功能。<br>更新间隔时间代表访问RSS的周期。<br>文章数目最大值不宜设置的太小。<br>自动下载内可以设置一些过滤器，帮助更好的筛选剧集。<br><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626160835.png\"><br>那之后我们点击RSS标签页，添加url，输入我们在蜜柑最后一步获取的rss链接，就大功告成！  </p>\n<h1 id=\"杂谈\"><a href=\"#杂谈\" class=\"headerlink\" title=\"杂谈\"></a>杂谈</h1><h2 id=\"关于不同番剧类型的使用\"><a href=\"#关于不同番剧类型的使用\" class=\"headerlink\" title=\"关于不同番剧类型的使用\"></a>关于不同番剧类型的使用</h2><p>对于完结番剧，一般直接可以获得完整种子，想看什么就丢到qbt里下就行。<br>对于尚未播出的新番，提前使用本文配置就可以全自动的下载每一集，也非常方便。<br>但对于季中突然想看的番剧，该方案仍需手动下载前几话，后续更新可以自动推送，仍有一些不方便。</p>\n<h2 id=\"管理与播放\"><a href=\"#管理与播放\" class=\"headerlink\" title=\"管理与播放\"></a>管理与播放</h2><p>笔者目前没有特意的去做片源的管理，直接选择特定剧集播放对阅片量不大的情况下并不复杂。<br>如果有需要的话可以使用诸如infuse&#x2F;Plex的内容管理器来管理，可以提供更好的体验。  </p>\n<h2 id=\"一些别的工具\"><a href=\"#一些别的工具\" class=\"headerlink\" title=\"一些别的工具\"></a>一些别的工具</h2><p>事实上有成套的项目Auto_Bangumi(<a href=\"https://github.com/EstrellaXD/Auto_Bangumi),%E5%90%8C%E6%A0%B7%E6%98%AF%E5%9F%BA%E4%BA%8Eqbt%E4%B8%8Emikanani%EF%BC%8C%E7%BB%8F%E8%BF%87%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E8%A6%81%E6%98%93%E7%94%A8%E5%BE%88%E5%A4%9A%EF%BC%8C%E5%90%8C%E6%97%B6%E8%A7%A3%E5%86%B3%E4%BA%86%E5%AD%A3%E4%B8%AD%E4%B8%8B%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%82%E4%BD%86%E6%9C%AC%E8%BA%AB%E8%AE%BE%E8%AE%A1%E5%81%8F%E5%90%91%E7%BB%99NAS%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A8%EF%BC%8C%E9%9C%80%E8%A6%81%E5%AF%B9docker%E6%88%96linux%E7%8E%AF%E5%A2%83%E6%9C%89%E4%B8%80%E5%AE%9A%E7%9A%84%E4%BA%86%E8%A7%A3%E3%80%82\">https://github.com/EstrellaXD/Auto_Bangumi),同样是基于qbt与mikanani，经过二次开发要易用很多，同时解决了季中下载的问题。但本身设计偏向给NAS用户使用，需要对docker或linux环境有一定的了解。</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>受限于国内新番流媒体体验又回到正版没得看或者没法看的情况，盗版流媒体又始终受限于广告和不稳定的站点&#x2F;片源，最终又逐渐走回了过去的老路，回到下载时代。<br>下载的好处是显而易见的：你最后收获的是一个本地片源，不用担心遭遇不测。下载完成后播放体验仅取决于播放设备，不会遇到网络问题。相对的，也会遇到中字依赖字幕组或巴哈姆特、存在时效性不足之类的问题，字幕问题前者用爱发电非长久之计，会遇到更新时间不甚稳定的状况，后者则原生服务港台用户，体验会与本地有差异。时效性问题则来源于必须等待源完全上传，用户完整下载，会比直接流媒体的方式获取更晚一些（偷跑不算）。<br>但对大多数社畜或者普通用户来说，一两天的时效性并不严重，更希望获得一个想看的时候能随时打开观看的体验，故而引入本文介绍的下载体系：mikanani与qbittorrent。</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><h2 id=\"mikanani-蜜柑计划\"><a href=\"#mikanani-蜜柑计划\" class=\"headerlink\" title=\"mikanani(蜜柑计划)\"></a>mikanani(蜜柑计划)</h2><p>蜜柑计划是提供各大字幕组&#x2F;发布组资源的整合平台与下载站，通常而言各大字幕组&#x2F;发布组上传资源后蜜柑也会同步有资源。并且蜜柑计划提供了RSS服务，本文后续也将使用RSS系统来帮助我们自动下载。<br><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626154115.png\" alt=\"蜜柑官网\"></p>\n<h2 id=\"qbittorrent\"><a href=\"#qbittorrent\" class=\"headerlink\" title=\"qbittorrent\"></a>qbittorrent</h2><p>qbittorrent是一个开源的bt下载器，我们利用他提供的rss下载功能定期访问rss，获取更新的新番列表。<br><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626155147.png\"></p>\n<h1 id=\"让我们开始吧\"><a href=\"#让我们开始吧\" class=\"headerlink\" title=\"让我们开始吧\"></a>让我们开始吧</h1><h2 id=\"mikanani侧设置\"><a href=\"#mikanani侧设置\" class=\"headerlink\" title=\"mikanani侧设置\"></a>mikanani侧设置</h2><p>为了使用mikanani提供的rss服务，首先要在蜜柑进行账号的注册和登陆。<br>登陆后，我们选择一部番剧（这里以cue！为例）<br><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626155720.png\"><br>可以看到，点开后有蓝色框与橙色框两种订阅模式。<br>1.选择蓝色框订阅，会选择订阅本番剧所有字幕组&#x2F;发布组，资源量较大，一般不使用。<br>2.橙色框订阅则是其中选择某一个字幕组订阅，资源量相对合理，可以选择特定喜欢的字幕组。通常而言，巴哈姆特的raw因为不需要额外翻译流程，时效最高；而各大字幕组普遍用爱发电，专业性较好，自由选择。<br>之后我们回到首页，或订阅选项下，可以看到RSS订阅选项。<br><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626160337.png\"><br>选择右键，复制链接地址（或者点击跳转，复制新开网页的地址）。<br>至此，我们蜜柑侧的配置就完成了，未来我们订阅的新番，就会自动将下载链接推送至这个RSS。</p>\n<h2 id=\"qbittorrent侧设置\"><a href=\"#qbittorrent侧设置\" class=\"headerlink\" title=\"qbittorrent侧设置\"></a>qbittorrent侧设置</h2><p>qbittorrent是bt下载器，同时可以通过自带的附加功能读取rss文件。<br>首先我们要打开qbt的rss功能<br><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626160650.png\"><br>将该列中的启用RSS订阅与RSS自动下载功能。<br>更新间隔时间代表访问RSS的周期。<br>文章数目最大值不宜设置的太小。<br>自动下载内可以设置一些过滤器，帮助更好的筛选剧集。<br><img src=\"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/20220626160835.png\"><br>那之后我们点击RSS标签页，添加url，输入我们在蜜柑最后一步获取的rss链接，就大功告成！  </p>\n<h1 id=\"杂谈\"><a href=\"#杂谈\" class=\"headerlink\" title=\"杂谈\"></a>杂谈</h1><h2 id=\"关于不同番剧类型的使用\"><a href=\"#关于不同番剧类型的使用\" class=\"headerlink\" title=\"关于不同番剧类型的使用\"></a>关于不同番剧类型的使用</h2><p>对于完结番剧，一般直接可以获得完整种子，想看什么就丢到qbt里下就行。<br>对于尚未播出的新番，提前使用本文配置就可以全自动的下载每一集，也非常方便。<br>但对于季中突然想看的番剧，该方案仍需手动下载前几话，后续更新可以自动推送，仍有一些不方便。</p>\n<h2 id=\"管理与播放\"><a href=\"#管理与播放\" class=\"headerlink\" title=\"管理与播放\"></a>管理与播放</h2><p>笔者目前没有特意的去做片源的管理，直接选择特定剧集播放对阅片量不大的情况下并不复杂。<br>如果有需要的话可以使用诸如infuse&#x2F;Plex的内容管理器来管理，可以提供更好的体验。  </p>\n<h2 id=\"一些别的工具\"><a href=\"#一些别的工具\" class=\"headerlink\" title=\"一些别的工具\"></a>一些别的工具</h2><p>事实上有成套的项目Auto_Bangumi(<a href=\"https://github.com/EstrellaXD/Auto_Bangumi),%E5%90%8C%E6%A0%B7%E6%98%AF%E5%9F%BA%E4%BA%8Eqbt%E4%B8%8Emikanani%EF%BC%8C%E7%BB%8F%E8%BF%87%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%E8%A6%81%E6%98%93%E7%94%A8%E5%BE%88%E5%A4%9A%EF%BC%8C%E5%90%8C%E6%97%B6%E8%A7%A3%E5%86%B3%E4%BA%86%E5%AD%A3%E4%B8%AD%E4%B8%8B%E8%BD%BD%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%82%E4%BD%86%E6%9C%AC%E8%BA%AB%E8%AE%BE%E8%AE%A1%E5%81%8F%E5%90%91%E7%BB%99NAS%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A8%EF%BC%8C%E9%9C%80%E8%A6%81%E5%AF%B9docker%E6%88%96linux%E7%8E%AF%E5%A2%83%E6%9C%89%E4%B8%80%E5%AE%9A%E7%9A%84%E4%BA%86%E8%A7%A3%E3%80%82\">https://github.com/EstrellaXD/Auto_Bangumi),同样是基于qbt与mikanani，经过二次开发要易用很多，同时解决了季中下载的问题。但本身设计偏向给NAS用户使用，需要对docker或linux环境有一定的了解。</a></p>\n"},{"title":"How to init a new PC(About APP)","date":"2022-07-28T14:32:35.000Z","cover":"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/FXtY22ZakAEC_hx.jpg/720","_content":"# 大概是前言\n最近电脑状况不是很稳定，正好博文有些不知道写什么，整理一下自己从空白电脑到可以日用的电脑需要配置的软件，一来是方便哪天电脑暴毙了能快速恢复状态，二来是给也相当于给大家推荐一点自己的应用。  \n也不一定会有一个很靠谱的顺序，大概就是我假想现在有一台刚刚装完系统的空白主机我会一路进行的操作，大概会表现的重要性依次递减吧。  \n# 这里大概需要一个标题\n## 驱动与Geforce Experience\n一般而言这个年代驱动不需要我们操心了，有需要的话去对应硬件家去下载就完事了。需要持续更新的驱动基本只有显卡驱动，在这个阶段基本就会装上GeForce Experience来管理后续更新，其他的都是一次性产品必要的时候再check就好。\n## 图吧工具箱\n一个装机工具箱，毕竟全新主机的话还是要check眼硬件和各种可靠性，基本过一遍硬件参数没问题，双烤能通过就差不多了。还有一点便捷工具。不过过了装机阶段就不太会打开了。\n# 正式开始\n搞完了比较基础的东西就该安装软件了！在每一个title前添加了一下软件作用来方便读者判断是否感兴趣。\n## 浏览器-Chrome\n虽然现版本的edge已经非常好用了，但暂时还是使用Chrome作为主浏览器，登录账号就可以同步插件和信息（虽然换句话说就是我被捆绑了）但作为非网盘和bt下最好的下载器，还是不得不装，并依托Chrome进行后续下载。\n## 网络管理-Clash for Window\n不得不说，自从把客户端转成Clash之后整体体验好了许多，个人会习惯开启tun模式需要额外配置一下，然后rule也需要迁移，但设置好之后流畅的自动切换和系统级流量接管确实很好用。有了访问外网权限也方便我们下各种东西。\n## 虚拟声卡-VoiceMeet Banana\n出于直播考虑会配置的文件，也做整体的声音监控和管理。一般来是Banana版本就足够使用了。虽然我pay了Potato的激活码但感觉电脑性能跟不上最后还是换回了Banana，令人感叹。\n## 通讯软件-QQ\n主要的社交媒介，就是很大。\n## 推流录制-obs studio\n大概不需要太多介绍，无论录制还是直播都非常好使的开源软件。一般来说只要不是太小白都比较推荐用obs，也方便后续换平台。\n## BT下载-qBittorrent\n个人觉得目前最好的bt下载工具，应对磁力种子和RSS订阅都不在话下。\n## 压缩解压-7-Zip\n尽管7-Zip被Win11史诗级削弱，但怎么想都是win的问题。虽然win可以处理zip大多数时候也足够了但总有小可爱打rar或者7z，还是需要一个处理。7-Zip足够轻量也足够好。\n## 区域管理-Locale Emulator\n虽然很久没有用过了但电脑里没有也会很微妙的app。可以一定程度处理软件的乱码问题（尤其是日本……）本质还是服务galgame吧。\n## 视频播放-MPC-HC\n主要是自带的播放器解码实在是羸弱不堪，还是需要一个第三方播放器的，虽然ui老旧，但性能不错。\n## 音频播放-Farboo2000\n基本使用farbox版本，不太需要配置，也主要是对高解析音频的一个支持，虽然我其实听不出来，但下载了音频听很酷（并没有）\n## 视频编辑-Davinci\n实际上做视频的情况不多，但涉及色彩的会尽量用达芬奇。\n## 创意作品-Adobe\nAdobe核心在用的话就LR、PS、PR、AE和编码器，大概也是我可以不用但不能没有。\n## 图床管理-PicGo\n主要是给博客写作用的，很方便能把图片上传到各种oss或者仓库。\n\n# 游戏\n软件装完了就该打游戏了！罗列部分即便不玩也会装的，剩下就要啥弄啥。\n## FFXIV\nFFXIV作为必装软件，也没什么问题。\n### FFXIV本体*2\n国服国际服各一份。\n### ACT*2\n国服使用咖啡国际服使用呆萌整合，很懒。\n### FFXIVQuickLauncher*2\n国服也有第三方启动器了，到底是要比官方的方便一点。(有潜在安全风险，慎重选择)\n### FFXIVTEXTOOL*2\n主要是打一个界面mod。\n### CMTOOL\n拍照用，新的那个还没有尝试过这样说。\n### GShade\n画面滤镜。\n## Xbox\nXGP很好使，所以Xbox很必要。现在文件管理也方便了，基本没什么大缺点。\n## Steam\n核心游戏购买平台，虽然数字版游戏有这样那样的问题，但买起来很方便和玩起来很方便还是足够留住玩家。\n## Steam++\nSteam体验优化的app，一个是令牌不用掏手机了，另一个是多账号管理比较方便。\n## Epic\n虽然我经常不领，但还是会下一个epic，一方面是有独占，另一方面是ue（虽然没怎么努力过）。\n\n# 代码\n## Visual Studio Code\n我宣布VSC是最好的轻度ide，谁赞成谁反对（不是）\n## Python\n自用的电脑就干脆直接装python了，反正使用很轻度不弄环境应该也没事。或者就无敌的anaconda。\n## Node.js\n依赖。\n## Visual Studio\n装着，但很少用。\n## C++\n在VSC下运行要装有的没的，实话说一直没弄。\n\n# 不太重要但也会用的app\n## 翻译-DeepL\n## 流媒体音乐-网易云\n","source":"_posts/How-to-init-a-new-PC-About-APP.md","raw":"---\ntitle: How to init a new PC(About APP)\ndate: 2022-07-28 22:32:35\ntags:\ncover: https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/FXtY22ZakAEC_hx.jpg/720\n---\n# 大概是前言\n最近电脑状况不是很稳定，正好博文有些不知道写什么，整理一下自己从空白电脑到可以日用的电脑需要配置的软件，一来是方便哪天电脑暴毙了能快速恢复状态，二来是给也相当于给大家推荐一点自己的应用。  \n也不一定会有一个很靠谱的顺序，大概就是我假想现在有一台刚刚装完系统的空白主机我会一路进行的操作，大概会表现的重要性依次递减吧。  \n# 这里大概需要一个标题\n## 驱动与Geforce Experience\n一般而言这个年代驱动不需要我们操心了，有需要的话去对应硬件家去下载就完事了。需要持续更新的驱动基本只有显卡驱动，在这个阶段基本就会装上GeForce Experience来管理后续更新，其他的都是一次性产品必要的时候再check就好。\n## 图吧工具箱\n一个装机工具箱，毕竟全新主机的话还是要check眼硬件和各种可靠性，基本过一遍硬件参数没问题，双烤能通过就差不多了。还有一点便捷工具。不过过了装机阶段就不太会打开了。\n# 正式开始\n搞完了比较基础的东西就该安装软件了！在每一个title前添加了一下软件作用来方便读者判断是否感兴趣。\n## 浏览器-Chrome\n虽然现版本的edge已经非常好用了，但暂时还是使用Chrome作为主浏览器，登录账号就可以同步插件和信息（虽然换句话说就是我被捆绑了）但作为非网盘和bt下最好的下载器，还是不得不装，并依托Chrome进行后续下载。\n## 网络管理-Clash for Window\n不得不说，自从把客户端转成Clash之后整体体验好了许多，个人会习惯开启tun模式需要额外配置一下，然后rule也需要迁移，但设置好之后流畅的自动切换和系统级流量接管确实很好用。有了访问外网权限也方便我们下各种东西。\n## 虚拟声卡-VoiceMeet Banana\n出于直播考虑会配置的文件，也做整体的声音监控和管理。一般来是Banana版本就足够使用了。虽然我pay了Potato的激活码但感觉电脑性能跟不上最后还是换回了Banana，令人感叹。\n## 通讯软件-QQ\n主要的社交媒介，就是很大。\n## 推流录制-obs studio\n大概不需要太多介绍，无论录制还是直播都非常好使的开源软件。一般来说只要不是太小白都比较推荐用obs，也方便后续换平台。\n## BT下载-qBittorrent\n个人觉得目前最好的bt下载工具，应对磁力种子和RSS订阅都不在话下。\n## 压缩解压-7-Zip\n尽管7-Zip被Win11史诗级削弱，但怎么想都是win的问题。虽然win可以处理zip大多数时候也足够了但总有小可爱打rar或者7z，还是需要一个处理。7-Zip足够轻量也足够好。\n## 区域管理-Locale Emulator\n虽然很久没有用过了但电脑里没有也会很微妙的app。可以一定程度处理软件的乱码问题（尤其是日本……）本质还是服务galgame吧。\n## 视频播放-MPC-HC\n主要是自带的播放器解码实在是羸弱不堪，还是需要一个第三方播放器的，虽然ui老旧，但性能不错。\n## 音频播放-Farboo2000\n基本使用farbox版本，不太需要配置，也主要是对高解析音频的一个支持，虽然我其实听不出来，但下载了音频听很酷（并没有）\n## 视频编辑-Davinci\n实际上做视频的情况不多，但涉及色彩的会尽量用达芬奇。\n## 创意作品-Adobe\nAdobe核心在用的话就LR、PS、PR、AE和编码器，大概也是我可以不用但不能没有。\n## 图床管理-PicGo\n主要是给博客写作用的，很方便能把图片上传到各种oss或者仓库。\n\n# 游戏\n软件装完了就该打游戏了！罗列部分即便不玩也会装的，剩下就要啥弄啥。\n## FFXIV\nFFXIV作为必装软件，也没什么问题。\n### FFXIV本体*2\n国服国际服各一份。\n### ACT*2\n国服使用咖啡国际服使用呆萌整合，很懒。\n### FFXIVQuickLauncher*2\n国服也有第三方启动器了，到底是要比官方的方便一点。(有潜在安全风险，慎重选择)\n### FFXIVTEXTOOL*2\n主要是打一个界面mod。\n### CMTOOL\n拍照用，新的那个还没有尝试过这样说。\n### GShade\n画面滤镜。\n## Xbox\nXGP很好使，所以Xbox很必要。现在文件管理也方便了，基本没什么大缺点。\n## Steam\n核心游戏购买平台，虽然数字版游戏有这样那样的问题，但买起来很方便和玩起来很方便还是足够留住玩家。\n## Steam++\nSteam体验优化的app，一个是令牌不用掏手机了，另一个是多账号管理比较方便。\n## Epic\n虽然我经常不领，但还是会下一个epic，一方面是有独占，另一方面是ue（虽然没怎么努力过）。\n\n# 代码\n## Visual Studio Code\n我宣布VSC是最好的轻度ide，谁赞成谁反对（不是）\n## Python\n自用的电脑就干脆直接装python了，反正使用很轻度不弄环境应该也没事。或者就无敌的anaconda。\n## Node.js\n依赖。\n## Visual Studio\n装着，但很少用。\n## C++\n在VSC下运行要装有的没的，实话说一直没弄。\n\n# 不太重要但也会用的app\n## 翻译-DeepL\n## 流媒体音乐-网易云\n","slug":"How-to-init-a-new-PC-About-APP","published":1,"updated":"2022-07-29T15:06:27.515Z","_id":"cl655fgtb0000qlwr5y7c9k3a","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"大概是前言\"><a href=\"#大概是前言\" class=\"headerlink\" title=\"大概是前言\"></a>大概是前言</h1><p>最近电脑状况不是很稳定，正好博文有些不知道写什么，整理一下自己从空白电脑到可以日用的电脑需要配置的软件，一来是方便哪天电脑暴毙了能快速恢复状态，二来是给也相当于给大家推荐一点自己的应用。<br>也不一定会有一个很靠谱的顺序，大概就是我假想现在有一台刚刚装完系统的空白主机我会一路进行的操作，大概会表现的重要性依次递减吧。  </p>\n<h1 id=\"这里大概需要一个标题\"><a href=\"#这里大概需要一个标题\" class=\"headerlink\" title=\"这里大概需要一个标题\"></a>这里大概需要一个标题</h1><h2 id=\"驱动与Geforce-Experience\"><a href=\"#驱动与Geforce-Experience\" class=\"headerlink\" title=\"驱动与Geforce Experience\"></a>驱动与Geforce Experience</h2><p>一般而言这个年代驱动不需要我们操心了，有需要的话去对应硬件家去下载就完事了。需要持续更新的驱动基本只有显卡驱动，在这个阶段基本就会装上GeForce Experience来管理后续更新，其他的都是一次性产品必要的时候再check就好。</p>\n<h2 id=\"图吧工具箱\"><a href=\"#图吧工具箱\" class=\"headerlink\" title=\"图吧工具箱\"></a>图吧工具箱</h2><p>一个装机工具箱，毕竟全新主机的话还是要check眼硬件和各种可靠性，基本过一遍硬件参数没问题，双烤能通过就差不多了。还有一点便捷工具。不过过了装机阶段就不太会打开了。</p>\n<h1 id=\"正式开始\"><a href=\"#正式开始\" class=\"headerlink\" title=\"正式开始\"></a>正式开始</h1><p>搞完了比较基础的东西就该安装软件了！在每一个title前添加了一下软件作用来方便读者判断是否感兴趣。</p>\n<h2 id=\"浏览器-Chrome\"><a href=\"#浏览器-Chrome\" class=\"headerlink\" title=\"浏览器-Chrome\"></a>浏览器-Chrome</h2><p>虽然现版本的edge已经非常好用了，但暂时还是使用Chrome作为主浏览器，登录账号就可以同步插件和信息（虽然换句话说就是我被捆绑了）但作为非网盘和bt下最好的下载器，还是不得不装，并依托Chrome进行后续下载。</p>\n<h2 id=\"网络管理-Clash-for-Window\"><a href=\"#网络管理-Clash-for-Window\" class=\"headerlink\" title=\"网络管理-Clash for Window\"></a>网络管理-Clash for Window</h2><p>不得不说，自从把客户端转成Clash之后整体体验好了许多，个人会习惯开启tun模式需要额外配置一下，然后rule也需要迁移，但设置好之后流畅的自动切换和系统级流量接管确实很好用。有了访问外网权限也方便我们下各种东西。</p>\n<h2 id=\"虚拟声卡-VoiceMeet-Banana\"><a href=\"#虚拟声卡-VoiceMeet-Banana\" class=\"headerlink\" title=\"虚拟声卡-VoiceMeet Banana\"></a>虚拟声卡-VoiceMeet Banana</h2><p>出于直播考虑会配置的文件，也做整体的声音监控和管理。一般来是Banana版本就足够使用了。虽然我pay了Potato的激活码但感觉电脑性能跟不上最后还是换回了Banana，令人感叹。</p>\n<h2 id=\"通讯软件-QQ\"><a href=\"#通讯软件-QQ\" class=\"headerlink\" title=\"通讯软件-QQ\"></a>通讯软件-QQ</h2><p>主要的社交媒介，就是很大。</p>\n<h2 id=\"推流录制-obs-studio\"><a href=\"#推流录制-obs-studio\" class=\"headerlink\" title=\"推流录制-obs studio\"></a>推流录制-obs studio</h2><p>大概不需要太多介绍，无论录制还是直播都非常好使的开源软件。一般来说只要不是太小白都比较推荐用obs，也方便后续换平台。</p>\n<h2 id=\"BT下载-qBittorrent\"><a href=\"#BT下载-qBittorrent\" class=\"headerlink\" title=\"BT下载-qBittorrent\"></a>BT下载-qBittorrent</h2><p>个人觉得目前最好的bt下载工具，应对磁力种子和RSS订阅都不在话下。</p>\n<h2 id=\"压缩解压-7-Zip\"><a href=\"#压缩解压-7-Zip\" class=\"headerlink\" title=\"压缩解压-7-Zip\"></a>压缩解压-7-Zip</h2><p>尽管7-Zip被Win11史诗级削弱，但怎么想都是win的问题。虽然win可以处理zip大多数时候也足够了但总有小可爱打rar或者7z，还是需要一个处理。7-Zip足够轻量也足够好。</p>\n<h2 id=\"区域管理-Locale-Emulator\"><a href=\"#区域管理-Locale-Emulator\" class=\"headerlink\" title=\"区域管理-Locale Emulator\"></a>区域管理-Locale Emulator</h2><p>虽然很久没有用过了但电脑里没有也会很微妙的app。可以一定程度处理软件的乱码问题（尤其是日本……）本质还是服务galgame吧。</p>\n<h2 id=\"视频播放-MPC-HC\"><a href=\"#视频播放-MPC-HC\" class=\"headerlink\" title=\"视频播放-MPC-HC\"></a>视频播放-MPC-HC</h2><p>主要是自带的播放器解码实在是羸弱不堪，还是需要一个第三方播放器的，虽然ui老旧，但性能不错。</p>\n<h2 id=\"音频播放-Farboo2000\"><a href=\"#音频播放-Farboo2000\" class=\"headerlink\" title=\"音频播放-Farboo2000\"></a>音频播放-Farboo2000</h2><p>基本使用farbox版本，不太需要配置，也主要是对高解析音频的一个支持，虽然我其实听不出来，但下载了音频听很酷（并没有）</p>\n<h2 id=\"视频编辑-Davinci\"><a href=\"#视频编辑-Davinci\" class=\"headerlink\" title=\"视频编辑-Davinci\"></a>视频编辑-Davinci</h2><p>实际上做视频的情况不多，但涉及色彩的会尽量用达芬奇。</p>\n<h2 id=\"创意作品-Adobe\"><a href=\"#创意作品-Adobe\" class=\"headerlink\" title=\"创意作品-Adobe\"></a>创意作品-Adobe</h2><p>Adobe核心在用的话就LR、PS、PR、AE和编码器，大概也是我可以不用但不能没有。</p>\n<h2 id=\"图床管理-PicGo\"><a href=\"#图床管理-PicGo\" class=\"headerlink\" title=\"图床管理-PicGo\"></a>图床管理-PicGo</h2><p>主要是给博客写作用的，很方便能把图片上传到各种oss或者仓库。</p>\n<h1 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h1><p>软件装完了就该打游戏了！罗列部分即便不玩也会装的，剩下就要啥弄啥。</p>\n<h2 id=\"FFXIV\"><a href=\"#FFXIV\" class=\"headerlink\" title=\"FFXIV\"></a>FFXIV</h2><p>FFXIV作为必装软件，也没什么问题。</p>\n<h3 id=\"FFXIV本体-2\"><a href=\"#FFXIV本体-2\" class=\"headerlink\" title=\"FFXIV本体*2\"></a>FFXIV本体*2</h3><p>国服国际服各一份。</p>\n<h3 id=\"ACT-2\"><a href=\"#ACT-2\" class=\"headerlink\" title=\"ACT*2\"></a>ACT*2</h3><p>国服使用咖啡国际服使用呆萌整合，很懒。</p>\n<h3 id=\"FFXIVQuickLauncher-2\"><a href=\"#FFXIVQuickLauncher-2\" class=\"headerlink\" title=\"FFXIVQuickLauncher*2\"></a>FFXIVQuickLauncher*2</h3><p>国服也有第三方启动器了，到底是要比官方的方便一点。(有潜在安全风险，慎重选择)</p>\n<h3 id=\"FFXIVTEXTOOL-2\"><a href=\"#FFXIVTEXTOOL-2\" class=\"headerlink\" title=\"FFXIVTEXTOOL*2\"></a>FFXIVTEXTOOL*2</h3><p>主要是打一个界面mod。</p>\n<h3 id=\"CMTOOL\"><a href=\"#CMTOOL\" class=\"headerlink\" title=\"CMTOOL\"></a>CMTOOL</h3><p>拍照用，新的那个还没有尝试过这样说。</p>\n<h3 id=\"GShade\"><a href=\"#GShade\" class=\"headerlink\" title=\"GShade\"></a>GShade</h3><p>画面滤镜。</p>\n<h2 id=\"Xbox\"><a href=\"#Xbox\" class=\"headerlink\" title=\"Xbox\"></a>Xbox</h2><p>XGP很好使，所以Xbox很必要。现在文件管理也方便了，基本没什么大缺点。</p>\n<h2 id=\"Steam\"><a href=\"#Steam\" class=\"headerlink\" title=\"Steam\"></a>Steam</h2><p>核心游戏购买平台，虽然数字版游戏有这样那样的问题，但买起来很方便和玩起来很方便还是足够留住玩家。</p>\n<h2 id=\"Steam-1\"><a href=\"#Steam-1\" class=\"headerlink\" title=\"Steam++\"></a>Steam++</h2><p>Steam体验优化的app，一个是令牌不用掏手机了，另一个是多账号管理比较方便。</p>\n<h2 id=\"Epic\"><a href=\"#Epic\" class=\"headerlink\" title=\"Epic\"></a>Epic</h2><p>虽然我经常不领，但还是会下一个epic，一方面是有独占，另一方面是ue（虽然没怎么努力过）。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><h2 id=\"Visual-Studio-Code\"><a href=\"#Visual-Studio-Code\" class=\"headerlink\" title=\"Visual Studio Code\"></a>Visual Studio Code</h2><p>我宣布VSC是最好的轻度ide，谁赞成谁反对（不是）</p>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><p>自用的电脑就干脆直接装python了，反正使用很轻度不弄环境应该也没事。或者就无敌的anaconda。</p>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><p>依赖。</p>\n<h2 id=\"Visual-Studio\"><a href=\"#Visual-Studio\" class=\"headerlink\" title=\"Visual Studio\"></a>Visual Studio</h2><p>装着，但很少用。</p>\n<h2 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h2><p>在VSC下运行要装有的没的，实话说一直没弄。</p>\n<h1 id=\"不太重要但也会用的app\"><a href=\"#不太重要但也会用的app\" class=\"headerlink\" title=\"不太重要但也会用的app\"></a>不太重要但也会用的app</h1><h2 id=\"翻译-DeepL\"><a href=\"#翻译-DeepL\" class=\"headerlink\" title=\"翻译-DeepL\"></a>翻译-DeepL</h2><h2 id=\"流媒体音乐-网易云\"><a href=\"#流媒体音乐-网易云\" class=\"headerlink\" title=\"流媒体音乐-网易云\"></a>流媒体音乐-网易云</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"大概是前言\"><a href=\"#大概是前言\" class=\"headerlink\" title=\"大概是前言\"></a>大概是前言</h1><p>最近电脑状况不是很稳定，正好博文有些不知道写什么，整理一下自己从空白电脑到可以日用的电脑需要配置的软件，一来是方便哪天电脑暴毙了能快速恢复状态，二来是给也相当于给大家推荐一点自己的应用。<br>也不一定会有一个很靠谱的顺序，大概就是我假想现在有一台刚刚装完系统的空白主机我会一路进行的操作，大概会表现的重要性依次递减吧。  </p>\n<h1 id=\"这里大概需要一个标题\"><a href=\"#这里大概需要一个标题\" class=\"headerlink\" title=\"这里大概需要一个标题\"></a>这里大概需要一个标题</h1><h2 id=\"驱动与Geforce-Experience\"><a href=\"#驱动与Geforce-Experience\" class=\"headerlink\" title=\"驱动与Geforce Experience\"></a>驱动与Geforce Experience</h2><p>一般而言这个年代驱动不需要我们操心了，有需要的话去对应硬件家去下载就完事了。需要持续更新的驱动基本只有显卡驱动，在这个阶段基本就会装上GeForce Experience来管理后续更新，其他的都是一次性产品必要的时候再check就好。</p>\n<h2 id=\"图吧工具箱\"><a href=\"#图吧工具箱\" class=\"headerlink\" title=\"图吧工具箱\"></a>图吧工具箱</h2><p>一个装机工具箱，毕竟全新主机的话还是要check眼硬件和各种可靠性，基本过一遍硬件参数没问题，双烤能通过就差不多了。还有一点便捷工具。不过过了装机阶段就不太会打开了。</p>\n<h1 id=\"正式开始\"><a href=\"#正式开始\" class=\"headerlink\" title=\"正式开始\"></a>正式开始</h1><p>搞完了比较基础的东西就该安装软件了！在每一个title前添加了一下软件作用来方便读者判断是否感兴趣。</p>\n<h2 id=\"浏览器-Chrome\"><a href=\"#浏览器-Chrome\" class=\"headerlink\" title=\"浏览器-Chrome\"></a>浏览器-Chrome</h2><p>虽然现版本的edge已经非常好用了，但暂时还是使用Chrome作为主浏览器，登录账号就可以同步插件和信息（虽然换句话说就是我被捆绑了）但作为非网盘和bt下最好的下载器，还是不得不装，并依托Chrome进行后续下载。</p>\n<h2 id=\"网络管理-Clash-for-Window\"><a href=\"#网络管理-Clash-for-Window\" class=\"headerlink\" title=\"网络管理-Clash for Window\"></a>网络管理-Clash for Window</h2><p>不得不说，自从把客户端转成Clash之后整体体验好了许多，个人会习惯开启tun模式需要额外配置一下，然后rule也需要迁移，但设置好之后流畅的自动切换和系统级流量接管确实很好用。有了访问外网权限也方便我们下各种东西。</p>\n<h2 id=\"虚拟声卡-VoiceMeet-Banana\"><a href=\"#虚拟声卡-VoiceMeet-Banana\" class=\"headerlink\" title=\"虚拟声卡-VoiceMeet Banana\"></a>虚拟声卡-VoiceMeet Banana</h2><p>出于直播考虑会配置的文件，也做整体的声音监控和管理。一般来是Banana版本就足够使用了。虽然我pay了Potato的激活码但感觉电脑性能跟不上最后还是换回了Banana，令人感叹。</p>\n<h2 id=\"通讯软件-QQ\"><a href=\"#通讯软件-QQ\" class=\"headerlink\" title=\"通讯软件-QQ\"></a>通讯软件-QQ</h2><p>主要的社交媒介，就是很大。</p>\n<h2 id=\"推流录制-obs-studio\"><a href=\"#推流录制-obs-studio\" class=\"headerlink\" title=\"推流录制-obs studio\"></a>推流录制-obs studio</h2><p>大概不需要太多介绍，无论录制还是直播都非常好使的开源软件。一般来说只要不是太小白都比较推荐用obs，也方便后续换平台。</p>\n<h2 id=\"BT下载-qBittorrent\"><a href=\"#BT下载-qBittorrent\" class=\"headerlink\" title=\"BT下载-qBittorrent\"></a>BT下载-qBittorrent</h2><p>个人觉得目前最好的bt下载工具，应对磁力种子和RSS订阅都不在话下。</p>\n<h2 id=\"压缩解压-7-Zip\"><a href=\"#压缩解压-7-Zip\" class=\"headerlink\" title=\"压缩解压-7-Zip\"></a>压缩解压-7-Zip</h2><p>尽管7-Zip被Win11史诗级削弱，但怎么想都是win的问题。虽然win可以处理zip大多数时候也足够了但总有小可爱打rar或者7z，还是需要一个处理。7-Zip足够轻量也足够好。</p>\n<h2 id=\"区域管理-Locale-Emulator\"><a href=\"#区域管理-Locale-Emulator\" class=\"headerlink\" title=\"区域管理-Locale Emulator\"></a>区域管理-Locale Emulator</h2><p>虽然很久没有用过了但电脑里没有也会很微妙的app。可以一定程度处理软件的乱码问题（尤其是日本……）本质还是服务galgame吧。</p>\n<h2 id=\"视频播放-MPC-HC\"><a href=\"#视频播放-MPC-HC\" class=\"headerlink\" title=\"视频播放-MPC-HC\"></a>视频播放-MPC-HC</h2><p>主要是自带的播放器解码实在是羸弱不堪，还是需要一个第三方播放器的，虽然ui老旧，但性能不错。</p>\n<h2 id=\"音频播放-Farboo2000\"><a href=\"#音频播放-Farboo2000\" class=\"headerlink\" title=\"音频播放-Farboo2000\"></a>音频播放-Farboo2000</h2><p>基本使用farbox版本，不太需要配置，也主要是对高解析音频的一个支持，虽然我其实听不出来，但下载了音频听很酷（并没有）</p>\n<h2 id=\"视频编辑-Davinci\"><a href=\"#视频编辑-Davinci\" class=\"headerlink\" title=\"视频编辑-Davinci\"></a>视频编辑-Davinci</h2><p>实际上做视频的情况不多，但涉及色彩的会尽量用达芬奇。</p>\n<h2 id=\"创意作品-Adobe\"><a href=\"#创意作品-Adobe\" class=\"headerlink\" title=\"创意作品-Adobe\"></a>创意作品-Adobe</h2><p>Adobe核心在用的话就LR、PS、PR、AE和编码器，大概也是我可以不用但不能没有。</p>\n<h2 id=\"图床管理-PicGo\"><a href=\"#图床管理-PicGo\" class=\"headerlink\" title=\"图床管理-PicGo\"></a>图床管理-PicGo</h2><p>主要是给博客写作用的，很方便能把图片上传到各种oss或者仓库。</p>\n<h1 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h1><p>软件装完了就该打游戏了！罗列部分即便不玩也会装的，剩下就要啥弄啥。</p>\n<h2 id=\"FFXIV\"><a href=\"#FFXIV\" class=\"headerlink\" title=\"FFXIV\"></a>FFXIV</h2><p>FFXIV作为必装软件，也没什么问题。</p>\n<h3 id=\"FFXIV本体-2\"><a href=\"#FFXIV本体-2\" class=\"headerlink\" title=\"FFXIV本体*2\"></a>FFXIV本体*2</h3><p>国服国际服各一份。</p>\n<h3 id=\"ACT-2\"><a href=\"#ACT-2\" class=\"headerlink\" title=\"ACT*2\"></a>ACT*2</h3><p>国服使用咖啡国际服使用呆萌整合，很懒。</p>\n<h3 id=\"FFXIVQuickLauncher-2\"><a href=\"#FFXIVQuickLauncher-2\" class=\"headerlink\" title=\"FFXIVQuickLauncher*2\"></a>FFXIVQuickLauncher*2</h3><p>国服也有第三方启动器了，到底是要比官方的方便一点。(有潜在安全风险，慎重选择)</p>\n<h3 id=\"FFXIVTEXTOOL-2\"><a href=\"#FFXIVTEXTOOL-2\" class=\"headerlink\" title=\"FFXIVTEXTOOL*2\"></a>FFXIVTEXTOOL*2</h3><p>主要是打一个界面mod。</p>\n<h3 id=\"CMTOOL\"><a href=\"#CMTOOL\" class=\"headerlink\" title=\"CMTOOL\"></a>CMTOOL</h3><p>拍照用，新的那个还没有尝试过这样说。</p>\n<h3 id=\"GShade\"><a href=\"#GShade\" class=\"headerlink\" title=\"GShade\"></a>GShade</h3><p>画面滤镜。</p>\n<h2 id=\"Xbox\"><a href=\"#Xbox\" class=\"headerlink\" title=\"Xbox\"></a>Xbox</h2><p>XGP很好使，所以Xbox很必要。现在文件管理也方便了，基本没什么大缺点。</p>\n<h2 id=\"Steam\"><a href=\"#Steam\" class=\"headerlink\" title=\"Steam\"></a>Steam</h2><p>核心游戏购买平台，虽然数字版游戏有这样那样的问题，但买起来很方便和玩起来很方便还是足够留住玩家。</p>\n<h2 id=\"Steam-1\"><a href=\"#Steam-1\" class=\"headerlink\" title=\"Steam++\"></a>Steam++</h2><p>Steam体验优化的app，一个是令牌不用掏手机了，另一个是多账号管理比较方便。</p>\n<h2 id=\"Epic\"><a href=\"#Epic\" class=\"headerlink\" title=\"Epic\"></a>Epic</h2><p>虽然我经常不领，但还是会下一个epic，一方面是有独占，另一方面是ue（虽然没怎么努力过）。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><h2 id=\"Visual-Studio-Code\"><a href=\"#Visual-Studio-Code\" class=\"headerlink\" title=\"Visual Studio Code\"></a>Visual Studio Code</h2><p>我宣布VSC是最好的轻度ide，谁赞成谁反对（不是）</p>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><p>自用的电脑就干脆直接装python了，反正使用很轻度不弄环境应该也没事。或者就无敌的anaconda。</p>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><p>依赖。</p>\n<h2 id=\"Visual-Studio\"><a href=\"#Visual-Studio\" class=\"headerlink\" title=\"Visual Studio\"></a>Visual Studio</h2><p>装着，但很少用。</p>\n<h2 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h2><p>在VSC下运行要装有的没的，实话说一直没弄。</p>\n<h1 id=\"不太重要但也会用的app\"><a href=\"#不太重要但也会用的app\" class=\"headerlink\" title=\"不太重要但也会用的app\"></a>不太重要但也会用的app</h1><h2 id=\"翻译-DeepL\"><a href=\"#翻译-DeepL\" class=\"headerlink\" title=\"翻译-DeepL\"></a>翻译-DeepL</h2><h2 id=\"流媒体音乐-网易云\"><a href=\"#流媒体音乐-网易云\" class=\"headerlink\" title=\"流媒体音乐-网易云\"></a>流媒体音乐-网易云</h2>"},{"title":"胡言乱语零知识证明Page0","date":"2022-08-04T12:28:31.000Z","cover":"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/100174471_p0.jpg/1080","_content":"本文纯属胡编乱造，角色有ooc请勿代入。关于数学相关的东西也可能不够严谨，请批判阅读。\n# 引子\n我们先来看一个例子  \n>斑鸠路加和七草日花争论谁才是最了解美琴的人。  \n>七草日花宣称路加手上关于美琴的三围数据已经过时。路加对这一论述嗤之以鼻，“既然这么说，那告诉我现在的数据，不然你怎么证明呢？”  \n>日花陷入沉思，“我要证明我确实知道这件事，但我不能把美琴小姐的数据交给那个人，该该该怎么办……”  \n>“我早料到啦！”，不知道从哪里冒出来的制作人，“我给日花准备了一个特殊的证明场地！事务所有一条走廊上有两间房间，分别有一扇通往走廊的门，两个房间之间有一扇带密码锁的门，门的密码已经委托美琴改成了自己的三围，去那里就能证明咯。”  \n>“从哪里冒出来的，还有让美琴小姐做那种事你是什么变态制作人……可就算你这么说要怎么做完全不明白啊。”  \n>“简单，日花你随便进一间房间，路加就在走廊上看着。路加让你从哪一个房间的门出来，你就从哪一个房间的门出来，如果你确实知道密码，那对你来说这件事就是轻而易举，如果你不知道，那你可没办法伪装。”  \n>三十分钟后，响应如流的日花叉着腰对路加，一脸得意。却见路加从房间A进去，过一会从房间B走了出来。“你只是证明了你知道，但我也知道，哪怕两个小时前美琴的身体有什么变化我也会注意到……！”  \n>“变态啊……”\n# 介绍\n零知识证明(Zero-Knowledge Proof)是一套证明系统，证明者(prover)向验证者(verifier)提交一个陈述(Statement)，证明其是真的。  \n并满足下列条件：  \n1.  完备性。只要Statement正确，prover就能让verifier确信。\n2.  可靠性。只要Statement错误，prover无论怎么作弊都无法让verifier相信。\n3.  零知识性。证明过程仅揭露Statement是否正确而不泄露其他信息。    \n  \n对引子来说，我们把数据转换为了另一种表现，隐去了具体数据。事实上，零知识证明更多倾向于一种描述性的概念。理应有许多种构成零知识证明的形式。\n# 交互式与非交互式\n在引子的例子里，我们可以看到在证明的过程中，路加和日花需要都在场，一个发出验证请求，一个做出证明。我们称这种形式的零知识证明是交互式的，他有一个显而易见的问题，如果七草日花想向其他人也证明这件事的话，她将不得不将这个验证做很多遍！每一遍还要验证者在旁边看着。有没有一种更一劳永逸的办法呢？我们看一个例子。\n>大崎甜花最近沉迷在数独游戏。  \n>在向制作人宣称要连睡三周之后，甜花终于解出了一个超级难的数独。  \n>“甜花，很厉害！”这样想着，甜花想向其他人分享这个喜悦。“但如果把答案告诉别人的话，别人就不能再做了，会损失好多乐趣……噫……な酱，该怎么办啊……”  \n>“交给甘奈吧！制作人前段时间正好介绍了一个可以用得上的工具！”  \n>“首先做3套数独的卡片吧，在数独的谜面格，正面向上放3张对应的数字卡，在求解格，背面向上放3张对应的数字卡。这样就好了！”  \n>“可是这有什么用呢……？甜花，不想别人翻开卡片看答案……”  \n>“不会的！我们请千雪来帮忙吧。千雪姐，甜花说她做出了超难的数独哦，就请千雪姐来验证一下吧！请随便从一行、一列、一个九宫格分别取出来一套卡片，分别洗开再展示哦。”  \n>“呀，每一套卡都是1-9的一套呢，毕竟数独的规则就是这样吧。”  \n>“是正确的数独才是这样的哦。让甜花重新摆好卡，再试一次吧。”  \n>“还是正确的呢。甜花好厉害！”\n>“にへへ～可是千雪姐，不会知道答案吗……！因为拿出来的时候洗过牌，所以顺序信息被洗掉了，就没法还原……”  \n>“没错，甜花真聪明！所有人都知道数独的每一行每一列每一九宫格里都是1-9，但只有解开数独的人可以生成由谜面产生的数独！即便不透露答案，也可以证明甜花做出来了！而且只要提前做好了这样的卡片和取卡规则，无论谁来都可以验证，不再需要甜花的参与啦。”  \n\n如此，我们便提出了一种非交互式的零知识证明。\n# 结语\n我们对零知识证明做了一个简单的阐述，但零知识证明有什么用，又要如何去构建一个合理的零知识证明系统，其实有许多文章已经涵盖。等未来有兴趣了，再做更多的讨论吧。","source":"_posts/胡言乱语零知识证明Page0.md","raw":"---\ntitle: 胡言乱语零知识证明Page0\ndate: 2022-08-04 20:28:31\ntags: \ncover: https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/100174471_p0.jpg/1080\n---\n本文纯属胡编乱造，角色有ooc请勿代入。关于数学相关的东西也可能不够严谨，请批判阅读。\n# 引子\n我们先来看一个例子  \n>斑鸠路加和七草日花争论谁才是最了解美琴的人。  \n>七草日花宣称路加手上关于美琴的三围数据已经过时。路加对这一论述嗤之以鼻，“既然这么说，那告诉我现在的数据，不然你怎么证明呢？”  \n>日花陷入沉思，“我要证明我确实知道这件事，但我不能把美琴小姐的数据交给那个人，该该该怎么办……”  \n>“我早料到啦！”，不知道从哪里冒出来的制作人，“我给日花准备了一个特殊的证明场地！事务所有一条走廊上有两间房间，分别有一扇通往走廊的门，两个房间之间有一扇带密码锁的门，门的密码已经委托美琴改成了自己的三围，去那里就能证明咯。”  \n>“从哪里冒出来的，还有让美琴小姐做那种事你是什么变态制作人……可就算你这么说要怎么做完全不明白啊。”  \n>“简单，日花你随便进一间房间，路加就在走廊上看着。路加让你从哪一个房间的门出来，你就从哪一个房间的门出来，如果你确实知道密码，那对你来说这件事就是轻而易举，如果你不知道，那你可没办法伪装。”  \n>三十分钟后，响应如流的日花叉着腰对路加，一脸得意。却见路加从房间A进去，过一会从房间B走了出来。“你只是证明了你知道，但我也知道，哪怕两个小时前美琴的身体有什么变化我也会注意到……！”  \n>“变态啊……”\n# 介绍\n零知识证明(Zero-Knowledge Proof)是一套证明系统，证明者(prover)向验证者(verifier)提交一个陈述(Statement)，证明其是真的。  \n并满足下列条件：  \n1.  完备性。只要Statement正确，prover就能让verifier确信。\n2.  可靠性。只要Statement错误，prover无论怎么作弊都无法让verifier相信。\n3.  零知识性。证明过程仅揭露Statement是否正确而不泄露其他信息。    \n  \n对引子来说，我们把数据转换为了另一种表现，隐去了具体数据。事实上，零知识证明更多倾向于一种描述性的概念。理应有许多种构成零知识证明的形式。\n# 交互式与非交互式\n在引子的例子里，我们可以看到在证明的过程中，路加和日花需要都在场，一个发出验证请求，一个做出证明。我们称这种形式的零知识证明是交互式的，他有一个显而易见的问题，如果七草日花想向其他人也证明这件事的话，她将不得不将这个验证做很多遍！每一遍还要验证者在旁边看着。有没有一种更一劳永逸的办法呢？我们看一个例子。\n>大崎甜花最近沉迷在数独游戏。  \n>在向制作人宣称要连睡三周之后，甜花终于解出了一个超级难的数独。  \n>“甜花，很厉害！”这样想着，甜花想向其他人分享这个喜悦。“但如果把答案告诉别人的话，别人就不能再做了，会损失好多乐趣……噫……な酱，该怎么办啊……”  \n>“交给甘奈吧！制作人前段时间正好介绍了一个可以用得上的工具！”  \n>“首先做3套数独的卡片吧，在数独的谜面格，正面向上放3张对应的数字卡，在求解格，背面向上放3张对应的数字卡。这样就好了！”  \n>“可是这有什么用呢……？甜花，不想别人翻开卡片看答案……”  \n>“不会的！我们请千雪来帮忙吧。千雪姐，甜花说她做出了超难的数独哦，就请千雪姐来验证一下吧！请随便从一行、一列、一个九宫格分别取出来一套卡片，分别洗开再展示哦。”  \n>“呀，每一套卡都是1-9的一套呢，毕竟数独的规则就是这样吧。”  \n>“是正确的数独才是这样的哦。让甜花重新摆好卡，再试一次吧。”  \n>“还是正确的呢。甜花好厉害！”\n>“にへへ～可是千雪姐，不会知道答案吗……！因为拿出来的时候洗过牌，所以顺序信息被洗掉了，就没法还原……”  \n>“没错，甜花真聪明！所有人都知道数独的每一行每一列每一九宫格里都是1-9，但只有解开数独的人可以生成由谜面产生的数独！即便不透露答案，也可以证明甜花做出来了！而且只要提前做好了这样的卡片和取卡规则，无论谁来都可以验证，不再需要甜花的参与啦。”  \n\n如此，我们便提出了一种非交互式的零知识证明。\n# 结语\n我们对零知识证明做了一个简单的阐述，但零知识证明有什么用，又要如何去构建一个合理的零知识证明系统，其实有许多文章已经涵盖。等未来有兴趣了，再做更多的讨论吧。","slug":"胡言乱语零知识证明Page0","published":1,"updated":"2022-08-04T12:31:12.677Z","_id":"cl6f0mikj0000dewrdvfxau0j","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文纯属胡编乱造，角色有ooc请勿代入。关于数学相关的东西也可能不够严谨，请批判阅读。</p>\n<h1 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h1><p>我们先来看一个例子  </p>\n<blockquote>\n<p>斑鸠路加和七草日花争论谁才是最了解美琴的人。<br>七草日花宣称路加手上关于美琴的三围数据已经过时。路加对这一论述嗤之以鼻，“既然这么说，那告诉我现在的数据，不然你怎么证明呢？”<br>日花陷入沉思，“我要证明我确实知道这件事，但我不能把美琴小姐的数据交给那个人，该该该怎么办……”<br>“我早料到啦！”，不知道从哪里冒出来的制作人，“我给日花准备了一个特殊的证明场地！事务所有一条走廊上有两间房间，分别有一扇通往走廊的门，两个房间之间有一扇带密码锁的门，门的密码已经委托美琴改成了自己的三围，去那里就能证明咯。”<br>“从哪里冒出来的，还有让美琴小姐做那种事你是什么变态制作人……可就算你这么说要怎么做完全不明白啊。”<br>“简单，日花你随便进一间房间，路加就在走廊上看着。路加让你从哪一个房间的门出来，你就从哪一个房间的门出来，如果你确实知道密码，那对你来说这件事就是轻而易举，如果你不知道，那你可没办法伪装。”<br>三十分钟后，响应如流的日花叉着腰对路加，一脸得意。却见路加从房间A进去，过一会从房间B走了出来。“你只是证明了你知道，但我也知道，哪怕两个小时前美琴的身体有什么变化我也会注意到……！”<br>“变态啊……”</p>\n</blockquote>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>零知识证明(Zero-Knowledge Proof)是一套证明系统，证明者(prover)向验证者(verifier)提交一个陈述(Statement)，证明其是真的。<br>并满足下列条件：  </p>\n<ol>\n<li>完备性。只要Statement正确，prover就能让verifier确信。</li>\n<li>可靠性。只要Statement错误，prover无论怎么作弊都无法让verifier相信。</li>\n<li>零知识性。证明过程仅揭露Statement是否正确而不泄露其他信息。</li>\n</ol>\n<p>对引子来说，我们把数据转换为了另一种表现，隐去了具体数据。事实上，零知识证明更多倾向于一种描述性的概念。理应有许多种构成零知识证明的形式。</p>\n<h1 id=\"交互式与非交互式\"><a href=\"#交互式与非交互式\" class=\"headerlink\" title=\"交互式与非交互式\"></a>交互式与非交互式</h1><p>在引子的例子里，我们可以看到在证明的过程中，路加和日花需要都在场，一个发出验证请求，一个做出证明。我们称这种形式的零知识证明是交互式的，他有一个显而易见的问题，如果七草日花想向其他人也证明这件事的话，她将不得不将这个验证做很多遍！每一遍还要验证者在旁边看着。有没有一种更一劳永逸的办法呢？我们看一个例子。</p>\n<blockquote>\n<p>大崎甜花最近沉迷在数独游戏。<br>在向制作人宣称要连睡三周之后，甜花终于解出了一个超级难的数独。<br>“甜花，很厉害！”这样想着，甜花想向其他人分享这个喜悦。“但如果把答案告诉别人的话，别人就不能再做了，会损失好多乐趣……噫……な酱，该怎么办啊……”<br>“交给甘奈吧！制作人前段时间正好介绍了一个可以用得上的工具！”<br>“首先做3套数独的卡片吧，在数独的谜面格，正面向上放3张对应的数字卡，在求解格，背面向上放3张对应的数字卡。这样就好了！”<br>“可是这有什么用呢……？甜花，不想别人翻开卡片看答案……”<br>“不会的！我们请千雪来帮忙吧。千雪姐，甜花说她做出了超难的数独哦，就请千雪姐来验证一下吧！请随便从一行、一列、一个九宫格分别取出来一套卡片，分别洗开再展示哦。”<br>“呀，每一套卡都是1-9的一套呢，毕竟数独的规则就是这样吧。”<br>“是正确的数独才是这样的哦。让甜花重新摆好卡，再试一次吧。”<br>“还是正确的呢。甜花好厉害！”<br>“にへへ～可是千雪姐，不会知道答案吗……！因为拿出来的时候洗过牌，所以顺序信息被洗掉了，就没法还原……”<br>“没错，甜花真聪明！所有人都知道数独的每一行每一列每一九宫格里都是1-9，但只有解开数独的人可以生成由谜面产生的数独！即便不透露答案，也可以证明甜花做出来了！而且只要提前做好了这样的卡片和取卡规则，无论谁来都可以验证，不再需要甜花的参与啦。”  </p>\n</blockquote>\n<p>如此，我们便提出了一种非交互式的零知识证明。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>我们对零知识证明做了一个简单的阐述，但零知识证明有什么用，又要如何去构建一个合理的零知识证明系统，其实有许多文章已经涵盖。等未来有兴趣了，再做更多的讨论吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文纯属胡编乱造，角色有ooc请勿代入。关于数学相关的东西也可能不够严谨，请批判阅读。</p>\n<h1 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h1><p>我们先来看一个例子  </p>\n<blockquote>\n<p>斑鸠路加和七草日花争论谁才是最了解美琴的人。<br>七草日花宣称路加手上关于美琴的三围数据已经过时。路加对这一论述嗤之以鼻，“既然这么说，那告诉我现在的数据，不然你怎么证明呢？”<br>日花陷入沉思，“我要证明我确实知道这件事，但我不能把美琴小姐的数据交给那个人，该该该怎么办……”<br>“我早料到啦！”，不知道从哪里冒出来的制作人，“我给日花准备了一个特殊的证明场地！事务所有一条走廊上有两间房间，分别有一扇通往走廊的门，两个房间之间有一扇带密码锁的门，门的密码已经委托美琴改成了自己的三围，去那里就能证明咯。”<br>“从哪里冒出来的，还有让美琴小姐做那种事你是什么变态制作人……可就算你这么说要怎么做完全不明白啊。”<br>“简单，日花你随便进一间房间，路加就在走廊上看着。路加让你从哪一个房间的门出来，你就从哪一个房间的门出来，如果你确实知道密码，那对你来说这件事就是轻而易举，如果你不知道，那你可没办法伪装。”<br>三十分钟后，响应如流的日花叉着腰对路加，一脸得意。却见路加从房间A进去，过一会从房间B走了出来。“你只是证明了你知道，但我也知道，哪怕两个小时前美琴的身体有什么变化我也会注意到……！”<br>“变态啊……”</p>\n</blockquote>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>零知识证明(Zero-Knowledge Proof)是一套证明系统，证明者(prover)向验证者(verifier)提交一个陈述(Statement)，证明其是真的。<br>并满足下列条件：  </p>\n<ol>\n<li>完备性。只要Statement正确，prover就能让verifier确信。</li>\n<li>可靠性。只要Statement错误，prover无论怎么作弊都无法让verifier相信。</li>\n<li>零知识性。证明过程仅揭露Statement是否正确而不泄露其他信息。</li>\n</ol>\n<p>对引子来说，我们把数据转换为了另一种表现，隐去了具体数据。事实上，零知识证明更多倾向于一种描述性的概念。理应有许多种构成零知识证明的形式。</p>\n<h1 id=\"交互式与非交互式\"><a href=\"#交互式与非交互式\" class=\"headerlink\" title=\"交互式与非交互式\"></a>交互式与非交互式</h1><p>在引子的例子里，我们可以看到在证明的过程中，路加和日花需要都在场，一个发出验证请求，一个做出证明。我们称这种形式的零知识证明是交互式的，他有一个显而易见的问题，如果七草日花想向其他人也证明这件事的话，她将不得不将这个验证做很多遍！每一遍还要验证者在旁边看着。有没有一种更一劳永逸的办法呢？我们看一个例子。</p>\n<blockquote>\n<p>大崎甜花最近沉迷在数独游戏。<br>在向制作人宣称要连睡三周之后，甜花终于解出了一个超级难的数独。<br>“甜花，很厉害！”这样想着，甜花想向其他人分享这个喜悦。“但如果把答案告诉别人的话，别人就不能再做了，会损失好多乐趣……噫……な酱，该怎么办啊……”<br>“交给甘奈吧！制作人前段时间正好介绍了一个可以用得上的工具！”<br>“首先做3套数独的卡片吧，在数独的谜面格，正面向上放3张对应的数字卡，在求解格，背面向上放3张对应的数字卡。这样就好了！”<br>“可是这有什么用呢……？甜花，不想别人翻开卡片看答案……”<br>“不会的！我们请千雪来帮忙吧。千雪姐，甜花说她做出了超难的数独哦，就请千雪姐来验证一下吧！请随便从一行、一列、一个九宫格分别取出来一套卡片，分别洗开再展示哦。”<br>“呀，每一套卡都是1-9的一套呢，毕竟数独的规则就是这样吧。”<br>“是正确的数独才是这样的哦。让甜花重新摆好卡，再试一次吧。”<br>“还是正确的呢。甜花好厉害！”<br>“にへへ～可是千雪姐，不会知道答案吗……！因为拿出来的时候洗过牌，所以顺序信息被洗掉了，就没法还原……”<br>“没错，甜花真聪明！所有人都知道数独的每一行每一列每一九宫格里都是1-9，但只有解开数独的人可以生成由谜面产生的数独！即便不透露答案，也可以证明甜花做出来了！而且只要提前做好了这样的卡片和取卡规则，无论谁来都可以验证，不再需要甜花的参与啦。”  </p>\n</blockquote>\n<p>如此，我们便提出了一种非交互式的零知识证明。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>我们对零知识证明做了一个简单的阐述，但零知识证明有什么用，又要如何去构建一个合理的零知识证明系统，其实有许多文章已经涵盖。等未来有兴趣了，再做更多的讨论吧。</p>\n"},{"title":"Leetcode 22.8week1","date":"2022-08-19T14:40:45.000Z","cover":"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/1f8b4d40a1070b007a77e1a6dd86d1b59a71b506.jpg/1080","_content":"\n# Aug.Week1\n## 220812\n### daily-1282.用户分组(algorithms\tMedium)\n#### 分析\n基本的hashmap就可以完成，学习一下go的map，真好使。\n#### 代码块\n```golang\nfunc groupThePeople(groupSizes []int) [][]int {\n\tans := make([][]int, 0)\n\tgroup := make(map[int][]int)\n\tfor i, v := range groupSizes {\n\t\tgroup[v] = append(group[v], i)\n\t\tif len(group[v]) == v {\n\t\t\tans = append(ans, group[v])\n\t\t\tgroup[v] = []int{}\n\t\t}\n\t}\n\treturn ans\n}\n```\n#### review\n### 加餐-993.二叉树的堂兄弟节点(algorithms\tEasy)\n#### 分析\n一遍前序遍历，记录先找到的x或y的深度和父节点数据，找到另一个值时判断他们深度是否一致、父节点是否不一致。\n#### 代码块\n```golang\nvar kx, ky, xdeep, ydeep, ffather int\nvar ans bool\n\nfunc isCousins(root *TreeNode, x int, y int) bool {\n\tffather = -2\n\tans = true\n\tkx = x\n\tky = y\n\tergodic(root, 0, -1)\n\treturn ans\n}\n\nfunc ergodic(now *TreeNode, deep int, tmp int) {\n\tif now.Val == kx {\n\t\txdeep = deep\n\t\tif ffather == -2 {\n\t\t\tffather = tmp\n\t\t} else {\n\t\t\tif ffather == tmp || xdeep != ydeep {\n\t\t\t\tans = false\n\t\t\t}\n\t\t}\n\t}\n\tif now.Val == ky {\n\t\tydeep = deep\n\t\tif ffather == -2 {\n\t\t\tffather = tmp\n\t\t} else {\n\t\t\tif ffather == tmp || xdeep != ydeep {\n\t\t\t\tans = false\n\t\t\t}\n\t\t}\n\t}\n\tif now.Left != nil {\n\t\tergodic(now.Left, deep+1, now.Val)\n\t}\n\tif now.Right != nil {\n\t\tergodic(now.Right, deep+1, now.Val)\n\t}\n\treturn\n}\n```\n#### review\n为了取值方便开了全局变量并在递归中更改这个值，总觉得有一点微妙。官方题解给的匿名函数方法应该会好很多。这边数值不敏感就这样过了。\n\n## 220813\n### daily-768.最多能完成排序的块 II(algorithms\tHard)\n#### 分析\n首先对原数组排序得到一个结果sorted  \n假如我们已经将0~k-1项分成了最多的块，从第k项起m项可以形成一个块的充要条件是构成arr[k:k+m]与sorted[k:k+m]的元素相同。  \n而由于选取块时是连续选取的，而sorted又是有序的，可以预见，如果从第k项起m项或n项可以形成一个满足条件的块(m<n),那么一定可以拆成两个块[k:k+m]与[k+m:k+n]。  \n从而利用一张hashdelta的hashmap，比对两个数组差值，一旦满足delta==0就立刻计数并切分。  \n#### 代码块\n```golang\nimport (\n\t\"sort\"\n)\nfunc maxChunksToSorted(arr []int) int {\n\tvar ans int = 0\n\thashdelta := make(map[int]int)\n\tsorted := make([]int, len(arr))\n\tcopy(sorted, arr)\n\tsort.Ints(sorted)\n\tfor i, v := range arr {\n\t\thashdelta[v]++\n\t\thashdelta[sorted[i]]--\n\t\ttrigger := true\n\t\tfor k, _ := range hashdelta {\n\t\t\tif hashdelta[k] != 0 {\n\t\t\t\ttrigger = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif trigger == true {\n\t\t\tans++\n\t\t\thashdelta = make(map[int]int)\n\t\t}\n\t}\n\treturn ans\n}\n```\n#### review\n效率将将能过，一开始在hashdelta==0后切分但没有重置哈希表，存了很多多余的0数据影响了判断速度，增加重置后就过了。只能说girigiri。  \n\n## 220814\n### daily-1422.分割字符串的最大得分(algorithms\tEasy)\n#### 分析\n以全字符串为基准右子串，统计右子串的最高得分。  \n接着考虑左子串，左侧每引入一个0，总得分得1分，每引入一个1，总得分减1分。从而可以引入一个deltaleft记录左子串对总得分的最高贡献。\n#### 代码块\n```golang\nfunc maxScore(s string) int {\n\tleft := 0\n\tright := 0\n\tlen := len(s)\n\tmax := -1\n\tfor i := 0; i < len; i++ {\n\t\tif s[i] == '0' {\n\t\t\tleft++\n\t\t} else {\n\t\t\tleft--\n\t\t\tright++\n\t\t}\n\t\tif left > max && i != (len-1) {\n\t\t\tmax = left\n\t\t}\n\t}\n\treturn right + max\n}\n```\n#### review\n注意题目有条件说是非空的子串，没注意到就被杀害了。初始定义时max:=-1暗中排除了左空的最坏情况，单独处理右空的可能性就行。\n\n## 220815\n### daily-641.设计循环双端队列(algorithms\tMedium)\n#### 分析\n蛮常规的但我确实不太会的数据结构.jpg  \n#### 代码块\n```golang\ntype MyCircularDeque struct {\n\tcontent     []int\n\tfront, rear int\n}\n\nfunc Constructor(k int) MyCircularDeque {\n\treturn MyCircularDeque{content: make([]int, k+1), front: 0, rear: 0}\n}\n\nfunc (this *MyCircularDeque) InsertFront(value int) bool {\n\tif this.IsFull() {\n\t\treturn false\n\t}\n\tthis.front = (this.front - 1 + len(this.content)) % len(this.content)\n\tthis.content[this.front] = value\n\treturn true\n}\n\nfunc (this *MyCircularDeque) InsertLast(value int) bool {\n\tif this.IsFull() {\n\t\treturn false\n\t}\n\tthis.content[this.rear] = value\n\tthis.rear = (this.rear + 1) % len(this.content)\n\treturn true\n}\n\nfunc (this *MyCircularDeque) DeleteFront() bool {\n\tif this.IsEmpty() {\n\t\treturn false\n\t}\n\tthis.front = (this.front + 1) % len(this.content)\n\treturn true\n}\n\nfunc (this *MyCircularDeque) DeleteLast() bool {\n\tif this.IsEmpty() {\n\t\treturn false\n\t}\n\tthis.rear = (this.rear - 1 + len(this.content)) % len(this.content)\n\treturn true\n}\n\nfunc (this *MyCircularDeque) GetFront() int {\n\tif this.IsEmpty() {\n\t\treturn -1\n\t}\n\treturn this.content[this.front]\n}\n\nfunc (this *MyCircularDeque) GetRear() int {\n\tif this.IsEmpty() {\n\t\treturn -1\n\t}\n\treturn this.content[(this.rear-1+len(this.content))%len(this.content)]\n}\n\nfunc (this *MyCircularDeque) IsEmpty() bool {\n\treturn this.front == this.rear\n}\n\nfunc (this *MyCircularDeque) IsFull() bool {\n\treturn (this.rear+1)%len(this.content) == this.front\n}\n```\n#### review\n学习一个struct的赋值写法。  \n然后就是整个双端队列的理解。本来想直接用append加元素删前后，后来意识到好像会有容量问题，写回了比较标准的数组处理法。但看了看题解应该还是可以做的，但append不能实现头部插入，需要先反转再插入再反转。\n\n## 220816\n### daily-1656.设计有序流(algorithms\tEasy)\n#### 分析\n设计题，偏水，按题目要求写就是。\n#### 代码块\n```golang\ntype OrderedStream struct {\n\telements []string\n\tptr      int\n}\n\nfunc Constructor(n int) OrderedStream {\n\treturn OrderedStream{elements: make([]string, n+1), ptr: 1}\n}\n\nfunc (this *OrderedStream) Insert(idKey int, value string) []string {\n\tans := make([]string, 0)\n\tthis.elements[idKey] = value\n\ti := 0\n\tfor i = this.ptr; i < len(this.elements); i++ {\n\t\tif len(this.elements[i]) == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\tans = append(ans, this.elements[this.ptr:i]...)\n\tthis.ptr = i\n\treturn ans\n}\n```\n#### review\n\n### daily-1925.统计平方和三元组的数目(algorithms\tEasy)\n#### 分析\n纯水题。\n#### 代码块\n```golang\nfunc countTriples(n int) int {\n\tans := 0\n\tfor a := 1; a <= n; a++ {\n\t\tfor b := a + 1; b <= n; b++ {\n\t\t\tc := int(math.Sqrt(float64(a*a + b*b)))\n\t\t\tif c > n {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif c*c == a*a+b*b {\n\t\t\t\tans++\n\t\t\t}\n\t\t}\n\t}\n\treturn ans * 2\n}\n```\n#### review\n想优化，但不是很顺利，也许要用二分查找才能进一步提升时效？\n\n## 220817\n### daily-1302.层数最深叶子节点的和(algorithms\tMedium)\n#### 分析\n遍历，然后捡到最终答案。\n#### 代码块\n```golang\nfunc deepestLeavesSum(root *TreeNode) int {\n\tmaxdeep := -1\n\tdeepsum := 0\n\tvar f func(now *TreeNode, deep int)\n\tf = func(now *TreeNode, deep int) {\n\t\tif now == nil {\n\t\t\treturn\n\t\t}\n\t\tif deep > maxdeep {\n\t\t\tmaxdeep = deep\n\t\t\tdeepsum = now.Val\n\t\t} else if deep == maxdeep {\n\t\t\tdeepsum += now.Val\n\t\t}\n\t\tf(now.Left, deep+1)\n\t\tf(now.Right, deep+1)\n\t}\n\tf(root, 0)\n\treturn deepsum\n}\n```\n#### review\n相对轻松，学一个go里函数赋值给变量的写法。\n## 220818\n### daily-1224.最大相等频率(algorithms\tHard)\n#### 分析\nhashmap统计所有元素出现次数，从后往前搜索，更新hashmap  \n如果一组数据满足条件，可以有如下结论：  \n组内所有数出现次数只有两种可能(记min和max)  \n有如下四种满足可能的方式:  \n1. min只出现一次且min=1（去掉这个数满足条件）\n2. max只出现一次且max-min=1（去掉max满足条件）\n3. 组内只有一种可能的数（去掉任意一个数满足条件）\n4. 组内所有的数只出现一次（去掉任意一个满足条件）\n#### 代码块\n```golang\nfunc maxEqualFreq(nums []int) int {\n\tvar check func() bool\n\thashmap := make(map[int]int)\n\tcheck = func() bool {\n\t\tmax := -1\n\t\tmaxtimes := -1\n\t\tmin := -1\n\t\tmintimes := -1\n\t\tfor _, v := range hashmap {\n\t\t\tif v == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif max == -1 {\n\t\t\t\tmax = v\n\t\t\t\tmaxtimes = 1\n\t\t\t} else if max == v {\n\t\t\t\tmaxtimes++\n\t\t\t} else if min == -1 {\n\t\t\t\tmin = v\n\t\t\t\tmintimes = 1\n\t\t\t} else if min == v {\n\t\t\t\tmintimes++\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\ttemp := 0\n\t\tif max < min {\n\t\t\ttemp = max\n\t\t\tmax = min\n\t\t\tmin = temp\n\t\t\ttemp = maxtimes\n\t\t\tmaxtimes = mintimes\n\t\t\tmintimes = temp\n\t\t}\n\t\tfmt.Println(max, maxtimes, min, mintimes)\n\t\tif min == -1 {\n\t\t\tif max == 1 {\n\t\t\t\treturn true\n\t\t\t} else if maxtimes == 1 {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\tif maxtimes == 1 && max-min == 1 {\n\t\t\treturn true\n\t\t}\n\t\tif mintimes == 1 && min == 1 {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\tfor _, v := range nums {\n\t\thashmap[v]++\n\t}\n\tfor i := len(nums) - 1; i >= 0; i-- {\n\t\tif check() {\n\t\t\treturn i + 1\n\t\t}\n\t\thashmap[nums[i]]--\n\t}\n\treturn 1\n}\n```\n#### review\n实际上复杂度处理不难，适当剪枝很轻松。主要是情况种类比较多，容易遗漏。(3,4情况都没有考虑到)\n\n## 220819\n### daily-1450.在既定时间做作业的学生人数(algorithms\tEasy)\n#### 分析\n水题。\n#### 代码块\n```golang\nfunc busyStudent(startTime []int, endTime []int, queryTime int) int {\n\tans := 0\n\tfor i, _ := range startTime {\n\t\tif startTime[i] <= queryTime && queryTime <= endTime[i] {\n\t\t\tans++\n\t\t}\n\t}\n\treturn ans\n}\n```\n#### review\n太水了反而不知道怎么说。差分数组和二分查找都有点意味不明。\n\n","source":"_posts/Leetcode-22-8week1.md","raw":"---\ntitle: Leetcode 22.8week1\ndate: 2022-08-19 22:40:45\ntags:\ncover: https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/1f8b4d40a1070b007a77e1a6dd86d1b59a71b506.jpg/1080\n---\n\n# Aug.Week1\n## 220812\n### daily-1282.用户分组(algorithms\tMedium)\n#### 分析\n基本的hashmap就可以完成，学习一下go的map，真好使。\n#### 代码块\n```golang\nfunc groupThePeople(groupSizes []int) [][]int {\n\tans := make([][]int, 0)\n\tgroup := make(map[int][]int)\n\tfor i, v := range groupSizes {\n\t\tgroup[v] = append(group[v], i)\n\t\tif len(group[v]) == v {\n\t\t\tans = append(ans, group[v])\n\t\t\tgroup[v] = []int{}\n\t\t}\n\t}\n\treturn ans\n}\n```\n#### review\n### 加餐-993.二叉树的堂兄弟节点(algorithms\tEasy)\n#### 分析\n一遍前序遍历，记录先找到的x或y的深度和父节点数据，找到另一个值时判断他们深度是否一致、父节点是否不一致。\n#### 代码块\n```golang\nvar kx, ky, xdeep, ydeep, ffather int\nvar ans bool\n\nfunc isCousins(root *TreeNode, x int, y int) bool {\n\tffather = -2\n\tans = true\n\tkx = x\n\tky = y\n\tergodic(root, 0, -1)\n\treturn ans\n}\n\nfunc ergodic(now *TreeNode, deep int, tmp int) {\n\tif now.Val == kx {\n\t\txdeep = deep\n\t\tif ffather == -2 {\n\t\t\tffather = tmp\n\t\t} else {\n\t\t\tif ffather == tmp || xdeep != ydeep {\n\t\t\t\tans = false\n\t\t\t}\n\t\t}\n\t}\n\tif now.Val == ky {\n\t\tydeep = deep\n\t\tif ffather == -2 {\n\t\t\tffather = tmp\n\t\t} else {\n\t\t\tif ffather == tmp || xdeep != ydeep {\n\t\t\t\tans = false\n\t\t\t}\n\t\t}\n\t}\n\tif now.Left != nil {\n\t\tergodic(now.Left, deep+1, now.Val)\n\t}\n\tif now.Right != nil {\n\t\tergodic(now.Right, deep+1, now.Val)\n\t}\n\treturn\n}\n```\n#### review\n为了取值方便开了全局变量并在递归中更改这个值，总觉得有一点微妙。官方题解给的匿名函数方法应该会好很多。这边数值不敏感就这样过了。\n\n## 220813\n### daily-768.最多能完成排序的块 II(algorithms\tHard)\n#### 分析\n首先对原数组排序得到一个结果sorted  \n假如我们已经将0~k-1项分成了最多的块，从第k项起m项可以形成一个块的充要条件是构成arr[k:k+m]与sorted[k:k+m]的元素相同。  \n而由于选取块时是连续选取的，而sorted又是有序的，可以预见，如果从第k项起m项或n项可以形成一个满足条件的块(m<n),那么一定可以拆成两个块[k:k+m]与[k+m:k+n]。  \n从而利用一张hashdelta的hashmap，比对两个数组差值，一旦满足delta==0就立刻计数并切分。  \n#### 代码块\n```golang\nimport (\n\t\"sort\"\n)\nfunc maxChunksToSorted(arr []int) int {\n\tvar ans int = 0\n\thashdelta := make(map[int]int)\n\tsorted := make([]int, len(arr))\n\tcopy(sorted, arr)\n\tsort.Ints(sorted)\n\tfor i, v := range arr {\n\t\thashdelta[v]++\n\t\thashdelta[sorted[i]]--\n\t\ttrigger := true\n\t\tfor k, _ := range hashdelta {\n\t\t\tif hashdelta[k] != 0 {\n\t\t\t\ttrigger = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif trigger == true {\n\t\t\tans++\n\t\t\thashdelta = make(map[int]int)\n\t\t}\n\t}\n\treturn ans\n}\n```\n#### review\n效率将将能过，一开始在hashdelta==0后切分但没有重置哈希表，存了很多多余的0数据影响了判断速度，增加重置后就过了。只能说girigiri。  \n\n## 220814\n### daily-1422.分割字符串的最大得分(algorithms\tEasy)\n#### 分析\n以全字符串为基准右子串，统计右子串的最高得分。  \n接着考虑左子串，左侧每引入一个0，总得分得1分，每引入一个1，总得分减1分。从而可以引入一个deltaleft记录左子串对总得分的最高贡献。\n#### 代码块\n```golang\nfunc maxScore(s string) int {\n\tleft := 0\n\tright := 0\n\tlen := len(s)\n\tmax := -1\n\tfor i := 0; i < len; i++ {\n\t\tif s[i] == '0' {\n\t\t\tleft++\n\t\t} else {\n\t\t\tleft--\n\t\t\tright++\n\t\t}\n\t\tif left > max && i != (len-1) {\n\t\t\tmax = left\n\t\t}\n\t}\n\treturn right + max\n}\n```\n#### review\n注意题目有条件说是非空的子串，没注意到就被杀害了。初始定义时max:=-1暗中排除了左空的最坏情况，单独处理右空的可能性就行。\n\n## 220815\n### daily-641.设计循环双端队列(algorithms\tMedium)\n#### 分析\n蛮常规的但我确实不太会的数据结构.jpg  \n#### 代码块\n```golang\ntype MyCircularDeque struct {\n\tcontent     []int\n\tfront, rear int\n}\n\nfunc Constructor(k int) MyCircularDeque {\n\treturn MyCircularDeque{content: make([]int, k+1), front: 0, rear: 0}\n}\n\nfunc (this *MyCircularDeque) InsertFront(value int) bool {\n\tif this.IsFull() {\n\t\treturn false\n\t}\n\tthis.front = (this.front - 1 + len(this.content)) % len(this.content)\n\tthis.content[this.front] = value\n\treturn true\n}\n\nfunc (this *MyCircularDeque) InsertLast(value int) bool {\n\tif this.IsFull() {\n\t\treturn false\n\t}\n\tthis.content[this.rear] = value\n\tthis.rear = (this.rear + 1) % len(this.content)\n\treturn true\n}\n\nfunc (this *MyCircularDeque) DeleteFront() bool {\n\tif this.IsEmpty() {\n\t\treturn false\n\t}\n\tthis.front = (this.front + 1) % len(this.content)\n\treturn true\n}\n\nfunc (this *MyCircularDeque) DeleteLast() bool {\n\tif this.IsEmpty() {\n\t\treturn false\n\t}\n\tthis.rear = (this.rear - 1 + len(this.content)) % len(this.content)\n\treturn true\n}\n\nfunc (this *MyCircularDeque) GetFront() int {\n\tif this.IsEmpty() {\n\t\treturn -1\n\t}\n\treturn this.content[this.front]\n}\n\nfunc (this *MyCircularDeque) GetRear() int {\n\tif this.IsEmpty() {\n\t\treturn -1\n\t}\n\treturn this.content[(this.rear-1+len(this.content))%len(this.content)]\n}\n\nfunc (this *MyCircularDeque) IsEmpty() bool {\n\treturn this.front == this.rear\n}\n\nfunc (this *MyCircularDeque) IsFull() bool {\n\treturn (this.rear+1)%len(this.content) == this.front\n}\n```\n#### review\n学习一个struct的赋值写法。  \n然后就是整个双端队列的理解。本来想直接用append加元素删前后，后来意识到好像会有容量问题，写回了比较标准的数组处理法。但看了看题解应该还是可以做的，但append不能实现头部插入，需要先反转再插入再反转。\n\n## 220816\n### daily-1656.设计有序流(algorithms\tEasy)\n#### 分析\n设计题，偏水，按题目要求写就是。\n#### 代码块\n```golang\ntype OrderedStream struct {\n\telements []string\n\tptr      int\n}\n\nfunc Constructor(n int) OrderedStream {\n\treturn OrderedStream{elements: make([]string, n+1), ptr: 1}\n}\n\nfunc (this *OrderedStream) Insert(idKey int, value string) []string {\n\tans := make([]string, 0)\n\tthis.elements[idKey] = value\n\ti := 0\n\tfor i = this.ptr; i < len(this.elements); i++ {\n\t\tif len(this.elements[i]) == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\tans = append(ans, this.elements[this.ptr:i]...)\n\tthis.ptr = i\n\treturn ans\n}\n```\n#### review\n\n### daily-1925.统计平方和三元组的数目(algorithms\tEasy)\n#### 分析\n纯水题。\n#### 代码块\n```golang\nfunc countTriples(n int) int {\n\tans := 0\n\tfor a := 1; a <= n; a++ {\n\t\tfor b := a + 1; b <= n; b++ {\n\t\t\tc := int(math.Sqrt(float64(a*a + b*b)))\n\t\t\tif c > n {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif c*c == a*a+b*b {\n\t\t\t\tans++\n\t\t\t}\n\t\t}\n\t}\n\treturn ans * 2\n}\n```\n#### review\n想优化，但不是很顺利，也许要用二分查找才能进一步提升时效？\n\n## 220817\n### daily-1302.层数最深叶子节点的和(algorithms\tMedium)\n#### 分析\n遍历，然后捡到最终答案。\n#### 代码块\n```golang\nfunc deepestLeavesSum(root *TreeNode) int {\n\tmaxdeep := -1\n\tdeepsum := 0\n\tvar f func(now *TreeNode, deep int)\n\tf = func(now *TreeNode, deep int) {\n\t\tif now == nil {\n\t\t\treturn\n\t\t}\n\t\tif deep > maxdeep {\n\t\t\tmaxdeep = deep\n\t\t\tdeepsum = now.Val\n\t\t} else if deep == maxdeep {\n\t\t\tdeepsum += now.Val\n\t\t}\n\t\tf(now.Left, deep+1)\n\t\tf(now.Right, deep+1)\n\t}\n\tf(root, 0)\n\treturn deepsum\n}\n```\n#### review\n相对轻松，学一个go里函数赋值给变量的写法。\n## 220818\n### daily-1224.最大相等频率(algorithms\tHard)\n#### 分析\nhashmap统计所有元素出现次数，从后往前搜索，更新hashmap  \n如果一组数据满足条件，可以有如下结论：  \n组内所有数出现次数只有两种可能(记min和max)  \n有如下四种满足可能的方式:  \n1. min只出现一次且min=1（去掉这个数满足条件）\n2. max只出现一次且max-min=1（去掉max满足条件）\n3. 组内只有一种可能的数（去掉任意一个数满足条件）\n4. 组内所有的数只出现一次（去掉任意一个满足条件）\n#### 代码块\n```golang\nfunc maxEqualFreq(nums []int) int {\n\tvar check func() bool\n\thashmap := make(map[int]int)\n\tcheck = func() bool {\n\t\tmax := -1\n\t\tmaxtimes := -1\n\t\tmin := -1\n\t\tmintimes := -1\n\t\tfor _, v := range hashmap {\n\t\t\tif v == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif max == -1 {\n\t\t\t\tmax = v\n\t\t\t\tmaxtimes = 1\n\t\t\t} else if max == v {\n\t\t\t\tmaxtimes++\n\t\t\t} else if min == -1 {\n\t\t\t\tmin = v\n\t\t\t\tmintimes = 1\n\t\t\t} else if min == v {\n\t\t\t\tmintimes++\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\ttemp := 0\n\t\tif max < min {\n\t\t\ttemp = max\n\t\t\tmax = min\n\t\t\tmin = temp\n\t\t\ttemp = maxtimes\n\t\t\tmaxtimes = mintimes\n\t\t\tmintimes = temp\n\t\t}\n\t\tfmt.Println(max, maxtimes, min, mintimes)\n\t\tif min == -1 {\n\t\t\tif max == 1 {\n\t\t\t\treturn true\n\t\t\t} else if maxtimes == 1 {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\tif maxtimes == 1 && max-min == 1 {\n\t\t\treturn true\n\t\t}\n\t\tif mintimes == 1 && min == 1 {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\tfor _, v := range nums {\n\t\thashmap[v]++\n\t}\n\tfor i := len(nums) - 1; i >= 0; i-- {\n\t\tif check() {\n\t\t\treturn i + 1\n\t\t}\n\t\thashmap[nums[i]]--\n\t}\n\treturn 1\n}\n```\n#### review\n实际上复杂度处理不难，适当剪枝很轻松。主要是情况种类比较多，容易遗漏。(3,4情况都没有考虑到)\n\n## 220819\n### daily-1450.在既定时间做作业的学生人数(algorithms\tEasy)\n#### 分析\n水题。\n#### 代码块\n```golang\nfunc busyStudent(startTime []int, endTime []int, queryTime int) int {\n\tans := 0\n\tfor i, _ := range startTime {\n\t\tif startTime[i] <= queryTime && queryTime <= endTime[i] {\n\t\t\tans++\n\t\t}\n\t}\n\treturn ans\n}\n```\n#### review\n太水了反而不知道怎么说。差分数组和二分查找都有点意味不明。\n\n","slug":"Leetcode-22-8week1","published":1,"updated":"2022-08-19T15:24:48.024Z","_id":"cl70m6g5b00004lwr1bkkduq3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Aug-Week1\"><a href=\"#Aug-Week1\" class=\"headerlink\" title=\"Aug.Week1\"></a>Aug.Week1</h1><h2 id=\"220812\"><a href=\"#220812\" class=\"headerlink\" title=\"220812\"></a>220812</h2><h3 id=\"daily-1282-用户分组-algorithmsMedium\"><a href=\"#daily-1282-用户分组-algorithmsMedium\" class=\"headerlink\" title=\"daily-1282.用户分组(algorithms\tMedium)\"></a>daily-1282.用户分组(algorithms\tMedium)</h3><h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>基本的hashmap就可以完成，学习一下go的map，真好使。</p>\n<h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">groupThePeople</span><span class=\"params\">(groupSizes []<span class=\"keyword\">int</span>)</span> [][]<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tans := <span class=\"built_in\">make</span>([][]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tgroup := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> groupSizes &#123;</span><br><span class=\"line\">\t\tgroup[v] = <span class=\"built_in\">append</span>(group[v], i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(group[v]) == v &#123;</span><br><span class=\"line\">\t\t\tans = <span class=\"built_in\">append</span>(ans, group[v])</span><br><span class=\"line\">\t\t\tgroup[v] = []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review\"><a href=\"#review\" class=\"headerlink\" title=\"review\"></a>review</h4><h3 id=\"加餐-993-二叉树的堂兄弟节点-algorithmsEasy\"><a href=\"#加餐-993-二叉树的堂兄弟节点-algorithmsEasy\" class=\"headerlink\" title=\"加餐-993.二叉树的堂兄弟节点(algorithms\tEasy)\"></a>加餐-993.二叉树的堂兄弟节点(algorithms\tEasy)</h3><h4 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>一遍前序遍历，记录先找到的x或y的深度和父节点数据，找到另一个值时判断他们深度是否一致、父节点是否不一致。</p>\n<h4 id=\"代码块-1\"><a href=\"#代码块-1\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> kx, ky, xdeep, ydeep, ffather <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ans <span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isCousins</span><span class=\"params\">(root *TreeNode, x <span class=\"keyword\">int</span>, y <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\tffather = <span class=\"number\">-2</span></span><br><span class=\"line\">\tans = <span class=\"literal\">true</span></span><br><span class=\"line\">\tkx = x</span><br><span class=\"line\">\tky = y</span><br><span class=\"line\">\tergodic(root, <span class=\"number\">0</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ergodic</span><span class=\"params\">(now *TreeNode, deep <span class=\"keyword\">int</span>, tmp <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> now.Val == kx &#123;</span><br><span class=\"line\">\t\txdeep = deep</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ffather == <span class=\"number\">-2</span> &#123;</span><br><span class=\"line\">\t\t\tffather = tmp</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ffather == tmp || xdeep != ydeep &#123;</span><br><span class=\"line\">\t\t\t\tans = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> now.Val == ky &#123;</span><br><span class=\"line\">\t\tydeep = deep</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ffather == <span class=\"number\">-2</span> &#123;</span><br><span class=\"line\">\t\t\tffather = tmp</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ffather == tmp || xdeep != ydeep &#123;</span><br><span class=\"line\">\t\t\t\tans = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> now.Left != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tergodic(now.Left, deep+<span class=\"number\">1</span>, now.Val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> now.Right != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tergodic(now.Right, deep+<span class=\"number\">1</span>, now.Val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-1\"><a href=\"#review-1\" class=\"headerlink\" title=\"review\"></a>review</h4><p>为了取值方便开了全局变量并在递归中更改这个值，总觉得有一点微妙。官方题解给的匿名函数方法应该会好很多。这边数值不敏感就这样过了。</p>\n<h2 id=\"220813\"><a href=\"#220813\" class=\"headerlink\" title=\"220813\"></a>220813</h2><h3 id=\"daily-768-最多能完成排序的块-II-algorithmsHard\"><a href=\"#daily-768-最多能完成排序的块-II-algorithmsHard\" class=\"headerlink\" title=\"daily-768.最多能完成排序的块 II(algorithms\tHard)\"></a>daily-768.最多能完成排序的块 II(algorithms\tHard)</h3><h4 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>首先对原数组排序得到一个结果sorted<br>假如我们已经将0~k-1项分成了最多的块，从第k项起m项可以形成一个块的充要条件是构成arr[k:k+m]与sorted[k:k+m]的元素相同。<br>而由于选取块时是连续选取的，而sorted又是有序的，可以预见，如果从第k项起m项或n项可以形成一个满足条件的块(m&lt;n),那么一定可以拆成两个块[k:k+m]与[k+m:k+n]。<br>从而利用一张hashdelta的hashmap，比对两个数组差值，一旦满足delta&#x3D;&#x3D;0就立刻计数并切分。  </p>\n<h4 id=\"代码块-2\"><a href=\"#代码块-2\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;sort&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">maxChunksToSorted</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ans <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\thashdelta := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tsorted := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(arr))</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(sorted, arr)</span><br><span class=\"line\">\tsort.Ints(sorted)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\thashdelta[v]++</span><br><span class=\"line\">\t\thashdelta[sorted[i]]--</span><br><span class=\"line\">\t\ttrigger := <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k, _ := <span class=\"keyword\">range</span> hashdelta &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> hashdelta[k] != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\ttrigger = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> trigger == <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">\t\t\tans++</span><br><span class=\"line\">\t\t\thashdelta = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-2\"><a href=\"#review-2\" class=\"headerlink\" title=\"review\"></a>review</h4><p>效率将将能过，一开始在hashdelta&#x3D;&#x3D;0后切分但没有重置哈希表，存了很多多余的0数据影响了判断速度，增加重置后就过了。只能说girigiri。  </p>\n<h2 id=\"220814\"><a href=\"#220814\" class=\"headerlink\" title=\"220814\"></a>220814</h2><h3 id=\"daily-1422-分割字符串的最大得分-algorithmsEasy\"><a href=\"#daily-1422-分割字符串的最大得分-algorithmsEasy\" class=\"headerlink\" title=\"daily-1422.分割字符串的最大得分(algorithms\tEasy)\"></a>daily-1422.分割字符串的最大得分(algorithms\tEasy)</h3><h4 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>以全字符串为基准右子串，统计右子串的最高得分。<br>接着考虑左子串，左侧每引入一个0，总得分得1分，每引入一个1，总得分减1分。从而可以引入一个deltaleft记录左子串对总得分的最高贡献。</p>\n<h4 id=\"代码块-3\"><a href=\"#代码块-3\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">maxScore</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tleft := <span class=\"number\">0</span></span><br><span class=\"line\">\tright := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"built_in\">len</span> := <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">\tmax := <span class=\"number\">-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> s[i] == <span class=\"string\">&#x27;0&#x27;</span> &#123;</span><br><span class=\"line\">\t\t\tleft++</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tleft--</span><br><span class=\"line\">\t\t\tright++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> left &gt; max &amp;&amp; i != (<span class=\"built_in\">len</span><span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\tmax = left</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> right + max</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-3\"><a href=\"#review-3\" class=\"headerlink\" title=\"review\"></a>review</h4><p>注意题目有条件说是非空的子串，没注意到就被杀害了。初始定义时max:&#x3D;-1暗中排除了左空的最坏情况，单独处理右空的可能性就行。</p>\n<h2 id=\"220815\"><a href=\"#220815\" class=\"headerlink\" title=\"220815\"></a>220815</h2><h3 id=\"daily-641-设计循环双端队列-algorithmsMedium\"><a href=\"#daily-641-设计循环双端队列-algorithmsMedium\" class=\"headerlink\" title=\"daily-641.设计循环双端队列(algorithms\tMedium)\"></a>daily-641.设计循环双端队列(algorithms\tMedium)</h3><h4 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>蛮常规的但我确实不太会的数据结构.jpg  </p>\n<h4 id=\"代码块-4\"><a href=\"#代码块-4\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyCircularDeque <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tcontent     []<span class=\"keyword\">int</span></span><br><span class=\"line\">\tfront, rear <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Constructor</span><span class=\"params\">(k <span class=\"keyword\">int</span>)</span> <span class=\"title\">MyCircularDeque</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> MyCircularDeque&#123;content: <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, k+<span class=\"number\">1</span>), front: <span class=\"number\">0</span>, rear: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">InsertFront</span><span class=\"params\">(value <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> this.IsFull() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthis.front = (this.front - <span class=\"number\">1</span> + <span class=\"built_in\">len</span>(this.content)) % <span class=\"built_in\">len</span>(this.content)</span><br><span class=\"line\">\tthis.content[this.front] = value</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">InsertLast</span><span class=\"params\">(value <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> this.IsFull() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthis.content[this.rear] = value</span><br><span class=\"line\">\tthis.rear = (this.rear + <span class=\"number\">1</span>) % <span class=\"built_in\">len</span>(this.content)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">DeleteFront</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> this.IsEmpty() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthis.front = (this.front + <span class=\"number\">1</span>) % <span class=\"built_in\">len</span>(this.content)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">DeleteLast</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> this.IsEmpty() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthis.rear = (this.rear - <span class=\"number\">1</span> + <span class=\"built_in\">len</span>(this.content)) % <span class=\"built_in\">len</span>(this.content)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">GetFront</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> this.IsEmpty() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> this.content[this.front]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">GetRear</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> this.IsEmpty() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> this.content[(this.rear<span class=\"number\">-1</span>+<span class=\"built_in\">len</span>(this.content))%<span class=\"built_in\">len</span>(this.content)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">IsEmpty</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> this.front == this.rear</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">IsFull</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (this.rear+<span class=\"number\">1</span>)%<span class=\"built_in\">len</span>(this.content) == this.front</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-4\"><a href=\"#review-4\" class=\"headerlink\" title=\"review\"></a>review</h4><p>学习一个struct的赋值写法。<br>然后就是整个双端队列的理解。本来想直接用append加元素删前后，后来意识到好像会有容量问题，写回了比较标准的数组处理法。但看了看题解应该还是可以做的，但append不能实现头部插入，需要先反转再插入再反转。</p>\n<h2 id=\"220816\"><a href=\"#220816\" class=\"headerlink\" title=\"220816\"></a>220816</h2><h3 id=\"daily-1656-设计有序流-algorithmsEasy\"><a href=\"#daily-1656-设计有序流-algorithmsEasy\" class=\"headerlink\" title=\"daily-1656.设计有序流(algorithms\tEasy)\"></a>daily-1656.设计有序流(algorithms\tEasy)</h3><h4 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>设计题，偏水，按题目要求写就是。</p>\n<h4 id=\"代码块-5\"><a href=\"#代码块-5\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> OrderedStream <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\telements []<span class=\"keyword\">string</span></span><br><span class=\"line\">\tptr      <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Constructor</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">OrderedStream</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OrderedStream&#123;elements: <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, n+<span class=\"number\">1</span>), ptr: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *OrderedStream)</span> <span class=\"title\">Insert</span><span class=\"params\">(idKey <span class=\"keyword\">int</span>, value <span class=\"keyword\">string</span>)</span> []<span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tans := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tthis.elements[idKey] = value</span><br><span class=\"line\">\ti := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i = this.ptr; i &lt; <span class=\"built_in\">len</span>(this.elements); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(this.elements[i]) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tans = <span class=\"built_in\">append</span>(ans, this.elements[this.ptr:i]...)</span><br><span class=\"line\">\tthis.ptr = i</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-5\"><a href=\"#review-5\" class=\"headerlink\" title=\"review\"></a>review</h4><h3 id=\"daily-1925-统计平方和三元组的数目-algorithmsEasy\"><a href=\"#daily-1925-统计平方和三元组的数目-algorithmsEasy\" class=\"headerlink\" title=\"daily-1925.统计平方和三元组的数目(algorithms\tEasy)\"></a>daily-1925.统计平方和三元组的数目(algorithms\tEasy)</h3><h4 id=\"分析-6\"><a href=\"#分析-6\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>纯水题。</p>\n<h4 id=\"代码块-6\"><a href=\"#代码块-6\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">countTriples</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tans := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> a := <span class=\"number\">1</span>; a &lt;= n; a++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> b := a + <span class=\"number\">1</span>; b &lt;= n; b++ &#123;</span><br><span class=\"line\">\t\t\tc := <span class=\"keyword\">int</span>(math.Sqrt(<span class=\"keyword\">float64</span>(a*a + b*b)))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> c &gt; n &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> c*c == a*a+b*b &#123;</span><br><span class=\"line\">\t\t\t\tans++</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-6\"><a href=\"#review-6\" class=\"headerlink\" title=\"review\"></a>review</h4><p>想优化，但不是很顺利，也许要用二分查找才能进一步提升时效？</p>\n<h2 id=\"220817\"><a href=\"#220817\" class=\"headerlink\" title=\"220817\"></a>220817</h2><h3 id=\"daily-1302-层数最深叶子节点的和-algorithmsMedium\"><a href=\"#daily-1302-层数最深叶子节点的和-algorithmsMedium\" class=\"headerlink\" title=\"daily-1302.层数最深叶子节点的和(algorithms\tMedium)\"></a>daily-1302.层数最深叶子节点的和(algorithms\tMedium)</h3><h4 id=\"分析-7\"><a href=\"#分析-7\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>遍历，然后捡到最终答案。</p>\n<h4 id=\"代码块-7\"><a href=\"#代码块-7\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deepestLeavesSum</span><span class=\"params\">(root *TreeNode)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tmaxdeep := <span class=\"number\">-1</span></span><br><span class=\"line\">\tdeepsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(now *TreeNode, deep <span class=\"keyword\">int</span>)</span></span></span><br><span class=\"line\">\tf = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(now *TreeNode, deep <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> now == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> deep &gt; maxdeep &#123;</span><br><span class=\"line\">\t\t\tmaxdeep = deep</span><br><span class=\"line\">\t\t\tdeepsum = now.Val</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> deep == maxdeep &#123;</span><br><span class=\"line\">\t\t\tdeepsum += now.Val</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tf(now.Left, deep+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\tf(now.Right, deep+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf(root, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> deepsum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-7\"><a href=\"#review-7\" class=\"headerlink\" title=\"review\"></a>review</h4><p>相对轻松，学一个go里函数赋值给变量的写法。</p>\n<h2 id=\"220818\"><a href=\"#220818\" class=\"headerlink\" title=\"220818\"></a>220818</h2><h3 id=\"daily-1224-最大相等频率-algorithmsHard\"><a href=\"#daily-1224-最大相等频率-algorithmsHard\" class=\"headerlink\" title=\"daily-1224.最大相等频率(algorithms\tHard)\"></a>daily-1224.最大相等频率(algorithms\tHard)</h3><h4 id=\"分析-8\"><a href=\"#分析-8\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>hashmap统计所有元素出现次数，从后往前搜索，更新hashmap<br>如果一组数据满足条件，可以有如下结论：<br>组内所有数出现次数只有两种可能(记min和max)<br>有如下四种满足可能的方式:  </p>\n<ol>\n<li>min只出现一次且min&#x3D;1（去掉这个数满足条件）</li>\n<li>max只出现一次且max-min&#x3D;1（去掉max满足条件）</li>\n<li>组内只有一种可能的数（去掉任意一个数满足条件）</li>\n<li>组内所有的数只出现一次（去掉任意一个满足条件）<h4 id=\"代码块-8\"><a href=\"#代码块-8\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">maxEqualFreq</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> check <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span></span><br><span class=\"line\">\thashmap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tcheck = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t\tmax := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\tmaxtimes := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\tmin := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\tmintimes := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> hashmap &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> v == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> max == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t\t\tmax = v</span><br><span class=\"line\">\t\t\t\tmaxtimes = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> max == v &#123;</span><br><span class=\"line\">\t\t\t\tmaxtimes++</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> min == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t\t\tmin = v</span><br><span class=\"line\">\t\t\t\tmintimes = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> min == v &#123;</span><br><span class=\"line\">\t\t\t\tmintimes++</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttemp := <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> max &lt; min &#123;</span><br><span class=\"line\">\t\t\ttemp = max</span><br><span class=\"line\">\t\t\tmax = min</span><br><span class=\"line\">\t\t\tmin = temp</span><br><span class=\"line\">\t\t\ttemp = maxtimes</span><br><span class=\"line\">\t\t\tmaxtimes = mintimes</span><br><span class=\"line\">\t\t\tmintimes = temp</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(max, maxtimes, min, mintimes)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> min == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> max == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> maxtimes == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> maxtimes == <span class=\"number\">1</span> &amp;&amp; max-min == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> mintimes == <span class=\"number\">1</span> &amp;&amp; min == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">\t\thashmap[v]++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i-- &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> check() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\thashmap[nums[i]]--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-8\"><a href=\"#review-8\" class=\"headerlink\" title=\"review\"></a>review</h4>实际上复杂度处理不难，适当剪枝很轻松。主要是情况种类比较多，容易遗漏。(3,4情况都没有考虑到)</li>\n</ol>\n<h2 id=\"220819\"><a href=\"#220819\" class=\"headerlink\" title=\"220819\"></a>220819</h2><h3 id=\"daily-1450-在既定时间做作业的学生人数-algorithmsEasy\"><a href=\"#daily-1450-在既定时间做作业的学生人数-algorithmsEasy\" class=\"headerlink\" title=\"daily-1450.在既定时间做作业的学生人数(algorithms\tEasy)\"></a>daily-1450.在既定时间做作业的学生人数(algorithms\tEasy)</h3><h4 id=\"分析-9\"><a href=\"#分析-9\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>水题。</p>\n<h4 id=\"代码块-9\"><a href=\"#代码块-9\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">busyStudent</span><span class=\"params\">(startTime []<span class=\"keyword\">int</span>, endTime []<span class=\"keyword\">int</span>, queryTime <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tans := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> startTime &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> startTime[i] &lt;= queryTime &amp;&amp; queryTime &lt;= endTime[i] &#123;</span><br><span class=\"line\">\t\t\tans++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-9\"><a href=\"#review-9\" class=\"headerlink\" title=\"review\"></a>review</h4><p>太水了反而不知道怎么说。差分数组和二分查找都有点意味不明。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Aug-Week1\"><a href=\"#Aug-Week1\" class=\"headerlink\" title=\"Aug.Week1\"></a>Aug.Week1</h1><h2 id=\"220812\"><a href=\"#220812\" class=\"headerlink\" title=\"220812\"></a>220812</h2><h3 id=\"daily-1282-用户分组-algorithmsMedium\"><a href=\"#daily-1282-用户分组-algorithmsMedium\" class=\"headerlink\" title=\"daily-1282.用户分组(algorithms\tMedium)\"></a>daily-1282.用户分组(algorithms\tMedium)</h3><h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>基本的hashmap就可以完成，学习一下go的map，真好使。</p>\n<h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">groupThePeople</span><span class=\"params\">(groupSizes []<span class=\"keyword\">int</span>)</span> [][]<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tans := <span class=\"built_in\">make</span>([][]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tgroup := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> groupSizes &#123;</span><br><span class=\"line\">\t\tgroup[v] = <span class=\"built_in\">append</span>(group[v], i)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(group[v]) == v &#123;</span><br><span class=\"line\">\t\t\tans = <span class=\"built_in\">append</span>(ans, group[v])</span><br><span class=\"line\">\t\t\tgroup[v] = []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review\"><a href=\"#review\" class=\"headerlink\" title=\"review\"></a>review</h4><h3 id=\"加餐-993-二叉树的堂兄弟节点-algorithmsEasy\"><a href=\"#加餐-993-二叉树的堂兄弟节点-algorithmsEasy\" class=\"headerlink\" title=\"加餐-993.二叉树的堂兄弟节点(algorithms\tEasy)\"></a>加餐-993.二叉树的堂兄弟节点(algorithms\tEasy)</h3><h4 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>一遍前序遍历，记录先找到的x或y的深度和父节点数据，找到另一个值时判断他们深度是否一致、父节点是否不一致。</p>\n<h4 id=\"代码块-1\"><a href=\"#代码块-1\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> kx, ky, xdeep, ydeep, ffather <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ans <span class=\"keyword\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isCousins</span><span class=\"params\">(root *TreeNode, x <span class=\"keyword\">int</span>, y <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\tffather = <span class=\"number\">-2</span></span><br><span class=\"line\">\tans = <span class=\"literal\">true</span></span><br><span class=\"line\">\tkx = x</span><br><span class=\"line\">\tky = y</span><br><span class=\"line\">\tergodic(root, <span class=\"number\">0</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ergodic</span><span class=\"params\">(now *TreeNode, deep <span class=\"keyword\">int</span>, tmp <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> now.Val == kx &#123;</span><br><span class=\"line\">\t\txdeep = deep</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ffather == <span class=\"number\">-2</span> &#123;</span><br><span class=\"line\">\t\t\tffather = tmp</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ffather == tmp || xdeep != ydeep &#123;</span><br><span class=\"line\">\t\t\t\tans = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> now.Val == ky &#123;</span><br><span class=\"line\">\t\tydeep = deep</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ffather == <span class=\"number\">-2</span> &#123;</span><br><span class=\"line\">\t\t\tffather = tmp</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ffather == tmp || xdeep != ydeep &#123;</span><br><span class=\"line\">\t\t\t\tans = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> now.Left != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tergodic(now.Left, deep+<span class=\"number\">1</span>, now.Val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> now.Right != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tergodic(now.Right, deep+<span class=\"number\">1</span>, now.Val)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-1\"><a href=\"#review-1\" class=\"headerlink\" title=\"review\"></a>review</h4><p>为了取值方便开了全局变量并在递归中更改这个值，总觉得有一点微妙。官方题解给的匿名函数方法应该会好很多。这边数值不敏感就这样过了。</p>\n<h2 id=\"220813\"><a href=\"#220813\" class=\"headerlink\" title=\"220813\"></a>220813</h2><h3 id=\"daily-768-最多能完成排序的块-II-algorithmsHard\"><a href=\"#daily-768-最多能完成排序的块-II-algorithmsHard\" class=\"headerlink\" title=\"daily-768.最多能完成排序的块 II(algorithms\tHard)\"></a>daily-768.最多能完成排序的块 II(algorithms\tHard)</h3><h4 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>首先对原数组排序得到一个结果sorted<br>假如我们已经将0~k-1项分成了最多的块，从第k项起m项可以形成一个块的充要条件是构成arr[k:k+m]与sorted[k:k+m]的元素相同。<br>而由于选取块时是连续选取的，而sorted又是有序的，可以预见，如果从第k项起m项或n项可以形成一个满足条件的块(m&lt;n),那么一定可以拆成两个块[k:k+m]与[k+m:k+n]。<br>从而利用一张hashdelta的hashmap，比对两个数组差值，一旦满足delta&#x3D;&#x3D;0就立刻计数并切分。  </p>\n<h4 id=\"代码块-2\"><a href=\"#代码块-2\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;sort&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">maxChunksToSorted</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ans <span class=\"keyword\">int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\thashdelta := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tsorted := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>(arr))</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(sorted, arr)</span><br><span class=\"line\">\tsort.Ints(sorted)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> arr &#123;</span><br><span class=\"line\">\t\thashdelta[v]++</span><br><span class=\"line\">\t\thashdelta[sorted[i]]--</span><br><span class=\"line\">\t\ttrigger := <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k, _ := <span class=\"keyword\">range</span> hashdelta &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> hashdelta[k] != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\ttrigger = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> trigger == <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">\t\t\tans++</span><br><span class=\"line\">\t\t\thashdelta = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-2\"><a href=\"#review-2\" class=\"headerlink\" title=\"review\"></a>review</h4><p>效率将将能过，一开始在hashdelta&#x3D;&#x3D;0后切分但没有重置哈希表，存了很多多余的0数据影响了判断速度，增加重置后就过了。只能说girigiri。  </p>\n<h2 id=\"220814\"><a href=\"#220814\" class=\"headerlink\" title=\"220814\"></a>220814</h2><h3 id=\"daily-1422-分割字符串的最大得分-algorithmsEasy\"><a href=\"#daily-1422-分割字符串的最大得分-algorithmsEasy\" class=\"headerlink\" title=\"daily-1422.分割字符串的最大得分(algorithms\tEasy)\"></a>daily-1422.分割字符串的最大得分(algorithms\tEasy)</h3><h4 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>以全字符串为基准右子串，统计右子串的最高得分。<br>接着考虑左子串，左侧每引入一个0，总得分得1分，每引入一个1，总得分减1分。从而可以引入一个deltaleft记录左子串对总得分的最高贡献。</p>\n<h4 id=\"代码块-3\"><a href=\"#代码块-3\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">maxScore</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tleft := <span class=\"number\">0</span></span><br><span class=\"line\">\tright := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"built_in\">len</span> := <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">\tmax := <span class=\"number\">-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> s[i] == <span class=\"string\">&#x27;0&#x27;</span> &#123;</span><br><span class=\"line\">\t\t\tleft++</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tleft--</span><br><span class=\"line\">\t\t\tright++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> left &gt; max &amp;&amp; i != (<span class=\"built_in\">len</span><span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t\tmax = left</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> right + max</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-3\"><a href=\"#review-3\" class=\"headerlink\" title=\"review\"></a>review</h4><p>注意题目有条件说是非空的子串，没注意到就被杀害了。初始定义时max:&#x3D;-1暗中排除了左空的最坏情况，单独处理右空的可能性就行。</p>\n<h2 id=\"220815\"><a href=\"#220815\" class=\"headerlink\" title=\"220815\"></a>220815</h2><h3 id=\"daily-641-设计循环双端队列-algorithmsMedium\"><a href=\"#daily-641-设计循环双端队列-algorithmsMedium\" class=\"headerlink\" title=\"daily-641.设计循环双端队列(algorithms\tMedium)\"></a>daily-641.设计循环双端队列(algorithms\tMedium)</h3><h4 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>蛮常规的但我确实不太会的数据结构.jpg  </p>\n<h4 id=\"代码块-4\"><a href=\"#代码块-4\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyCircularDeque <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tcontent     []<span class=\"keyword\">int</span></span><br><span class=\"line\">\tfront, rear <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Constructor</span><span class=\"params\">(k <span class=\"keyword\">int</span>)</span> <span class=\"title\">MyCircularDeque</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> MyCircularDeque&#123;content: <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, k+<span class=\"number\">1</span>), front: <span class=\"number\">0</span>, rear: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">InsertFront</span><span class=\"params\">(value <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> this.IsFull() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthis.front = (this.front - <span class=\"number\">1</span> + <span class=\"built_in\">len</span>(this.content)) % <span class=\"built_in\">len</span>(this.content)</span><br><span class=\"line\">\tthis.content[this.front] = value</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">InsertLast</span><span class=\"params\">(value <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> this.IsFull() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthis.content[this.rear] = value</span><br><span class=\"line\">\tthis.rear = (this.rear + <span class=\"number\">1</span>) % <span class=\"built_in\">len</span>(this.content)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">DeleteFront</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> this.IsEmpty() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthis.front = (this.front + <span class=\"number\">1</span>) % <span class=\"built_in\">len</span>(this.content)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">DeleteLast</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> this.IsEmpty() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tthis.rear = (this.rear - <span class=\"number\">1</span> + <span class=\"built_in\">len</span>(this.content)) % <span class=\"built_in\">len</span>(this.content)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">GetFront</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> this.IsEmpty() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> this.content[this.front]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">GetRear</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> this.IsEmpty() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> this.content[(this.rear<span class=\"number\">-1</span>+<span class=\"built_in\">len</span>(this.content))%<span class=\"built_in\">len</span>(this.content)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">IsEmpty</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> this.front == this.rear</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *MyCircularDeque)</span> <span class=\"title\">IsFull</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (this.rear+<span class=\"number\">1</span>)%<span class=\"built_in\">len</span>(this.content) == this.front</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-4\"><a href=\"#review-4\" class=\"headerlink\" title=\"review\"></a>review</h4><p>学习一个struct的赋值写法。<br>然后就是整个双端队列的理解。本来想直接用append加元素删前后，后来意识到好像会有容量问题，写回了比较标准的数组处理法。但看了看题解应该还是可以做的，但append不能实现头部插入，需要先反转再插入再反转。</p>\n<h2 id=\"220816\"><a href=\"#220816\" class=\"headerlink\" title=\"220816\"></a>220816</h2><h3 id=\"daily-1656-设计有序流-algorithmsEasy\"><a href=\"#daily-1656-设计有序流-algorithmsEasy\" class=\"headerlink\" title=\"daily-1656.设计有序流(algorithms\tEasy)\"></a>daily-1656.设计有序流(algorithms\tEasy)</h3><h4 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>设计题，偏水，按题目要求写就是。</p>\n<h4 id=\"代码块-5\"><a href=\"#代码块-5\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> OrderedStream <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\telements []<span class=\"keyword\">string</span></span><br><span class=\"line\">\tptr      <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Constructor</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">OrderedStream</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> OrderedStream&#123;elements: <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, n+<span class=\"number\">1</span>), ptr: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *OrderedStream)</span> <span class=\"title\">Insert</span><span class=\"params\">(idKey <span class=\"keyword\">int</span>, value <span class=\"keyword\">string</span>)</span> []<span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tans := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tthis.elements[idKey] = value</span><br><span class=\"line\">\ti := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i = this.ptr; i &lt; <span class=\"built_in\">len</span>(this.elements); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(this.elements[i]) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tans = <span class=\"built_in\">append</span>(ans, this.elements[this.ptr:i]...)</span><br><span class=\"line\">\tthis.ptr = i</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-5\"><a href=\"#review-5\" class=\"headerlink\" title=\"review\"></a>review</h4><h3 id=\"daily-1925-统计平方和三元组的数目-algorithmsEasy\"><a href=\"#daily-1925-统计平方和三元组的数目-algorithmsEasy\" class=\"headerlink\" title=\"daily-1925.统计平方和三元组的数目(algorithms\tEasy)\"></a>daily-1925.统计平方和三元组的数目(algorithms\tEasy)</h3><h4 id=\"分析-6\"><a href=\"#分析-6\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>纯水题。</p>\n<h4 id=\"代码块-6\"><a href=\"#代码块-6\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">countTriples</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tans := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> a := <span class=\"number\">1</span>; a &lt;= n; a++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> b := a + <span class=\"number\">1</span>; b &lt;= n; b++ &#123;</span><br><span class=\"line\">\t\t\tc := <span class=\"keyword\">int</span>(math.Sqrt(<span class=\"keyword\">float64</span>(a*a + b*b)))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> c &gt; n &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> c*c == a*a+b*b &#123;</span><br><span class=\"line\">\t\t\t\tans++</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-6\"><a href=\"#review-6\" class=\"headerlink\" title=\"review\"></a>review</h4><p>想优化，但不是很顺利，也许要用二分查找才能进一步提升时效？</p>\n<h2 id=\"220817\"><a href=\"#220817\" class=\"headerlink\" title=\"220817\"></a>220817</h2><h3 id=\"daily-1302-层数最深叶子节点的和-algorithmsMedium\"><a href=\"#daily-1302-层数最深叶子节点的和-algorithmsMedium\" class=\"headerlink\" title=\"daily-1302.层数最深叶子节点的和(algorithms\tMedium)\"></a>daily-1302.层数最深叶子节点的和(algorithms\tMedium)</h3><h4 id=\"分析-7\"><a href=\"#分析-7\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>遍历，然后捡到最终答案。</p>\n<h4 id=\"代码块-7\"><a href=\"#代码块-7\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deepestLeavesSum</span><span class=\"params\">(root *TreeNode)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tmaxdeep := <span class=\"number\">-1</span></span><br><span class=\"line\">\tdeepsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(now *TreeNode, deep <span class=\"keyword\">int</span>)</span></span></span><br><span class=\"line\">\tf = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(now *TreeNode, deep <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> now == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> deep &gt; maxdeep &#123;</span><br><span class=\"line\">\t\t\tmaxdeep = deep</span><br><span class=\"line\">\t\t\tdeepsum = now.Val</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> deep == maxdeep &#123;</span><br><span class=\"line\">\t\t\tdeepsum += now.Val</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tf(now.Left, deep+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\tf(now.Right, deep+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf(root, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> deepsum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-7\"><a href=\"#review-7\" class=\"headerlink\" title=\"review\"></a>review</h4><p>相对轻松，学一个go里函数赋值给变量的写法。</p>\n<h2 id=\"220818\"><a href=\"#220818\" class=\"headerlink\" title=\"220818\"></a>220818</h2><h3 id=\"daily-1224-最大相等频率-algorithmsHard\"><a href=\"#daily-1224-最大相等频率-algorithmsHard\" class=\"headerlink\" title=\"daily-1224.最大相等频率(algorithms\tHard)\"></a>daily-1224.最大相等频率(algorithms\tHard)</h3><h4 id=\"分析-8\"><a href=\"#分析-8\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>hashmap统计所有元素出现次数，从后往前搜索，更新hashmap<br>如果一组数据满足条件，可以有如下结论：<br>组内所有数出现次数只有两种可能(记min和max)<br>有如下四种满足可能的方式:  </p>\n<ol>\n<li>min只出现一次且min&#x3D;1（去掉这个数满足条件）</li>\n<li>max只出现一次且max-min&#x3D;1（去掉max满足条件）</li>\n<li>组内只有一种可能的数（去掉任意一个数满足条件）</li>\n<li>组内所有的数只出现一次（去掉任意一个满足条件）<h4 id=\"代码块-8\"><a href=\"#代码块-8\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">maxEqualFreq</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> check <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span></span><br><span class=\"line\">\thashmap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tcheck = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t\tmax := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\tmaxtimes := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\tmin := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\tmintimes := <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> hashmap &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> v == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> max == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t\t\tmax = v</span><br><span class=\"line\">\t\t\t\tmaxtimes = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> max == v &#123;</span><br><span class=\"line\">\t\t\t\tmaxtimes++</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> min == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t\t\tmin = v</span><br><span class=\"line\">\t\t\t\tmintimes = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> min == v &#123;</span><br><span class=\"line\">\t\t\t\tmintimes++</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttemp := <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> max &lt; min &#123;</span><br><span class=\"line\">\t\t\ttemp = max</span><br><span class=\"line\">\t\t\tmax = min</span><br><span class=\"line\">\t\t\tmin = temp</span><br><span class=\"line\">\t\t\ttemp = maxtimes</span><br><span class=\"line\">\t\t\tmaxtimes = mintimes</span><br><span class=\"line\">\t\t\tmintimes = temp</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Println(max, maxtimes, min, mintimes)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> min == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> max == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> maxtimes == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> maxtimes == <span class=\"number\">1</span> &amp;&amp; max-min == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> mintimes == <span class=\"number\">1</span> &amp;&amp; min == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">\t\thashmap[v]++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i-- &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> check() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\thashmap[nums[i]]--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-8\"><a href=\"#review-8\" class=\"headerlink\" title=\"review\"></a>review</h4>实际上复杂度处理不难，适当剪枝很轻松。主要是情况种类比较多，容易遗漏。(3,4情况都没有考虑到)</li>\n</ol>\n<h2 id=\"220819\"><a href=\"#220819\" class=\"headerlink\" title=\"220819\"></a>220819</h2><h3 id=\"daily-1450-在既定时间做作业的学生人数-algorithmsEasy\"><a href=\"#daily-1450-在既定时间做作业的学生人数-algorithmsEasy\" class=\"headerlink\" title=\"daily-1450.在既定时间做作业的学生人数(algorithms\tEasy)\"></a>daily-1450.在既定时间做作业的学生人数(algorithms\tEasy)</h3><h4 id=\"分析-9\"><a href=\"#分析-9\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>水题。</p>\n<h4 id=\"代码块-9\"><a href=\"#代码块-9\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">busyStudent</span><span class=\"params\">(startTime []<span class=\"keyword\">int</span>, endTime []<span class=\"keyword\">int</span>, queryTime <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tans := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> startTime &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> startTime[i] &lt;= queryTime &amp;&amp; queryTime &lt;= endTime[i] &#123;</span><br><span class=\"line\">\t\t\tans++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-9\"><a href=\"#review-9\" class=\"headerlink\" title=\"review\"></a>review</h4><p>太水了反而不知道怎么说。差分数组和二分查找都有点意味不明。</p>\n"},{"title":"Leetcode 22.8week2","date":"2022-08-26T11:41:34.000Z","cover":"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/Fa57u5sacAEYmUC.jpg/1080","_content":"# Aug.Week2\n## 220820\n### daily-654.最大二叉树(algorithms\tMedium)\n#### 分析\n在数组里找最大的，然后取值，拆分数组左右递归再找最大的。\n#### 代码块\n```golang\nfunc constructMaximumBinaryTree(nums []int) *TreeNode {\n\tif len(nums) == 0 {\n\t\treturn nil\n\t}\n\tbest := 0\n\tfor i, num := range nums {\n\t\tif num > nums[best] {\n\t\t\tbest = i\n\t\t}\n\t}\n\treturn &TreeNode{nums[best], constructMaximumBinaryTree(nums[:best]), constructMaximumBinaryTree(nums[best+1:])}\n}\n```\n#### review\nstruct的递归构造还是有点问题，官方这个写法要好看很多。\n\n## 220821\n### daily-1455.检查单词是否为句中其他单词的前缀(algorithms\tEasy)\n#### 分析\n简单字符串处理，对着查就完了。\n#### 代码块\n```golang\nfunc isPrefixOfWord(sentence string, searchWord string) int {\n\tans := -1\n\twordnow := 1\n\tright := true\n\tfor j := 0; j < len(searchWord); j++ {\n\t\tif j < len(sentence) && searchWord[j] != sentence[j] {\n\t\t\tright = false\n\t\t}\n\t}\n\tif right == true {\n\t\tans = wordnow\n\t\treturn ans\n\t}\n\tfor i := 0; i < len(sentence); i++ {\n\t\tif sentence[i] == ' ' {\n\t\t\twordnow++\n\t\t\tright = true\n\t\t\tfor j := 0; j < len(searchWord); j++ {\n\t\t\t\tif i+j+1 < len(sentence) && searchWord[j] != sentence[i+j+1] {\n\t\t\t\t\tright = false\n\t\t\t\t}\n\t\t\t}\n\t\t\tif right == true {\n\t\t\t\tans = wordnow\n\t\t\t\treturn ans\n\t\t\t}\n\t\t}\n\t}\n\treturn ans\n}\n\n```\n#### review\n没啥内容。\n\n\n## 220822\n### daily-655.输出二叉树(algorithms\tMedium)\n#### 分析\n虽然是medium但其实只要跟着他的写法写，规则都定好了。\n#### 代码块\n```golang\nfunc depth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tdleft := depth(root.Left) + 1\n\tdright := depth(root.Right) + 1\n\tif dleft > dright {\n\t\treturn dleft\n\t} else {\n\t\treturn dright\n\t}\n}\n\nfunc printTree(root *TreeNode) [][]string {\n\theight := depth(root) - 1\n\tm := height + 1\n\tn := 1<<(height+1) - 1\n\tans := make([][]string, m)\n\tfor i := 0; i < m; i++ {\n\t\tans[i] = make([]string, n)\n\t}\n\tvar f func(root *TreeNode, r int, c int)\n\tf = func(root *TreeNode, r int, c int) {\n\t\tif root == nil {\n\t\t\treturn\n\t\t}\n\t\tans[r][c] = strconv.Itoa(root.Val)\n\t\tif root.Left != nil {\n\t\t\tf(root.Left, r+1, c-(1<<(height-r-1)))\n\t\t}\n\t\tif root.Right != nil {\n\t\t\tf(root.Right, r+1, c+(1<<(height-r-1)))\n\t\t}\n\t}\n\tf(root, 0, (n-1)/2)\n\treturn ans\n}\n```\n#### review\n要习惯$2^x$的$1<<x$写法\n\n## 220823\n### daily-782.变为棋盘(algorithms\tHard)\n#### 分析\n这周的hard，虽然想到了应该是比较数学的，但在具体算法上止步到了棋盘初始检验和行变列不变列变行不变，卡在最后一步统计上了。\n#### 代码块\n```golang\nfunc getMoves(mask uint, count, n int) int {\n\tones := bits.OnesCount(mask)\n\tif n&1 > 0 {\n\t\t// 如果 n 为奇数，则每一行中 1 与 0 的数目相差为 1，且满足相邻行交替\n\t\tif abs(n-2*ones) != 1 || abs(n-2*count) != 1 {\n\t\t\treturn -1\n\t\t}\n\t\tif ones == n>>1 {\n\t\t\t// 偶数位变为 1 的最小交换次数\n\t\t\treturn n/2 - bits.OnesCount(mask&0xAAAAAAAA)\n\t\t} else {\n\t\t\t// 奇数位变为 1 的最小交换次数\n\t\t\treturn (n+1)/2 - bits.OnesCount(mask&0x55555555)\n\t\t}\n\t} else {\n\t\t// 如果 n 为偶数，则每一行中 1 与 0 的数目相等，且满足相邻行交替\n\t\tif ones != n>>1 || count != n>>1 {\n\t\t\treturn -1\n\t\t}\n\t\t// 偶数位变为 1 的最小交换次数\n\t\tcount0 := n/2 - bits.OnesCount(mask&0xAAAAAAAA)\n\t\t// 奇数位变为 1 的最小交换次数\n\t\tcount1 := n/2 - bits.OnesCount(mask&0x55555555)\n\t\treturn min(count0, count1)\n\t}\n}\n\nfunc movesToChessboard(board [][]int) int {\n\tn := len(board)\n\t// 棋盘的第一行与第一列\n\trowMask, colMask := 0, 0\n\tfor i := 0; i < n; i++ {\n\t\trowMask |= board[0][i] << i\n\t\tcolMask |= board[i][0] << i\n\t}\n\treverseRowMask := 1<<n - 1 ^ rowMask\n\treverseColMask := 1<<n - 1 ^ colMask\n\trowCnt, colCnt := 0, 0\n\tfor i := 0; i < n; i++ {\n\t\tcurrRowMask, currColMask := 0, 0\n\t\tfor j := 0; j < n; j++ {\n\t\t\tcurrRowMask |= board[i][j] << j\n\t\t\tcurrColMask |= board[j][i] << j\n\t\t}\n\t\tif currRowMask != rowMask && currRowMask != reverseRowMask || // 检测每一行的状态是否合法\n\t\t\tcurrColMask != colMask && currColMask != reverseColMask { // 检测每一列的状态是否合法\n\t\t\treturn -1\n\t\t}\n\t\tif currRowMask == rowMask {\n\t\t\trowCnt++ // 记录与第一行相同的行数\n\t\t}\n\t\tif currColMask == colMask {\n\t\t\tcolCnt++ // 记录与第一列相同的列数\n\t\t}\n\t}\n\trowMoves := getMoves(uint(rowMask), rowCnt, n)\n\tcolMoves := getMoves(uint(colMask), colCnt, n)\n\tif rowMoves == -1 || colMoves == -1 {\n\t\treturn -1\n\t}\n\treturn rowMoves + colMoves\n}\n\nfunc abs(x int) int {\n\tif x < 0 {\n\t\treturn -x\n\t}\n\treturn x\n}\n\nfunc min(a, b int) int {\n\tif a > b {\n\t\treturn b\n\t}\n\treturn a\n}\n```\n#### review\n掩码的写法很不错，自己位运算用的还是少太多了。\n\n## 220824\n### daily-1460.通过翻转子数组使两个数组相等(algorithms\tEasy)\n#### 分析\n不要求求最短，一张hashmap写完。\n#### 代码块\n```golang\nfunc canBeEqual(target []int, arr []int) bool {\n\thashmap := make(map[int]int)\n\tfor i := 0; i < len(target); i++ {\n\t\thashmap[target[i]]++\n\t\thashmap[arr[i]]--\n\t}\n\tfor key, _ := range hashmap {\n\t\tif hashmap[key] != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n```\n#### review\n偏水。\n## 220825\n### daily-658.找到-k-个最接近的元素(algorithms\tMedium)\n#### 分析\n题给的数组排好序了，直接跟着条件搜就行。\n#### 代码块\n```golang\nfunc findClosestElements(arr []int, k int, x int) []int {\n\tans := make([]int, k)\n\tans = arr[:k]\n\tfor now := k; now < len(arr); now++ {\n\t\tif abs(arr[now]-x) < abs(ans[0]-x) {\n\t\t\tans = arr[now+1-k : now+1]\n\t\t}\n\t}\n\treturn ans\n}\n\nfunc abs(x int) int {\n\tif x < 0 {\n\t\treturn -x\n\t}\n\treturn x\n}\n```\n#### review\n因为数据规模不大直接o(n)了，实际上用二分可以更快的。\n\n## 220826\n### daily-1464.数组中两元素的最大乘积(algorithms\tEasy)\n#### 分析\n找一个数组的最大值和次大值，你好水啊。\n#### 代码块\n```golang\nfunc maxProduct(nums []int) int {\n\tmax1 := 0\n\tmax2 := 1 //larger\n\tif nums[0] > nums[1] {\n\t\tmax2 = 0\n\t\tmax1 = 1\n\t}\n\tfor i := 2; i < len(nums); i++ {\n\t\tif nums[i] > nums[max2] {\n\t\t\tmax1 = max2\n\t\t\tmax2 = i\n\t\t} else if nums[i] > nums[max1] {\n\t\t\tmax1 = i\n\t\t}\n\t}\n\treturn (nums[max1] - 1) * (nums[max2] - 1)\n}\n```\n#### review\n好水！下班！","source":"_posts/Leetcode-22-8week2.md","raw":"---\ntitle: Leetcode 22.8week2\ndate: 2022-08-26 19:41:34\ntags:\ncover: https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/Fa57u5sacAEYmUC.jpg/1080\n---\n# Aug.Week2\n## 220820\n### daily-654.最大二叉树(algorithms\tMedium)\n#### 分析\n在数组里找最大的，然后取值，拆分数组左右递归再找最大的。\n#### 代码块\n```golang\nfunc constructMaximumBinaryTree(nums []int) *TreeNode {\n\tif len(nums) == 0 {\n\t\treturn nil\n\t}\n\tbest := 0\n\tfor i, num := range nums {\n\t\tif num > nums[best] {\n\t\t\tbest = i\n\t\t}\n\t}\n\treturn &TreeNode{nums[best], constructMaximumBinaryTree(nums[:best]), constructMaximumBinaryTree(nums[best+1:])}\n}\n```\n#### review\nstruct的递归构造还是有点问题，官方这个写法要好看很多。\n\n## 220821\n### daily-1455.检查单词是否为句中其他单词的前缀(algorithms\tEasy)\n#### 分析\n简单字符串处理，对着查就完了。\n#### 代码块\n```golang\nfunc isPrefixOfWord(sentence string, searchWord string) int {\n\tans := -1\n\twordnow := 1\n\tright := true\n\tfor j := 0; j < len(searchWord); j++ {\n\t\tif j < len(sentence) && searchWord[j] != sentence[j] {\n\t\t\tright = false\n\t\t}\n\t}\n\tif right == true {\n\t\tans = wordnow\n\t\treturn ans\n\t}\n\tfor i := 0; i < len(sentence); i++ {\n\t\tif sentence[i] == ' ' {\n\t\t\twordnow++\n\t\t\tright = true\n\t\t\tfor j := 0; j < len(searchWord); j++ {\n\t\t\t\tif i+j+1 < len(sentence) && searchWord[j] != sentence[i+j+1] {\n\t\t\t\t\tright = false\n\t\t\t\t}\n\t\t\t}\n\t\t\tif right == true {\n\t\t\t\tans = wordnow\n\t\t\t\treturn ans\n\t\t\t}\n\t\t}\n\t}\n\treturn ans\n}\n\n```\n#### review\n没啥内容。\n\n\n## 220822\n### daily-655.输出二叉树(algorithms\tMedium)\n#### 分析\n虽然是medium但其实只要跟着他的写法写，规则都定好了。\n#### 代码块\n```golang\nfunc depth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tdleft := depth(root.Left) + 1\n\tdright := depth(root.Right) + 1\n\tif dleft > dright {\n\t\treturn dleft\n\t} else {\n\t\treturn dright\n\t}\n}\n\nfunc printTree(root *TreeNode) [][]string {\n\theight := depth(root) - 1\n\tm := height + 1\n\tn := 1<<(height+1) - 1\n\tans := make([][]string, m)\n\tfor i := 0; i < m; i++ {\n\t\tans[i] = make([]string, n)\n\t}\n\tvar f func(root *TreeNode, r int, c int)\n\tf = func(root *TreeNode, r int, c int) {\n\t\tif root == nil {\n\t\t\treturn\n\t\t}\n\t\tans[r][c] = strconv.Itoa(root.Val)\n\t\tif root.Left != nil {\n\t\t\tf(root.Left, r+1, c-(1<<(height-r-1)))\n\t\t}\n\t\tif root.Right != nil {\n\t\t\tf(root.Right, r+1, c+(1<<(height-r-1)))\n\t\t}\n\t}\n\tf(root, 0, (n-1)/2)\n\treturn ans\n}\n```\n#### review\n要习惯$2^x$的$1<<x$写法\n\n## 220823\n### daily-782.变为棋盘(algorithms\tHard)\n#### 分析\n这周的hard，虽然想到了应该是比较数学的，但在具体算法上止步到了棋盘初始检验和行变列不变列变行不变，卡在最后一步统计上了。\n#### 代码块\n```golang\nfunc getMoves(mask uint, count, n int) int {\n\tones := bits.OnesCount(mask)\n\tif n&1 > 0 {\n\t\t// 如果 n 为奇数，则每一行中 1 与 0 的数目相差为 1，且满足相邻行交替\n\t\tif abs(n-2*ones) != 1 || abs(n-2*count) != 1 {\n\t\t\treturn -1\n\t\t}\n\t\tif ones == n>>1 {\n\t\t\t// 偶数位变为 1 的最小交换次数\n\t\t\treturn n/2 - bits.OnesCount(mask&0xAAAAAAAA)\n\t\t} else {\n\t\t\t// 奇数位变为 1 的最小交换次数\n\t\t\treturn (n+1)/2 - bits.OnesCount(mask&0x55555555)\n\t\t}\n\t} else {\n\t\t// 如果 n 为偶数，则每一行中 1 与 0 的数目相等，且满足相邻行交替\n\t\tif ones != n>>1 || count != n>>1 {\n\t\t\treturn -1\n\t\t}\n\t\t// 偶数位变为 1 的最小交换次数\n\t\tcount0 := n/2 - bits.OnesCount(mask&0xAAAAAAAA)\n\t\t// 奇数位变为 1 的最小交换次数\n\t\tcount1 := n/2 - bits.OnesCount(mask&0x55555555)\n\t\treturn min(count0, count1)\n\t}\n}\n\nfunc movesToChessboard(board [][]int) int {\n\tn := len(board)\n\t// 棋盘的第一行与第一列\n\trowMask, colMask := 0, 0\n\tfor i := 0; i < n; i++ {\n\t\trowMask |= board[0][i] << i\n\t\tcolMask |= board[i][0] << i\n\t}\n\treverseRowMask := 1<<n - 1 ^ rowMask\n\treverseColMask := 1<<n - 1 ^ colMask\n\trowCnt, colCnt := 0, 0\n\tfor i := 0; i < n; i++ {\n\t\tcurrRowMask, currColMask := 0, 0\n\t\tfor j := 0; j < n; j++ {\n\t\t\tcurrRowMask |= board[i][j] << j\n\t\t\tcurrColMask |= board[j][i] << j\n\t\t}\n\t\tif currRowMask != rowMask && currRowMask != reverseRowMask || // 检测每一行的状态是否合法\n\t\t\tcurrColMask != colMask && currColMask != reverseColMask { // 检测每一列的状态是否合法\n\t\t\treturn -1\n\t\t}\n\t\tif currRowMask == rowMask {\n\t\t\trowCnt++ // 记录与第一行相同的行数\n\t\t}\n\t\tif currColMask == colMask {\n\t\t\tcolCnt++ // 记录与第一列相同的列数\n\t\t}\n\t}\n\trowMoves := getMoves(uint(rowMask), rowCnt, n)\n\tcolMoves := getMoves(uint(colMask), colCnt, n)\n\tif rowMoves == -1 || colMoves == -1 {\n\t\treturn -1\n\t}\n\treturn rowMoves + colMoves\n}\n\nfunc abs(x int) int {\n\tif x < 0 {\n\t\treturn -x\n\t}\n\treturn x\n}\n\nfunc min(a, b int) int {\n\tif a > b {\n\t\treturn b\n\t}\n\treturn a\n}\n```\n#### review\n掩码的写法很不错，自己位运算用的还是少太多了。\n\n## 220824\n### daily-1460.通过翻转子数组使两个数组相等(algorithms\tEasy)\n#### 分析\n不要求求最短，一张hashmap写完。\n#### 代码块\n```golang\nfunc canBeEqual(target []int, arr []int) bool {\n\thashmap := make(map[int]int)\n\tfor i := 0; i < len(target); i++ {\n\t\thashmap[target[i]]++\n\t\thashmap[arr[i]]--\n\t}\n\tfor key, _ := range hashmap {\n\t\tif hashmap[key] != 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n```\n#### review\n偏水。\n## 220825\n### daily-658.找到-k-个最接近的元素(algorithms\tMedium)\n#### 分析\n题给的数组排好序了，直接跟着条件搜就行。\n#### 代码块\n```golang\nfunc findClosestElements(arr []int, k int, x int) []int {\n\tans := make([]int, k)\n\tans = arr[:k]\n\tfor now := k; now < len(arr); now++ {\n\t\tif abs(arr[now]-x) < abs(ans[0]-x) {\n\t\t\tans = arr[now+1-k : now+1]\n\t\t}\n\t}\n\treturn ans\n}\n\nfunc abs(x int) int {\n\tif x < 0 {\n\t\treturn -x\n\t}\n\treturn x\n}\n```\n#### review\n因为数据规模不大直接o(n)了，实际上用二分可以更快的。\n\n## 220826\n### daily-1464.数组中两元素的最大乘积(algorithms\tEasy)\n#### 分析\n找一个数组的最大值和次大值，你好水啊。\n#### 代码块\n```golang\nfunc maxProduct(nums []int) int {\n\tmax1 := 0\n\tmax2 := 1 //larger\n\tif nums[0] > nums[1] {\n\t\tmax2 = 0\n\t\tmax1 = 1\n\t}\n\tfor i := 2; i < len(nums); i++ {\n\t\tif nums[i] > nums[max2] {\n\t\t\tmax1 = max2\n\t\t\tmax2 = i\n\t\t} else if nums[i] > nums[max1] {\n\t\t\tmax1 = i\n\t\t}\n\t}\n\treturn (nums[max1] - 1) * (nums[max2] - 1)\n}\n```\n#### review\n好水！下班！","slug":"Leetcode-22-8week2","published":1,"updated":"2022-08-26T13:54:58.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ajd0s60000npwr0eimftve","content":"<h1 id=\"Aug-Week2\"><a href=\"#Aug-Week2\" class=\"headerlink\" title=\"Aug.Week2\"></a>Aug.Week2</h1><h2 id=\"220820\"><a href=\"#220820\" class=\"headerlink\" title=\"220820\"></a>220820</h2><h3 id=\"daily-654-最大二叉树-algorithmsMedium\"><a href=\"#daily-654-最大二叉树-algorithmsMedium\" class=\"headerlink\" title=\"daily-654.最大二叉树(algorithms\tMedium)\"></a>daily-654.最大二叉树(algorithms\tMedium)</h3><h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>在数组里找最大的，然后取值，拆分数组左右递归再找最大的。</p>\n<h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">constructMaximumBinaryTree</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>)</span> *<span class=\"title\">TreeNode</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbest := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, num := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> num &gt; nums[best] &#123;</span><br><span class=\"line\">\t\t\tbest = i</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;TreeNode&#123;nums[best], constructMaximumBinaryTree(nums[:best]), constructMaximumBinaryTree(nums[best+<span class=\"number\">1</span>:])&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review\"><a href=\"#review\" class=\"headerlink\" title=\"review\"></a>review</h4><p>struct的递归构造还是有点问题，官方这个写法要好看很多。</p>\n<h2 id=\"220821\"><a href=\"#220821\" class=\"headerlink\" title=\"220821\"></a>220821</h2><h3 id=\"daily-1455-检查单词是否为句中其他单词的前缀-algorithmsEasy\"><a href=\"#daily-1455-检查单词是否为句中其他单词的前缀-algorithmsEasy\" class=\"headerlink\" title=\"daily-1455.检查单词是否为句中其他单词的前缀(algorithms\tEasy)\"></a>daily-1455.检查单词是否为句中其他单词的前缀(algorithms\tEasy)</h3><h4 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>简单字符串处理，对着查就完了。</p>\n<h4 id=\"代码块-1\"><a href=\"#代码块-1\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isPrefixOfWord</span><span class=\"params\">(sentence <span class=\"keyword\">string</span>, searchWord <span class=\"keyword\">string</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tans := <span class=\"number\">-1</span></span><br><span class=\"line\">\twordnow := <span class=\"number\">1</span></span><br><span class=\"line\">\tright := <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(searchWord); j++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> j &lt; <span class=\"built_in\">len</span>(sentence) &amp;&amp; searchWord[j] != sentence[j] &#123;</span><br><span class=\"line\">\t\t\tright = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> right == <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">\t\tans = wordnow</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(sentence); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> sentence[i] == <span class=\"string\">&#x27; &#x27;</span> &#123;</span><br><span class=\"line\">\t\t\twordnow++</span><br><span class=\"line\">\t\t\tright = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(searchWord); j++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> i+j+<span class=\"number\">1</span> &lt; <span class=\"built_in\">len</span>(sentence) &amp;&amp; searchWord[j] != sentence[i+j+<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\t\t\t\tright = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> right == <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">\t\t\t\tans = wordnow</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"review-1\"><a href=\"#review-1\" class=\"headerlink\" title=\"review\"></a>review</h4><p>没啥内容。</p>\n<h2 id=\"220822\"><a href=\"#220822\" class=\"headerlink\" title=\"220822\"></a>220822</h2><h3 id=\"daily-655-输出二叉树-algorithmsMedium\"><a href=\"#daily-655-输出二叉树-algorithmsMedium\" class=\"headerlink\" title=\"daily-655.输出二叉树(algorithms\tMedium)\"></a>daily-655.输出二叉树(algorithms\tMedium)</h3><h4 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>虽然是medium但其实只要跟着他的写法写，规则都定好了。</p>\n<h4 id=\"代码块-2\"><a href=\"#代码块-2\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">depth</span><span class=\"params\">(root *TreeNode)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> root == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdleft := depth(root.Left) + <span class=\"number\">1</span></span><br><span class=\"line\">\tdright := depth(root.Right) + <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dleft &gt; dright &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dleft</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dright</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printTree</span><span class=\"params\">(root *TreeNode)</span> [][]<span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\theight := depth(root) - <span class=\"number\">1</span></span><br><span class=\"line\">\tm := height + <span class=\"number\">1</span></span><br><span class=\"line\">\tn := <span class=\"number\">1</span>&lt;&lt;(height+<span class=\"number\">1</span>) - <span class=\"number\">1</span></span><br><span class=\"line\">\tans := <span class=\"built_in\">make</span>([][]<span class=\"keyword\">string</span>, m)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; m; i++ &#123;</span><br><span class=\"line\">\t\tans[i] = <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, n)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(root *TreeNode, r <span class=\"keyword\">int</span>, c <span class=\"keyword\">int</span>)</span></span></span><br><span class=\"line\">\tf = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(root *TreeNode, r <span class=\"keyword\">int</span>, c <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> root == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans[r][c] = strconv.Itoa(root.Val)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> root.Left != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tf(root.Left, r+<span class=\"number\">1</span>, c-(<span class=\"number\">1</span>&lt;&lt;(height-r<span class=\"number\">-1</span>)))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> root.Right != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tf(root.Right, r+<span class=\"number\">1</span>, c+(<span class=\"number\">1</span>&lt;&lt;(height-r<span class=\"number\">-1</span>)))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf(root, <span class=\"number\">0</span>, (n<span class=\"number\">-1</span>)/<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-2\"><a href=\"#review-2\" class=\"headerlink\" title=\"review\"></a>review</h4><p>要习惯$2^x$的$1&lt;&lt;x$写法</p>\n<h2 id=\"220823\"><a href=\"#220823\" class=\"headerlink\" title=\"220823\"></a>220823</h2><h3 id=\"daily-782-变为棋盘-algorithmsHard\"><a href=\"#daily-782-变为棋盘-algorithmsHard\" class=\"headerlink\" title=\"daily-782.变为棋盘(algorithms\tHard)\"></a>daily-782.变为棋盘(algorithms\tHard)</h3><h4 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>这周的hard，虽然想到了应该是比较数学的，但在具体算法上止步到了棋盘初始检验和行变列不变列变行不变，卡在最后一步统计上了。</p>\n<h4 id=\"代码块-3\"><a href=\"#代码块-3\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getMoves</span><span class=\"params\">(mask <span class=\"keyword\">uint</span>, count, n <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tones := bits.OnesCount(mask)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n&amp;<span class=\"number\">1</span> &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果 n 为奇数，则每一行中 1 与 0 的数目相差为 1，且满足相邻行交替</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> abs(n<span class=\"number\">-2</span>*ones) != <span class=\"number\">1</span> || abs(n<span class=\"number\">-2</span>*count) != <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ones == n&gt;&gt;<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 偶数位变为 1 的最小交换次数</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> n/<span class=\"number\">2</span> - bits.OnesCount(mask&amp;<span class=\"number\">0xAAAAAAAA</span>)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 奇数位变为 1 的最小交换次数</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (n+<span class=\"number\">1</span>)/<span class=\"number\">2</span> - bits.OnesCount(mask&amp;<span class=\"number\">0x55555555</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果 n 为偶数，则每一行中 1 与 0 的数目相等，且满足相邻行交替</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ones != n&gt;&gt;<span class=\"number\">1</span> || count != n&gt;&gt;<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 偶数位变为 1 的最小交换次数</span></span><br><span class=\"line\">\t\tcount0 := n/<span class=\"number\">2</span> - bits.OnesCount(mask&amp;<span class=\"number\">0xAAAAAAAA</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 奇数位变为 1 的最小交换次数</span></span><br><span class=\"line\">\t\tcount1 := n/<span class=\"number\">2</span> - bits.OnesCount(mask&amp;<span class=\"number\">0x55555555</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> min(count0, count1)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">movesToChessboard</span><span class=\"params\">(board [][]<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tn := <span class=\"built_in\">len</span>(board)</span><br><span class=\"line\">\t<span class=\"comment\">// 棋盘的第一行与第一列</span></span><br><span class=\"line\">\trowMask, colMask := <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\trowMask |= board[<span class=\"number\">0</span>][i] &lt;&lt; i</span><br><span class=\"line\">\t\tcolMask |= board[i][<span class=\"number\">0</span>] &lt;&lt; i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treverseRowMask := <span class=\"number\">1</span>&lt;&lt;n - <span class=\"number\">1</span> ^ rowMask</span><br><span class=\"line\">\treverseColMask := <span class=\"number\">1</span>&lt;&lt;n - <span class=\"number\">1</span> ^ colMask</span><br><span class=\"line\">\trowCnt, colCnt := <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tcurrRowMask, currColMask := <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; n; j++ &#123;</span><br><span class=\"line\">\t\t\tcurrRowMask |= board[i][j] &lt;&lt; j</span><br><span class=\"line\">\t\t\tcurrColMask |= board[j][i] &lt;&lt; j</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> currRowMask != rowMask &amp;&amp; currRowMask != reverseRowMask || <span class=\"comment\">// 检测每一行的状态是否合法</span></span><br><span class=\"line\">\t\t\tcurrColMask != colMask &amp;&amp; currColMask != reverseColMask &#123; <span class=\"comment\">// 检测每一列的状态是否合法</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> currRowMask == rowMask &#123;</span><br><span class=\"line\">\t\t\trowCnt++ <span class=\"comment\">// 记录与第一行相同的行数</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> currColMask == colMask &#123;</span><br><span class=\"line\">\t\t\tcolCnt++ <span class=\"comment\">// 记录与第一列相同的列数</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trowMoves := getMoves(<span class=\"keyword\">uint</span>(rowMask), rowCnt, n)</span><br><span class=\"line\">\tcolMoves := getMoves(<span class=\"keyword\">uint</span>(colMask), colCnt, n)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> rowMoves == <span class=\"number\">-1</span> || colMoves == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rowMoves + colMoves</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">abs</span><span class=\"params\">(x <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -x</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">min</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a &gt; b &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> b</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-3\"><a href=\"#review-3\" class=\"headerlink\" title=\"review\"></a>review</h4><p>掩码的写法很不错，自己位运算用的还是少太多了。</p>\n<h2 id=\"220824\"><a href=\"#220824\" class=\"headerlink\" title=\"220824\"></a>220824</h2><h3 id=\"daily-1460-通过翻转子数组使两个数组相等-algorithmsEasy\"><a href=\"#daily-1460-通过翻转子数组使两个数组相等-algorithmsEasy\" class=\"headerlink\" title=\"daily-1460.通过翻转子数组使两个数组相等(algorithms\tEasy)\"></a>daily-1460.通过翻转子数组使两个数组相等(algorithms\tEasy)</h3><h4 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>不要求求最短，一张hashmap写完。</p>\n<h4 id=\"代码块-4\"><a href=\"#代码块-4\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">canBeEqual</span><span class=\"params\">(target []<span class=\"keyword\">int</span>, arr []<span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\thashmap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(target); i++ &#123;</span><br><span class=\"line\">\t\thashmap[target[i]]++</span><br><span class=\"line\">\t\thashmap[arr[i]]--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> key, _ := <span class=\"keyword\">range</span> hashmap &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> hashmap[key] != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"review-4\"><a href=\"#review-4\" class=\"headerlink\" title=\"review\"></a>review</h4><p>偏水。</p>\n<h2 id=\"220825\"><a href=\"#220825\" class=\"headerlink\" title=\"220825\"></a>220825</h2><h3 id=\"daily-658-找到-k-个最接近的元素-algorithmsMedium\"><a href=\"#daily-658-找到-k-个最接近的元素-algorithmsMedium\" class=\"headerlink\" title=\"daily-658.找到-k-个最接近的元素(algorithms\tMedium)\"></a>daily-658.找到-k-个最接近的元素(algorithms\tMedium)</h3><h4 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>题给的数组排好序了，直接跟着条件搜就行。</p>\n<h4 id=\"代码块-5\"><a href=\"#代码块-5\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findClosestElements</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>, k <span class=\"keyword\">int</span>, x <span class=\"keyword\">int</span>)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tans := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, k)</span><br><span class=\"line\">\tans = arr[:k]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> now := k; now &lt; <span class=\"built_in\">len</span>(arr); now++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> abs(arr[now]-x) &lt; abs(ans[<span class=\"number\">0</span>]-x) &#123;</span><br><span class=\"line\">\t\t\tans = arr[now+<span class=\"number\">1</span>-k : now+<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">abs</span><span class=\"params\">(x <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -x</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-5\"><a href=\"#review-5\" class=\"headerlink\" title=\"review\"></a>review</h4><p>因为数据规模不大直接o(n)了，实际上用二分可以更快的。</p>\n<h2 id=\"220826\"><a href=\"#220826\" class=\"headerlink\" title=\"220826\"></a>220826</h2><h3 id=\"daily-1464-数组中两元素的最大乘积-algorithmsEasy\"><a href=\"#daily-1464-数组中两元素的最大乘积-algorithmsEasy\" class=\"headerlink\" title=\"daily-1464.数组中两元素的最大乘积(algorithms\tEasy)\"></a>daily-1464.数组中两元素的最大乘积(algorithms\tEasy)</h3><h4 id=\"分析-6\"><a href=\"#分析-6\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>找一个数组的最大值和次大值，你好水啊。</p>\n<h4 id=\"代码块-6\"><a href=\"#代码块-6\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">maxProduct</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tmax1 := <span class=\"number\">0</span></span><br><span class=\"line\">\tmax2 := <span class=\"number\">1</span> <span class=\"comment\">//larger</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> nums[<span class=\"number\">0</span>] &gt; nums[<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\tmax2 = <span class=\"number\">0</span></span><br><span class=\"line\">\t\tmax1 = <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">2</span>; i &lt; <span class=\"built_in\">len</span>(nums); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> nums[i] &gt; nums[max2] &#123;</span><br><span class=\"line\">\t\t\tmax1 = max2</span><br><span class=\"line\">\t\t\tmax2 = i</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[i] &gt; nums[max1] &#123;</span><br><span class=\"line\">\t\t\tmax1 = i</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (nums[max1] - <span class=\"number\">1</span>) * (nums[max2] - <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-6\"><a href=\"#review-6\" class=\"headerlink\" title=\"review\"></a>review</h4><p>好水！下班！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Aug-Week2\"><a href=\"#Aug-Week2\" class=\"headerlink\" title=\"Aug.Week2\"></a>Aug.Week2</h1><h2 id=\"220820\"><a href=\"#220820\" class=\"headerlink\" title=\"220820\"></a>220820</h2><h3 id=\"daily-654-最大二叉树-algorithmsMedium\"><a href=\"#daily-654-最大二叉树-algorithmsMedium\" class=\"headerlink\" title=\"daily-654.最大二叉树(algorithms\tMedium)\"></a>daily-654.最大二叉树(algorithms\tMedium)</h3><h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>在数组里找最大的，然后取值，拆分数组左右递归再找最大的。</p>\n<h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">constructMaximumBinaryTree</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>)</span> *<span class=\"title\">TreeNode</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbest := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, num := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> num &gt; nums[best] &#123;</span><br><span class=\"line\">\t\t\tbest = i</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;TreeNode&#123;nums[best], constructMaximumBinaryTree(nums[:best]), constructMaximumBinaryTree(nums[best+<span class=\"number\">1</span>:])&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review\"><a href=\"#review\" class=\"headerlink\" title=\"review\"></a>review</h4><p>struct的递归构造还是有点问题，官方这个写法要好看很多。</p>\n<h2 id=\"220821\"><a href=\"#220821\" class=\"headerlink\" title=\"220821\"></a>220821</h2><h3 id=\"daily-1455-检查单词是否为句中其他单词的前缀-algorithmsEasy\"><a href=\"#daily-1455-检查单词是否为句中其他单词的前缀-algorithmsEasy\" class=\"headerlink\" title=\"daily-1455.检查单词是否为句中其他单词的前缀(algorithms\tEasy)\"></a>daily-1455.检查单词是否为句中其他单词的前缀(algorithms\tEasy)</h3><h4 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>简单字符串处理，对着查就完了。</p>\n<h4 id=\"代码块-1\"><a href=\"#代码块-1\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isPrefixOfWord</span><span class=\"params\">(sentence <span class=\"keyword\">string</span>, searchWord <span class=\"keyword\">string</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tans := <span class=\"number\">-1</span></span><br><span class=\"line\">\twordnow := <span class=\"number\">1</span></span><br><span class=\"line\">\tright := <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(searchWord); j++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> j &lt; <span class=\"built_in\">len</span>(sentence) &amp;&amp; searchWord[j] != sentence[j] &#123;</span><br><span class=\"line\">\t\t\tright = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> right == <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">\t\tans = wordnow</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(sentence); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> sentence[i] == <span class=\"string\">&#x27; &#x27;</span> &#123;</span><br><span class=\"line\">\t\t\twordnow++</span><br><span class=\"line\">\t\t\tright = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(searchWord); j++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> i+j+<span class=\"number\">1</span> &lt; <span class=\"built_in\">len</span>(sentence) &amp;&amp; searchWord[j] != sentence[i+j+<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\t\t\t\tright = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> right == <span class=\"literal\">true</span> &#123;</span><br><span class=\"line\">\t\t\t\tans = wordnow</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"review-1\"><a href=\"#review-1\" class=\"headerlink\" title=\"review\"></a>review</h4><p>没啥内容。</p>\n<h2 id=\"220822\"><a href=\"#220822\" class=\"headerlink\" title=\"220822\"></a>220822</h2><h3 id=\"daily-655-输出二叉树-algorithmsMedium\"><a href=\"#daily-655-输出二叉树-algorithmsMedium\" class=\"headerlink\" title=\"daily-655.输出二叉树(algorithms\tMedium)\"></a>daily-655.输出二叉树(algorithms\tMedium)</h3><h4 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>虽然是medium但其实只要跟着他的写法写，规则都定好了。</p>\n<h4 id=\"代码块-2\"><a href=\"#代码块-2\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">depth</span><span class=\"params\">(root *TreeNode)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> root == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdleft := depth(root.Left) + <span class=\"number\">1</span></span><br><span class=\"line\">\tdright := depth(root.Right) + <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dleft &gt; dright &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dleft</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dright</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printTree</span><span class=\"params\">(root *TreeNode)</span> [][]<span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\theight := depth(root) - <span class=\"number\">1</span></span><br><span class=\"line\">\tm := height + <span class=\"number\">1</span></span><br><span class=\"line\">\tn := <span class=\"number\">1</span>&lt;&lt;(height+<span class=\"number\">1</span>) - <span class=\"number\">1</span></span><br><span class=\"line\">\tans := <span class=\"built_in\">make</span>([][]<span class=\"keyword\">string</span>, m)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; m; i++ &#123;</span><br><span class=\"line\">\t\tans[i] = <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, n)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(root *TreeNode, r <span class=\"keyword\">int</span>, c <span class=\"keyword\">int</span>)</span></span></span><br><span class=\"line\">\tf = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(root *TreeNode, r <span class=\"keyword\">int</span>, c <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> root == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans[r][c] = strconv.Itoa(root.Val)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> root.Left != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tf(root.Left, r+<span class=\"number\">1</span>, c-(<span class=\"number\">1</span>&lt;&lt;(height-r<span class=\"number\">-1</span>)))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> root.Right != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tf(root.Right, r+<span class=\"number\">1</span>, c+(<span class=\"number\">1</span>&lt;&lt;(height-r<span class=\"number\">-1</span>)))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf(root, <span class=\"number\">0</span>, (n<span class=\"number\">-1</span>)/<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-2\"><a href=\"#review-2\" class=\"headerlink\" title=\"review\"></a>review</h4><p>要习惯$2^x$的$1&lt;&lt;x$写法</p>\n<h2 id=\"220823\"><a href=\"#220823\" class=\"headerlink\" title=\"220823\"></a>220823</h2><h3 id=\"daily-782-变为棋盘-algorithmsHard\"><a href=\"#daily-782-变为棋盘-algorithmsHard\" class=\"headerlink\" title=\"daily-782.变为棋盘(algorithms\tHard)\"></a>daily-782.变为棋盘(algorithms\tHard)</h3><h4 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>这周的hard，虽然想到了应该是比较数学的，但在具体算法上止步到了棋盘初始检验和行变列不变列变行不变，卡在最后一步统计上了。</p>\n<h4 id=\"代码块-3\"><a href=\"#代码块-3\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getMoves</span><span class=\"params\">(mask <span class=\"keyword\">uint</span>, count, n <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tones := bits.OnesCount(mask)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n&amp;<span class=\"number\">1</span> &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果 n 为奇数，则每一行中 1 与 0 的数目相差为 1，且满足相邻行交替</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> abs(n<span class=\"number\">-2</span>*ones) != <span class=\"number\">1</span> || abs(n<span class=\"number\">-2</span>*count) != <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ones == n&gt;&gt;<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 偶数位变为 1 的最小交换次数</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> n/<span class=\"number\">2</span> - bits.OnesCount(mask&amp;<span class=\"number\">0xAAAAAAAA</span>)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 奇数位变为 1 的最小交换次数</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (n+<span class=\"number\">1</span>)/<span class=\"number\">2</span> - bits.OnesCount(mask&amp;<span class=\"number\">0x55555555</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果 n 为偶数，则每一行中 1 与 0 的数目相等，且满足相邻行交替</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ones != n&gt;&gt;<span class=\"number\">1</span> || count != n&gt;&gt;<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 偶数位变为 1 的最小交换次数</span></span><br><span class=\"line\">\t\tcount0 := n/<span class=\"number\">2</span> - bits.OnesCount(mask&amp;<span class=\"number\">0xAAAAAAAA</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 奇数位变为 1 的最小交换次数</span></span><br><span class=\"line\">\t\tcount1 := n/<span class=\"number\">2</span> - bits.OnesCount(mask&amp;<span class=\"number\">0x55555555</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> min(count0, count1)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">movesToChessboard</span><span class=\"params\">(board [][]<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tn := <span class=\"built_in\">len</span>(board)</span><br><span class=\"line\">\t<span class=\"comment\">// 棋盘的第一行与第一列</span></span><br><span class=\"line\">\trowMask, colMask := <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\trowMask |= board[<span class=\"number\">0</span>][i] &lt;&lt; i</span><br><span class=\"line\">\t\tcolMask |= board[i][<span class=\"number\">0</span>] &lt;&lt; i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treverseRowMask := <span class=\"number\">1</span>&lt;&lt;n - <span class=\"number\">1</span> ^ rowMask</span><br><span class=\"line\">\treverseColMask := <span class=\"number\">1</span>&lt;&lt;n - <span class=\"number\">1</span> ^ colMask</span><br><span class=\"line\">\trowCnt, colCnt := <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tcurrRowMask, currColMask := <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; n; j++ &#123;</span><br><span class=\"line\">\t\t\tcurrRowMask |= board[i][j] &lt;&lt; j</span><br><span class=\"line\">\t\t\tcurrColMask |= board[j][i] &lt;&lt; j</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> currRowMask != rowMask &amp;&amp; currRowMask != reverseRowMask || <span class=\"comment\">// 检测每一行的状态是否合法</span></span><br><span class=\"line\">\t\t\tcurrColMask != colMask &amp;&amp; currColMask != reverseColMask &#123; <span class=\"comment\">// 检测每一列的状态是否合法</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> currRowMask == rowMask &#123;</span><br><span class=\"line\">\t\t\trowCnt++ <span class=\"comment\">// 记录与第一行相同的行数</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> currColMask == colMask &#123;</span><br><span class=\"line\">\t\t\tcolCnt++ <span class=\"comment\">// 记录与第一列相同的列数</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trowMoves := getMoves(<span class=\"keyword\">uint</span>(rowMask), rowCnt, n)</span><br><span class=\"line\">\tcolMoves := getMoves(<span class=\"keyword\">uint</span>(colMask), colCnt, n)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> rowMoves == <span class=\"number\">-1</span> || colMoves == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rowMoves + colMoves</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">abs</span><span class=\"params\">(x <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -x</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">min</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a &gt; b &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> b</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-3\"><a href=\"#review-3\" class=\"headerlink\" title=\"review\"></a>review</h4><p>掩码的写法很不错，自己位运算用的还是少太多了。</p>\n<h2 id=\"220824\"><a href=\"#220824\" class=\"headerlink\" title=\"220824\"></a>220824</h2><h3 id=\"daily-1460-通过翻转子数组使两个数组相等-algorithmsEasy\"><a href=\"#daily-1460-通过翻转子数组使两个数组相等-algorithmsEasy\" class=\"headerlink\" title=\"daily-1460.通过翻转子数组使两个数组相等(algorithms\tEasy)\"></a>daily-1460.通过翻转子数组使两个数组相等(algorithms\tEasy)</h3><h4 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>不要求求最短，一张hashmap写完。</p>\n<h4 id=\"代码块-4\"><a href=\"#代码块-4\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">canBeEqual</span><span class=\"params\">(target []<span class=\"keyword\">int</span>, arr []<span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\thashmap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(target); i++ &#123;</span><br><span class=\"line\">\t\thashmap[target[i]]++</span><br><span class=\"line\">\t\thashmap[arr[i]]--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> key, _ := <span class=\"keyword\">range</span> hashmap &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> hashmap[key] != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"review-4\"><a href=\"#review-4\" class=\"headerlink\" title=\"review\"></a>review</h4><p>偏水。</p>\n<h2 id=\"220825\"><a href=\"#220825\" class=\"headerlink\" title=\"220825\"></a>220825</h2><h3 id=\"daily-658-找到-k-个最接近的元素-algorithmsMedium\"><a href=\"#daily-658-找到-k-个最接近的元素-algorithmsMedium\" class=\"headerlink\" title=\"daily-658.找到-k-个最接近的元素(algorithms\tMedium)\"></a>daily-658.找到-k-个最接近的元素(algorithms\tMedium)</h3><h4 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>题给的数组排好序了，直接跟着条件搜就行。</p>\n<h4 id=\"代码块-5\"><a href=\"#代码块-5\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findClosestElements</span><span class=\"params\">(arr []<span class=\"keyword\">int</span>, k <span class=\"keyword\">int</span>, x <span class=\"keyword\">int</span>)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tans := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, k)</span><br><span class=\"line\">\tans = arr[:k]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> now := k; now &lt; <span class=\"built_in\">len</span>(arr); now++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> abs(arr[now]-x) &lt; abs(ans[<span class=\"number\">0</span>]-x) &#123;</span><br><span class=\"line\">\t\t\tans = arr[now+<span class=\"number\">1</span>-k : now+<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">abs</span><span class=\"params\">(x <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -x</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-5\"><a href=\"#review-5\" class=\"headerlink\" title=\"review\"></a>review</h4><p>因为数据规模不大直接o(n)了，实际上用二分可以更快的。</p>\n<h2 id=\"220826\"><a href=\"#220826\" class=\"headerlink\" title=\"220826\"></a>220826</h2><h3 id=\"daily-1464-数组中两元素的最大乘积-algorithmsEasy\"><a href=\"#daily-1464-数组中两元素的最大乘积-algorithmsEasy\" class=\"headerlink\" title=\"daily-1464.数组中两元素的最大乘积(algorithms\tEasy)\"></a>daily-1464.数组中两元素的最大乘积(algorithms\tEasy)</h3><h4 id=\"分析-6\"><a href=\"#分析-6\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>找一个数组的最大值和次大值，你好水啊。</p>\n<h4 id=\"代码块-6\"><a href=\"#代码块-6\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">maxProduct</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tmax1 := <span class=\"number\">0</span></span><br><span class=\"line\">\tmax2 := <span class=\"number\">1</span> <span class=\"comment\">//larger</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> nums[<span class=\"number\">0</span>] &gt; nums[<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\tmax2 = <span class=\"number\">0</span></span><br><span class=\"line\">\t\tmax1 = <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">2</span>; i &lt; <span class=\"built_in\">len</span>(nums); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> nums[i] &gt; nums[max2] &#123;</span><br><span class=\"line\">\t\t\tmax1 = max2</span><br><span class=\"line\">\t\t\tmax2 = i</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[i] &gt; nums[max1] &#123;</span><br><span class=\"line\">\t\t\tmax1 = i</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (nums[max1] - <span class=\"number\">1</span>) * (nums[max2] - <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-6\"><a href=\"#review-6\" class=\"headerlink\" title=\"review\"></a>review</h4><p>好水！下班！</p>\n"},{"title":"Leetcode 22.8week3","date":"2022-09-02T15:59:13.000Z","cover":"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/100917024_p0.jpg/1080","_content":"# Aug.Week3\n## 220827\n### daily-662.二叉树最大宽度(algorithms\tMedium)\n#### 分析\n搜索一遍，存一下位置信息就可以搞定。\n#### 代码块\n```golang\nfunc widthOfBinaryTree(root *TreeNode) int {\n\tdeepleft := make([]int, 0)\n\tdeepright := make([]int, 0)\n\tvar f func(root *TreeNode, deep int, now int)\n\tf = func(root *TreeNode, deep int, now int) {\n\t\tif root == nil {\n\t\t\treturn\n\t\t}\n\t\tif len(deepleft) <= deep {\n\t\t\tdeepleft = append(deepleft, now)\n\t\t\tdeepright = append(deepright, now)\n\t\t} else if deepleft[deep] > now {\n\t\t\tdeepleft[deep] = now\n\t\t} else if deepright[deep] < now {\n\t\t\tdeepright[deep] = now\n\t\t}\n\t\tf(root.Left, deep+1, 2*now-1)\n\t\tf(root.Right, deep+1, 2*now)\n\t}\n\tf(root, 0, 1)\n\tmax := -1\n\tfor i := 0; i < len(deepleft); i++ {\n\t\tif deepright[i]-deepleft[i] > max {\n\t\t\tmax = deepright[i] - deepleft[i]\n\t\t}\n\t}\n\treturn max + 1\n}\n```\n#### review\n最后还是写成了深搜，也许广搜更适合这题一点，最后出来一看时间还行空间是有点偏高了。\n## 220828\n### daily-793.阶乘函数后-k-个零(algorithms\tHard)\n#### 分析\n数学题，首先统计阶乘后k个0，本质就是统计里面5的个数是否为k（2的个数永远比5多）。然后每五次就必定会多至少一个五，所以return的结果不是5个，就是0个。问题就转化成了什么时候返回0个。  \n对基本例的判研可以发现，如果一个k返回0值，说明他被跳过了，即阶乘里新加入的数包含多个5。因而我们只要对pow(5,i)的情况作处理即可。  \n预生成一个数组，test[i]的数据为pow(5,i)!的末尾0个数。然后拿k去比对，k应该可以由test的特定项组成，且每一项的系数一定小于5，如若等于5，则说明他是被跳过的k值。\n#### 代码块\n```golang\nfunc preimageSizeFZF(k int) int {\n\ttest := make([]int, 0)\n\ti := 1\n\tfor i < k {\n\t\ttest = append(test, i)\n\t\ti = i*5 + 1\n\t}\n\tfivelen := len(test)\n\ti = fivelen - 1\n\tfor k > 0 {\n\t\tif k == 5*test[i] {\n\t\t\treturn 0\n\t\t}\n\t\tfor k >= test[i] {\n\t\t\tk -= test[i]\n\t\t}\n\t\ti--\n\t}\n\treturn 5\n}\n```\n#### review\n纯数学题，分析时间比较长代码简单，但写表述好难感觉没说到点上。\n\n## 220829\n### daily-1470.重新排列数组(algorithms\tEasy)\n#### 分析\n比较简单，参数还多给一个n，乱跑。\n#### 代码块\n```golang\nfunc shuffle(nums []int, n int) []int {\n\tans := make([]int, n*2)\n\tfor i := 0; i < n; i++ {\n\t\tans[2*i] = nums[i]\n\t\tans[2*i+1] = nums[n+i]\n\t}\n\treturn ans\n}\n```\n#### review\n交完感觉时间不快，不知道快的怎样写的。\n\n\n## 220830\n### daily-998.最大二叉树-ii(algorithms\tMedium)\n#### 分析\n最后一步和上次的654一样，只要先还原列表再跑一次654就行，树还原列表和列表构建数思路一致，已经保证是列表产生，只要左右递归的处理即可。\n#### 代码块\n```golang\nfunc insertIntoMaxTree(root *TreeNode, val int) *TreeNode {\n\ta := maxTreeToSlice(root)\n\tb := append(a, val)\n\treturn constructMaximumBinaryTree(b)\n}\n\nfunc maxTreeToSlice(root *TreeNode) []int {\n\tans := []int{}\n\tif root == nil {\n\t\treturn ans\n\t}\n\tans = append(maxTreeToSlice(root.Left), root.Val)\n\tans = append(ans, maxTreeToSlice(root.Right)...)\n\treturn ans\n}\n\nfunc constructMaximumBinaryTree(nums []int) *TreeNode {\n\tif len(nums) == 0 {\n\t\treturn nil\n\t}\n\tbest := 0\n\tfor i, num := range nums {\n\t\tif num > nums[best] {\n\t\t\tbest = i\n\t\t}\n\t}\n\treturn &TreeNode{nums[best], constructMaximumBinaryTree(nums[:best]), constructMaximumBinaryTree(nums[best+1:])}\n}\n```\n#### review\n速度很快，因为递归构建的关系内存占用有点多。然后看了一眼题解发现其实只要插入一个新val就是了，因为val添加在列表最后，故只可能是根结点或右节点，一路搜过去然后插入构建一下就完了，我怎么没想到可恶啊。\n\n## 220831\n### daily-946.验证栈序列(algorithms\tMedium)\n#### 分析\n模拟，能出就出。\n#### 代码块\n```golang\nfunc validateStackSequences(pushed []int, popped []int) bool {\n\tlenth := len(pushed)\n\tstacknow := make([]int, 0)\n\tstackend := -1\n\tpopnow := 0\n\tfor i := 0; i < lenth; i++ {\n\t\tstackend++\n\t\tstacknow = append(stacknow, pushed[i])\n\t\tfor stacknow[stackend] == popped[popnow] {\n\t\t\tstacknow = stacknow[:stackend]\n\t\t\tstackend--\n\t\t\tpopnow++\n\t\t\tif stackend < 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tif stackend == -1 {\n\t\treturn true\n\t}\n\treturn false\n}\n```\n#### review\n做一下边际处理就完事了。\n\n## 2200901\n### daily-1475.商品折扣后的最终价格(algorithms\tEasy)\n#### 分析\n九月第一题，好水，好水呀！\n#### 代码块\n```golang\nfunc finalPrices(prices []int) []int {\n\tfor i := 0; i < len(prices); i++ {\n\t\tfor j := i + 1; j < len(prices); j++ {\n\t\t\tif prices[j] <= prices[i] {\n\t\t\t\tprices[i] -= prices[j]\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn prices\n}\n```\n#### review\n利用单调性的处理方法是一开始想到的，顺着写完发现不太对还是改为直接模拟了。这题需要逆着然后维护一个单调栈，能做到o(n)复杂度，会更漂亮一点。\n\n## 2200902\n### daily-687.最长同值路径(algorithms\tMedium)\n#### 分析\n本质遍历，注意到一个节点作通路根节点和作左右枝时在通路的表现不同。左枝右枝时传最长单链，作根时可以取左右子节点之和。\n#### 代码块\n```golang\nfunc longestUnivaluePath(root *TreeNode) int {\n\tvar f func(root *TreeNode) int\n\tmax := 0\n\tf = func(root *TreeNode) int {\n\t\tif root == nil {\n\t\t\treturn 0\n\t\t}\n\t\tleft := f(root.Left)\n\t\tright := f(root.Right)\n\t\tif root.Left == nil || root.Left.Val != root.Val {\n\t\t\tleft = 0\n\t\t}\n\t\tif root.Right == nil || root.Right.Val != root.Val {\n\t\t\tright = 0\n\t\t}\n\t\tif left+right > max {\n\t\t\tmax = left + right\n\t\t}\n\t\tif left > right {\n\t\t\treturn left + 1\n\t\t} else {\n\t\t\treturn right + 1\n\t\t}\n\t}\n\tf(root)\n\treturn max\n}\n```\n#### review\n习惯性给max赋-1然后被空树谋杀了，可恶啊。","source":"_posts/Leetcode-22-8week3.md","raw":"---\ntitle: Leetcode 22.8week3\ndate: 2022-09-02 23:59:13\ntags:\ncover: https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/100917024_p0.jpg/1080\n---\n# Aug.Week3\n## 220827\n### daily-662.二叉树最大宽度(algorithms\tMedium)\n#### 分析\n搜索一遍，存一下位置信息就可以搞定。\n#### 代码块\n```golang\nfunc widthOfBinaryTree(root *TreeNode) int {\n\tdeepleft := make([]int, 0)\n\tdeepright := make([]int, 0)\n\tvar f func(root *TreeNode, deep int, now int)\n\tf = func(root *TreeNode, deep int, now int) {\n\t\tif root == nil {\n\t\t\treturn\n\t\t}\n\t\tif len(deepleft) <= deep {\n\t\t\tdeepleft = append(deepleft, now)\n\t\t\tdeepright = append(deepright, now)\n\t\t} else if deepleft[deep] > now {\n\t\t\tdeepleft[deep] = now\n\t\t} else if deepright[deep] < now {\n\t\t\tdeepright[deep] = now\n\t\t}\n\t\tf(root.Left, deep+1, 2*now-1)\n\t\tf(root.Right, deep+1, 2*now)\n\t}\n\tf(root, 0, 1)\n\tmax := -1\n\tfor i := 0; i < len(deepleft); i++ {\n\t\tif deepright[i]-deepleft[i] > max {\n\t\t\tmax = deepright[i] - deepleft[i]\n\t\t}\n\t}\n\treturn max + 1\n}\n```\n#### review\n最后还是写成了深搜，也许广搜更适合这题一点，最后出来一看时间还行空间是有点偏高了。\n## 220828\n### daily-793.阶乘函数后-k-个零(algorithms\tHard)\n#### 分析\n数学题，首先统计阶乘后k个0，本质就是统计里面5的个数是否为k（2的个数永远比5多）。然后每五次就必定会多至少一个五，所以return的结果不是5个，就是0个。问题就转化成了什么时候返回0个。  \n对基本例的判研可以发现，如果一个k返回0值，说明他被跳过了，即阶乘里新加入的数包含多个5。因而我们只要对pow(5,i)的情况作处理即可。  \n预生成一个数组，test[i]的数据为pow(5,i)!的末尾0个数。然后拿k去比对，k应该可以由test的特定项组成，且每一项的系数一定小于5，如若等于5，则说明他是被跳过的k值。\n#### 代码块\n```golang\nfunc preimageSizeFZF(k int) int {\n\ttest := make([]int, 0)\n\ti := 1\n\tfor i < k {\n\t\ttest = append(test, i)\n\t\ti = i*5 + 1\n\t}\n\tfivelen := len(test)\n\ti = fivelen - 1\n\tfor k > 0 {\n\t\tif k == 5*test[i] {\n\t\t\treturn 0\n\t\t}\n\t\tfor k >= test[i] {\n\t\t\tk -= test[i]\n\t\t}\n\t\ti--\n\t}\n\treturn 5\n}\n```\n#### review\n纯数学题，分析时间比较长代码简单，但写表述好难感觉没说到点上。\n\n## 220829\n### daily-1470.重新排列数组(algorithms\tEasy)\n#### 分析\n比较简单，参数还多给一个n，乱跑。\n#### 代码块\n```golang\nfunc shuffle(nums []int, n int) []int {\n\tans := make([]int, n*2)\n\tfor i := 0; i < n; i++ {\n\t\tans[2*i] = nums[i]\n\t\tans[2*i+1] = nums[n+i]\n\t}\n\treturn ans\n}\n```\n#### review\n交完感觉时间不快，不知道快的怎样写的。\n\n\n## 220830\n### daily-998.最大二叉树-ii(algorithms\tMedium)\n#### 分析\n最后一步和上次的654一样，只要先还原列表再跑一次654就行，树还原列表和列表构建数思路一致，已经保证是列表产生，只要左右递归的处理即可。\n#### 代码块\n```golang\nfunc insertIntoMaxTree(root *TreeNode, val int) *TreeNode {\n\ta := maxTreeToSlice(root)\n\tb := append(a, val)\n\treturn constructMaximumBinaryTree(b)\n}\n\nfunc maxTreeToSlice(root *TreeNode) []int {\n\tans := []int{}\n\tif root == nil {\n\t\treturn ans\n\t}\n\tans = append(maxTreeToSlice(root.Left), root.Val)\n\tans = append(ans, maxTreeToSlice(root.Right)...)\n\treturn ans\n}\n\nfunc constructMaximumBinaryTree(nums []int) *TreeNode {\n\tif len(nums) == 0 {\n\t\treturn nil\n\t}\n\tbest := 0\n\tfor i, num := range nums {\n\t\tif num > nums[best] {\n\t\t\tbest = i\n\t\t}\n\t}\n\treturn &TreeNode{nums[best], constructMaximumBinaryTree(nums[:best]), constructMaximumBinaryTree(nums[best+1:])}\n}\n```\n#### review\n速度很快，因为递归构建的关系内存占用有点多。然后看了一眼题解发现其实只要插入一个新val就是了，因为val添加在列表最后，故只可能是根结点或右节点，一路搜过去然后插入构建一下就完了，我怎么没想到可恶啊。\n\n## 220831\n### daily-946.验证栈序列(algorithms\tMedium)\n#### 分析\n模拟，能出就出。\n#### 代码块\n```golang\nfunc validateStackSequences(pushed []int, popped []int) bool {\n\tlenth := len(pushed)\n\tstacknow := make([]int, 0)\n\tstackend := -1\n\tpopnow := 0\n\tfor i := 0; i < lenth; i++ {\n\t\tstackend++\n\t\tstacknow = append(stacknow, pushed[i])\n\t\tfor stacknow[stackend] == popped[popnow] {\n\t\t\tstacknow = stacknow[:stackend]\n\t\t\tstackend--\n\t\t\tpopnow++\n\t\t\tif stackend < 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tif stackend == -1 {\n\t\treturn true\n\t}\n\treturn false\n}\n```\n#### review\n做一下边际处理就完事了。\n\n## 2200901\n### daily-1475.商品折扣后的最终价格(algorithms\tEasy)\n#### 分析\n九月第一题，好水，好水呀！\n#### 代码块\n```golang\nfunc finalPrices(prices []int) []int {\n\tfor i := 0; i < len(prices); i++ {\n\t\tfor j := i + 1; j < len(prices); j++ {\n\t\t\tif prices[j] <= prices[i] {\n\t\t\t\tprices[i] -= prices[j]\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn prices\n}\n```\n#### review\n利用单调性的处理方法是一开始想到的，顺着写完发现不太对还是改为直接模拟了。这题需要逆着然后维护一个单调栈，能做到o(n)复杂度，会更漂亮一点。\n\n## 2200902\n### daily-687.最长同值路径(algorithms\tMedium)\n#### 分析\n本质遍历，注意到一个节点作通路根节点和作左右枝时在通路的表现不同。左枝右枝时传最长单链，作根时可以取左右子节点之和。\n#### 代码块\n```golang\nfunc longestUnivaluePath(root *TreeNode) int {\n\tvar f func(root *TreeNode) int\n\tmax := 0\n\tf = func(root *TreeNode) int {\n\t\tif root == nil {\n\t\t\treturn 0\n\t\t}\n\t\tleft := f(root.Left)\n\t\tright := f(root.Right)\n\t\tif root.Left == nil || root.Left.Val != root.Val {\n\t\t\tleft = 0\n\t\t}\n\t\tif root.Right == nil || root.Right.Val != root.Val {\n\t\t\tright = 0\n\t\t}\n\t\tif left+right > max {\n\t\t\tmax = left + right\n\t\t}\n\t\tif left > right {\n\t\t\treturn left + 1\n\t\t} else {\n\t\t\treturn right + 1\n\t\t}\n\t}\n\tf(root)\n\treturn max\n}\n```\n#### review\n习惯性给max赋-1然后被空树谋杀了，可恶啊。","slug":"Leetcode-22-8week3","published":1,"updated":"2022-09-02T16:10:19.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7koa1co0000hwwr9tri0dse","content":"<h1 id=\"Aug-Week3\"><a href=\"#Aug-Week3\" class=\"headerlink\" title=\"Aug.Week3\"></a>Aug.Week3</h1><h2 id=\"220827\"><a href=\"#220827\" class=\"headerlink\" title=\"220827\"></a>220827</h2><h3 id=\"daily-662-二叉树最大宽度-algorithmsMedium\"><a href=\"#daily-662-二叉树最大宽度-algorithmsMedium\" class=\"headerlink\" title=\"daily-662.二叉树最大宽度(algorithms\tMedium)\"></a>daily-662.二叉树最大宽度(algorithms\tMedium)</h3><h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>搜索一遍，存一下位置信息就可以搞定。</p>\n<h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">widthOfBinaryTree</span><span class=\"params\">(root *TreeNode)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tdeepleft := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tdeepright := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(root *TreeNode, deep <span class=\"keyword\">int</span>, now <span class=\"keyword\">int</span>)</span></span></span><br><span class=\"line\">\tf = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(root *TreeNode, deep <span class=\"keyword\">int</span>, now <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> root == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(deepleft) &lt;= deep &#123;</span><br><span class=\"line\">\t\t\tdeepleft = <span class=\"built_in\">append</span>(deepleft, now)</span><br><span class=\"line\">\t\t\tdeepright = <span class=\"built_in\">append</span>(deepright, now)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> deepleft[deep] &gt; now &#123;</span><br><span class=\"line\">\t\t\tdeepleft[deep] = now</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> deepright[deep] &lt; now &#123;</span><br><span class=\"line\">\t\t\tdeepright[deep] = now</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tf(root.Left, deep+<span class=\"number\">1</span>, <span class=\"number\">2</span>*now<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\tf(root.Right, deep+<span class=\"number\">1</span>, <span class=\"number\">2</span>*now)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf(root, <span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tmax := <span class=\"number\">-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(deepleft); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> deepright[i]-deepleft[i] &gt; max &#123;</span><br><span class=\"line\">\t\t\tmax = deepright[i] - deepleft[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review\"><a href=\"#review\" class=\"headerlink\" title=\"review\"></a>review</h4><p>最后还是写成了深搜，也许广搜更适合这题一点，最后出来一看时间还行空间是有点偏高了。</p>\n<h2 id=\"220828\"><a href=\"#220828\" class=\"headerlink\" title=\"220828\"></a>220828</h2><h3 id=\"daily-793-阶乘函数后-k-个零-algorithmsHard\"><a href=\"#daily-793-阶乘函数后-k-个零-algorithmsHard\" class=\"headerlink\" title=\"daily-793.阶乘函数后-k-个零(algorithms\tHard)\"></a>daily-793.阶乘函数后-k-个零(algorithms\tHard)</h3><h4 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>数学题，首先统计阶乘后k个0，本质就是统计里面5的个数是否为k（2的个数永远比5多）。然后每五次就必定会多至少一个五，所以return的结果不是5个，就是0个。问题就转化成了什么时候返回0个。<br>对基本例的判研可以发现，如果一个k返回0值，说明他被跳过了，即阶乘里新加入的数包含多个5。因而我们只要对pow(5,i)的情况作处理即可。<br>预生成一个数组，test[i]的数据为pow(5,i)!的末尾0个数。然后拿k去比对，k应该可以由test的特定项组成，且每一项的系数一定小于5，如若等于5，则说明他是被跳过的k值。</p>\n<h4 id=\"代码块-1\"><a href=\"#代码块-1\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">preimageSizeFZF</span><span class=\"params\">(k <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\ttest := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\ti := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i &lt; k &#123;</span><br><span class=\"line\">\t\ttest = <span class=\"built_in\">append</span>(test, i)</span><br><span class=\"line\">\t\ti = i*<span class=\"number\">5</span> + <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfivelen := <span class=\"built_in\">len</span>(test)</span><br><span class=\"line\">\ti = fivelen - <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> k == <span class=\"number\">5</span>*test[i] &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k &gt;= test[i] &#123;</span><br><span class=\"line\">\t\t\tk -= test[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ti--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-1\"><a href=\"#review-1\" class=\"headerlink\" title=\"review\"></a>review</h4><p>纯数学题，分析时间比较长代码简单，但写表述好难感觉没说到点上。</p>\n<h2 id=\"220829\"><a href=\"#220829\" class=\"headerlink\" title=\"220829\"></a>220829</h2><h3 id=\"daily-1470-重新排列数组-algorithmsEasy\"><a href=\"#daily-1470-重新排列数组-algorithmsEasy\" class=\"headerlink\" title=\"daily-1470.重新排列数组(algorithms\tEasy)\"></a>daily-1470.重新排列数组(algorithms\tEasy)</h3><h4 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>比较简单，参数还多给一个n，乱跑。</p>\n<h4 id=\"代码块-2\"><a href=\"#代码块-2\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">shuffle</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>, n <span class=\"keyword\">int</span>)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tans := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, n*<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tans[<span class=\"number\">2</span>*i] = nums[i]</span><br><span class=\"line\">\t\tans[<span class=\"number\">2</span>*i+<span class=\"number\">1</span>] = nums[n+i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-2\"><a href=\"#review-2\" class=\"headerlink\" title=\"review\"></a>review</h4><p>交完感觉时间不快，不知道快的怎样写的。</p>\n<h2 id=\"220830\"><a href=\"#220830\" class=\"headerlink\" title=\"220830\"></a>220830</h2><h3 id=\"daily-998-最大二叉树-ii-algorithmsMedium\"><a href=\"#daily-998-最大二叉树-ii-algorithmsMedium\" class=\"headerlink\" title=\"daily-998.最大二叉树-ii(algorithms\tMedium)\"></a>daily-998.最大二叉树-ii(algorithms\tMedium)</h3><h4 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>最后一步和上次的654一样，只要先还原列表再跑一次654就行，树还原列表和列表构建数思路一致，已经保证是列表产生，只要左右递归的处理即可。</p>\n<h4 id=\"代码块-3\"><a href=\"#代码块-3\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">insertIntoMaxTree</span><span class=\"params\">(root *TreeNode, val <span class=\"keyword\">int</span>)</span> *<span class=\"title\">TreeNode</span></span> &#123;</span><br><span class=\"line\">\ta := maxTreeToSlice(root)</span><br><span class=\"line\">\tb := <span class=\"built_in\">append</span>(a, val)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> constructMaximumBinaryTree(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">maxTreeToSlice</span><span class=\"params\">(root *TreeNode)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tans := []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> root == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tans = <span class=\"built_in\">append</span>(maxTreeToSlice(root.Left), root.Val)</span><br><span class=\"line\">\tans = <span class=\"built_in\">append</span>(ans, maxTreeToSlice(root.Right)...)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">constructMaximumBinaryTree</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>)</span> *<span class=\"title\">TreeNode</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbest := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, num := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> num &gt; nums[best] &#123;</span><br><span class=\"line\">\t\t\tbest = i</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;TreeNode&#123;nums[best], constructMaximumBinaryTree(nums[:best]), constructMaximumBinaryTree(nums[best+<span class=\"number\">1</span>:])&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-3\"><a href=\"#review-3\" class=\"headerlink\" title=\"review\"></a>review</h4><p>速度很快，因为递归构建的关系内存占用有点多。然后看了一眼题解发现其实只要插入一个新val就是了，因为val添加在列表最后，故只可能是根结点或右节点，一路搜过去然后插入构建一下就完了，我怎么没想到可恶啊。</p>\n<h2 id=\"220831\"><a href=\"#220831\" class=\"headerlink\" title=\"220831\"></a>220831</h2><h3 id=\"daily-946-验证栈序列-algorithmsMedium\"><a href=\"#daily-946-验证栈序列-algorithmsMedium\" class=\"headerlink\" title=\"daily-946.验证栈序列(algorithms\tMedium)\"></a>daily-946.验证栈序列(algorithms\tMedium)</h3><h4 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>模拟，能出就出。</p>\n<h4 id=\"代码块-4\"><a href=\"#代码块-4\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">validateStackSequences</span><span class=\"params\">(pushed []<span class=\"keyword\">int</span>, popped []<span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\tlenth := <span class=\"built_in\">len</span>(pushed)</span><br><span class=\"line\">\tstacknow := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tstackend := <span class=\"number\">-1</span></span><br><span class=\"line\">\tpopnow := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; lenth; i++ &#123;</span><br><span class=\"line\">\t\tstackend++</span><br><span class=\"line\">\t\tstacknow = <span class=\"built_in\">append</span>(stacknow, pushed[i])</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> stacknow[stackend] == popped[popnow] &#123;</span><br><span class=\"line\">\t\t\tstacknow = stacknow[:stackend]</span><br><span class=\"line\">\t\t\tstackend--</span><br><span class=\"line\">\t\t\tpopnow++</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> stackend &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> stackend == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-4\"><a href=\"#review-4\" class=\"headerlink\" title=\"review\"></a>review</h4><p>做一下边际处理就完事了。</p>\n<h2 id=\"2200901\"><a href=\"#2200901\" class=\"headerlink\" title=\"2200901\"></a>2200901</h2><h3 id=\"daily-1475-商品折扣后的最终价格-algorithmsEasy\"><a href=\"#daily-1475-商品折扣后的最终价格-algorithmsEasy\" class=\"headerlink\" title=\"daily-1475.商品折扣后的最终价格(algorithms\tEasy)\"></a>daily-1475.商品折扣后的最终价格(algorithms\tEasy)</h3><h4 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>九月第一题，好水，好水呀！</p>\n<h4 id=\"代码块-5\"><a href=\"#代码块-5\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">finalPrices</span><span class=\"params\">(prices []<span class=\"keyword\">int</span>)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(prices); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := i + <span class=\"number\">1</span>; j &lt; <span class=\"built_in\">len</span>(prices); j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> prices[j] &lt;= prices[i] &#123;</span><br><span class=\"line\">\t\t\t\tprices[i] -= prices[j]</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> prices</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-5\"><a href=\"#review-5\" class=\"headerlink\" title=\"review\"></a>review</h4><p>利用单调性的处理方法是一开始想到的，顺着写完发现不太对还是改为直接模拟了。这题需要逆着然后维护一个单调栈，能做到o(n)复杂度，会更漂亮一点。</p>\n<h2 id=\"2200902\"><a href=\"#2200902\" class=\"headerlink\" title=\"2200902\"></a>2200902</h2><h3 id=\"daily-687-最长同值路径-algorithmsMedium\"><a href=\"#daily-687-最长同值路径-algorithmsMedium\" class=\"headerlink\" title=\"daily-687.最长同值路径(algorithms\tMedium)\"></a>daily-687.最长同值路径(algorithms\tMedium)</h3><h4 id=\"分析-6\"><a href=\"#分析-6\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>本质遍历，注意到一个节点作通路根节点和作左右枝时在通路的表现不同。左枝右枝时传最长单链，作根时可以取左右子节点之和。</p>\n<h4 id=\"代码块-6\"><a href=\"#代码块-6\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">longestUnivaluePath</span><span class=\"params\">(root *TreeNode)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(root *TreeNode)</span> <span class=\"title\">int</span></span></span><br><span class=\"line\">\tmax := <span class=\"number\">0</span></span><br><span class=\"line\">\tf = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(root *TreeNode)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> root == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tleft := f(root.Left)</span><br><span class=\"line\">\t\tright := f(root.Right)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> root.Left == <span class=\"literal\">nil</span> || root.Left.Val != root.Val &#123;</span><br><span class=\"line\">\t\t\tleft = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> root.Right == <span class=\"literal\">nil</span> || root.Right.Val != root.Val &#123;</span><br><span class=\"line\">\t\t\tright = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> left+right &gt; max &#123;</span><br><span class=\"line\">\t\t\tmax = left + right</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> left &gt; right &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> left + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> right + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf(root)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-6\"><a href=\"#review-6\" class=\"headerlink\" title=\"review\"></a>review</h4><p>习惯性给max赋-1然后被空树谋杀了，可恶啊。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Aug-Week3\"><a href=\"#Aug-Week3\" class=\"headerlink\" title=\"Aug.Week3\"></a>Aug.Week3</h1><h2 id=\"220827\"><a href=\"#220827\" class=\"headerlink\" title=\"220827\"></a>220827</h2><h3 id=\"daily-662-二叉树最大宽度-algorithmsMedium\"><a href=\"#daily-662-二叉树最大宽度-algorithmsMedium\" class=\"headerlink\" title=\"daily-662.二叉树最大宽度(algorithms\tMedium)\"></a>daily-662.二叉树最大宽度(algorithms\tMedium)</h3><h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>搜索一遍，存一下位置信息就可以搞定。</p>\n<h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">widthOfBinaryTree</span><span class=\"params\">(root *TreeNode)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tdeepleft := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tdeepright := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(root *TreeNode, deep <span class=\"keyword\">int</span>, now <span class=\"keyword\">int</span>)</span></span></span><br><span class=\"line\">\tf = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(root *TreeNode, deep <span class=\"keyword\">int</span>, now <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> root == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(deepleft) &lt;= deep &#123;</span><br><span class=\"line\">\t\t\tdeepleft = <span class=\"built_in\">append</span>(deepleft, now)</span><br><span class=\"line\">\t\t\tdeepright = <span class=\"built_in\">append</span>(deepright, now)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> deepleft[deep] &gt; now &#123;</span><br><span class=\"line\">\t\t\tdeepleft[deep] = now</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> deepright[deep] &lt; now &#123;</span><br><span class=\"line\">\t\t\tdeepright[deep] = now</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tf(root.Left, deep+<span class=\"number\">1</span>, <span class=\"number\">2</span>*now<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\tf(root.Right, deep+<span class=\"number\">1</span>, <span class=\"number\">2</span>*now)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf(root, <span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tmax := <span class=\"number\">-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(deepleft); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> deepright[i]-deepleft[i] &gt; max &#123;</span><br><span class=\"line\">\t\t\tmax = deepright[i] - deepleft[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review\"><a href=\"#review\" class=\"headerlink\" title=\"review\"></a>review</h4><p>最后还是写成了深搜，也许广搜更适合这题一点，最后出来一看时间还行空间是有点偏高了。</p>\n<h2 id=\"220828\"><a href=\"#220828\" class=\"headerlink\" title=\"220828\"></a>220828</h2><h3 id=\"daily-793-阶乘函数后-k-个零-algorithmsHard\"><a href=\"#daily-793-阶乘函数后-k-个零-algorithmsHard\" class=\"headerlink\" title=\"daily-793.阶乘函数后-k-个零(algorithms\tHard)\"></a>daily-793.阶乘函数后-k-个零(algorithms\tHard)</h3><h4 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>数学题，首先统计阶乘后k个0，本质就是统计里面5的个数是否为k（2的个数永远比5多）。然后每五次就必定会多至少一个五，所以return的结果不是5个，就是0个。问题就转化成了什么时候返回0个。<br>对基本例的判研可以发现，如果一个k返回0值，说明他被跳过了，即阶乘里新加入的数包含多个5。因而我们只要对pow(5,i)的情况作处理即可。<br>预生成一个数组，test[i]的数据为pow(5,i)!的末尾0个数。然后拿k去比对，k应该可以由test的特定项组成，且每一项的系数一定小于5，如若等于5，则说明他是被跳过的k值。</p>\n<h4 id=\"代码块-1\"><a href=\"#代码块-1\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">preimageSizeFZF</span><span class=\"params\">(k <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\ttest := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\ti := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i &lt; k &#123;</span><br><span class=\"line\">\t\ttest = <span class=\"built_in\">append</span>(test, i)</span><br><span class=\"line\">\t\ti = i*<span class=\"number\">5</span> + <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfivelen := <span class=\"built_in\">len</span>(test)</span><br><span class=\"line\">\ti = fivelen - <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> k == <span class=\"number\">5</span>*test[i] &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k &gt;= test[i] &#123;</span><br><span class=\"line\">\t\t\tk -= test[i]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ti--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-1\"><a href=\"#review-1\" class=\"headerlink\" title=\"review\"></a>review</h4><p>纯数学题，分析时间比较长代码简单，但写表述好难感觉没说到点上。</p>\n<h2 id=\"220829\"><a href=\"#220829\" class=\"headerlink\" title=\"220829\"></a>220829</h2><h3 id=\"daily-1470-重新排列数组-algorithmsEasy\"><a href=\"#daily-1470-重新排列数组-algorithmsEasy\" class=\"headerlink\" title=\"daily-1470.重新排列数组(algorithms\tEasy)\"></a>daily-1470.重新排列数组(algorithms\tEasy)</h3><h4 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>比较简单，参数还多给一个n，乱跑。</p>\n<h4 id=\"代码块-2\"><a href=\"#代码块-2\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">shuffle</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>, n <span class=\"keyword\">int</span>)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tans := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, n*<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tans[<span class=\"number\">2</span>*i] = nums[i]</span><br><span class=\"line\">\t\tans[<span class=\"number\">2</span>*i+<span class=\"number\">1</span>] = nums[n+i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-2\"><a href=\"#review-2\" class=\"headerlink\" title=\"review\"></a>review</h4><p>交完感觉时间不快，不知道快的怎样写的。</p>\n<h2 id=\"220830\"><a href=\"#220830\" class=\"headerlink\" title=\"220830\"></a>220830</h2><h3 id=\"daily-998-最大二叉树-ii-algorithmsMedium\"><a href=\"#daily-998-最大二叉树-ii-algorithmsMedium\" class=\"headerlink\" title=\"daily-998.最大二叉树-ii(algorithms\tMedium)\"></a>daily-998.最大二叉树-ii(algorithms\tMedium)</h3><h4 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>最后一步和上次的654一样，只要先还原列表再跑一次654就行，树还原列表和列表构建数思路一致，已经保证是列表产生，只要左右递归的处理即可。</p>\n<h4 id=\"代码块-3\"><a href=\"#代码块-3\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">insertIntoMaxTree</span><span class=\"params\">(root *TreeNode, val <span class=\"keyword\">int</span>)</span> *<span class=\"title\">TreeNode</span></span> &#123;</span><br><span class=\"line\">\ta := maxTreeToSlice(root)</span><br><span class=\"line\">\tb := <span class=\"built_in\">append</span>(a, val)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> constructMaximumBinaryTree(b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">maxTreeToSlice</span><span class=\"params\">(root *TreeNode)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\tans := []<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> root == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tans = <span class=\"built_in\">append</span>(maxTreeToSlice(root.Left), root.Val)</span><br><span class=\"line\">\tans = <span class=\"built_in\">append</span>(ans, maxTreeToSlice(root.Right)...)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">constructMaximumBinaryTree</span><span class=\"params\">(nums []<span class=\"keyword\">int</span>)</span> *<span class=\"title\">TreeNode</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbest := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, num := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> num &gt; nums[best] &#123;</span><br><span class=\"line\">\t\t\tbest = i</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;TreeNode&#123;nums[best], constructMaximumBinaryTree(nums[:best]), constructMaximumBinaryTree(nums[best+<span class=\"number\">1</span>:])&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-3\"><a href=\"#review-3\" class=\"headerlink\" title=\"review\"></a>review</h4><p>速度很快，因为递归构建的关系内存占用有点多。然后看了一眼题解发现其实只要插入一个新val就是了，因为val添加在列表最后，故只可能是根结点或右节点，一路搜过去然后插入构建一下就完了，我怎么没想到可恶啊。</p>\n<h2 id=\"220831\"><a href=\"#220831\" class=\"headerlink\" title=\"220831\"></a>220831</h2><h3 id=\"daily-946-验证栈序列-algorithmsMedium\"><a href=\"#daily-946-验证栈序列-algorithmsMedium\" class=\"headerlink\" title=\"daily-946.验证栈序列(algorithms\tMedium)\"></a>daily-946.验证栈序列(algorithms\tMedium)</h3><h4 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>模拟，能出就出。</p>\n<h4 id=\"代码块-4\"><a href=\"#代码块-4\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">validateStackSequences</span><span class=\"params\">(pushed []<span class=\"keyword\">int</span>, popped []<span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\tlenth := <span class=\"built_in\">len</span>(pushed)</span><br><span class=\"line\">\tstacknow := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tstackend := <span class=\"number\">-1</span></span><br><span class=\"line\">\tpopnow := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; lenth; i++ &#123;</span><br><span class=\"line\">\t\tstackend++</span><br><span class=\"line\">\t\tstacknow = <span class=\"built_in\">append</span>(stacknow, pushed[i])</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> stacknow[stackend] == popped[popnow] &#123;</span><br><span class=\"line\">\t\t\tstacknow = stacknow[:stackend]</span><br><span class=\"line\">\t\t\tstackend--</span><br><span class=\"line\">\t\t\tpopnow++</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> stackend &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> stackend == <span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-4\"><a href=\"#review-4\" class=\"headerlink\" title=\"review\"></a>review</h4><p>做一下边际处理就完事了。</p>\n<h2 id=\"2200901\"><a href=\"#2200901\" class=\"headerlink\" title=\"2200901\"></a>2200901</h2><h3 id=\"daily-1475-商品折扣后的最终价格-algorithmsEasy\"><a href=\"#daily-1475-商品折扣后的最终价格-algorithmsEasy\" class=\"headerlink\" title=\"daily-1475.商品折扣后的最终价格(algorithms\tEasy)\"></a>daily-1475.商品折扣后的最终价格(algorithms\tEasy)</h3><h4 id=\"分析-5\"><a href=\"#分析-5\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>九月第一题，好水，好水呀！</p>\n<h4 id=\"代码块-5\"><a href=\"#代码块-5\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">finalPrices</span><span class=\"params\">(prices []<span class=\"keyword\">int</span>)</span> []<span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(prices); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> j := i + <span class=\"number\">1</span>; j &lt; <span class=\"built_in\">len</span>(prices); j++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> prices[j] &lt;= prices[i] &#123;</span><br><span class=\"line\">\t\t\t\tprices[i] -= prices[j]</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> prices</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-5\"><a href=\"#review-5\" class=\"headerlink\" title=\"review\"></a>review</h4><p>利用单调性的处理方法是一开始想到的，顺着写完发现不太对还是改为直接模拟了。这题需要逆着然后维护一个单调栈，能做到o(n)复杂度，会更漂亮一点。</p>\n<h2 id=\"2200902\"><a href=\"#2200902\" class=\"headerlink\" title=\"2200902\"></a>2200902</h2><h3 id=\"daily-687-最长同值路径-algorithmsMedium\"><a href=\"#daily-687-最长同值路径-algorithmsMedium\" class=\"headerlink\" title=\"daily-687.最长同值路径(algorithms\tMedium)\"></a>daily-687.最长同值路径(algorithms\tMedium)</h3><h4 id=\"分析-6\"><a href=\"#分析-6\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>本质遍历，注意到一个节点作通路根节点和作左右枝时在通路的表现不同。左枝右枝时传最长单链，作根时可以取左右子节点之和。</p>\n<h4 id=\"代码块-6\"><a href=\"#代码块-6\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">longestUnivaluePath</span><span class=\"params\">(root *TreeNode)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(root *TreeNode)</span> <span class=\"title\">int</span></span></span><br><span class=\"line\">\tmax := <span class=\"number\">0</span></span><br><span class=\"line\">\tf = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(root *TreeNode)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> root == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tleft := f(root.Left)</span><br><span class=\"line\">\t\tright := f(root.Right)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> root.Left == <span class=\"literal\">nil</span> || root.Left.Val != root.Val &#123;</span><br><span class=\"line\">\t\t\tleft = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> root.Right == <span class=\"literal\">nil</span> || root.Right.Val != root.Val &#123;</span><br><span class=\"line\">\t\t\tright = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> left+right &gt; max &#123;</span><br><span class=\"line\">\t\t\tmax = left + right</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> left &gt; right &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> left + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> right + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf(root)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"review-6\"><a href=\"#review-6\" class=\"headerlink\" title=\"review\"></a>review</h4><p>习惯性给max赋-1然后被空树谋杀了，可恶啊。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[{"name":"https://whitebaka-1301161068.cos.ap-nanjing.myqcloud.com/image/100174471_p0.jpg/1080","_id":"cl6f0mikq0001dewr8msm17oz"}]}}